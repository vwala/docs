{"version":3,"sources":["webpack:///./src/templates/ghost/faq-archive.js"],"names":["__webpack_require__","r","__webpack_exports__","d","tagsQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_2__","_components_common_layout__WEBPACK_IMPORTED_MODULE_3__","_styles_spirit_styles__WEBPACK_IMPORTED_MODULE_4__","_components_common_meta__WEBPACK_IMPORTED_MODULE_5__","_components_faq__WEBPACK_IMPORTED_MODULE_6__","FAQTags","_ref","data","location","pageContext","posts","allGhostPost","edges","tagURL","tagName","tagDescription","tagImage","tagMetaTitle","tagMetaDescription","section","title","description","imageUrl","getMetaImageUrls","a","createElement","Fragment","type","image","headerDividerStyle","className","Spirit","page","xl","h4","to","map","_ref2","node","key","id","post","propTypes","PropTypes","shape","site","siteMetadata","siteUrl","string","isRequired","object","pathname"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,GAAAS,EAAAT,EAAAO,EAAAC,GAAAE,EAAAV,EAAA,KAAAW,EAAAX,EAAA,KAAAY,EAAAZ,EAAA,KAAAa,EAAAb,EAAA,KAAAc,EAAAd,EAAA,KASMe,EAAU,SAAAC,GAAqC,IAAlCC,EAAkCD,EAAlCC,KAAMC,EAA4BF,EAA5BE,SAAUC,EAAkBH,EAAlBG,YACzBC,EAAQH,EAAKI,aAAaC,MACxBC,EAAyFJ,EAAzFI,OAAQC,EAAiFL,EAAjFK,QAASC,EAAwEN,EAAxEM,eAAgBC,EAAwDP,EAAxDO,SAAUC,EAA8CR,EAA9CQ,aAAcC,EAAgCT,EAAhCS,mBAAoBC,EAAYV,EAAZU,QAG/EC,EAAQH,GAAY,SAAaH,EAAb,WACpBO,EAAcH,GAAsBH,GAAtB,GACdO,EAAWN,GAAYO,YAAiBJ,GAE9C,OACIvB,EAAA4B,EAAAC,cAAA7B,EAAA4B,EAAAE,SAAA,KACI9B,EAAA4B,EAAAC,cAACtB,EAAA,EAAD,CACII,KAAMA,EACNC,SAAUA,EACVmB,KAAK,SACLP,MAAOA,EACPC,YAAaA,EACbO,MAAON,IAEX1B,EAAA4B,EAAAC,cAACxB,EAAA,EAAD,CAAQ4B,mBAAmB,UACvBjC,EAAA4B,EAAAC,cAAA,OAAKK,UAAU,0BACXlC,EAAA4B,EAAAC,cAAA,OAAKK,UAAcC,IAAOC,KAAKC,GAAjB,4BACVrC,EAAA4B,EAAAC,cAAA,MAAIK,UAAcC,IAAOG,GAAZ,UACTtC,EAAA4B,EAAAC,cAACzB,EAAA,KAAD,CAAMmC,GAAG,QAAQL,UAAU,sBAA3B,8BACAlC,EAAA4B,EAAAC,cAAA,QAAMK,UAAU,2CACZlC,EAAA4B,EAAAC,cAACzB,EAAA,KAAD,CAAMmC,GAAItB,EAAQiB,UAAU,kBAAkBhB,OAK9DlB,EAAA4B,EAAAC,cAAA,OAAKK,UAAcC,IAAOC,KAAKC,GAAjB,gBACVrC,EAAA4B,EAAAC,cAAA,OAAKK,UAAU,0EACVpB,EAAM0B,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACP1C,EAAA4B,EAAAC,cAACrB,EAAA,EAAD,CAASmC,IAAKD,EAAKE,GAAIC,KAAMH,EAAMnB,QAASA,OAGpDvB,EAAA4B,EAAAC,cAAA,OAAKK,UAAU,+CACXlC,EAAA4B,EAAAC,cAACrB,EAAA,EAAD,CAAYI,SAAUA,SAQ9CH,EAAQqC,UAAY,CAChBnC,KAAMoC,IAAUC,MAAM,CAClBC,KAAMF,IAAUC,MAAM,CAClBE,aAAcH,IAAUC,MAAM,CAC1BG,QAASJ,IAAUK,OAAOC,WAC1B7B,MAAOuB,IAAUK,OAAOC,WACxB5B,YAAasB,IAAUK,OAAOC,aAC/BA,aACJA,WACHtC,aAAcgC,IAAUO,OAAOD,aAChCA,WACHzC,SAAUmC,IAAUC,MAAM,CACtBO,SAAUR,IAAUK,OAAOC,aAC5BA,WACHxC,YAAakC,IAAUC,MAAM,CACzBzB,QAASwB,IAAUK,OAAOC,WAC1BnC,QAAS6B,IAAUK,OAAOC,WAC1BpC,OAAQ8B,IAAUK,OAAOC,WACzBlC,eAAgB4B,IAAUK,OAC1B9B,mBAAoByB,IAAUK,OAC9B/B,aAAc0B,IAAUK,OACxBhC,SAAU2B,IAAUK,SACrBC,YAGQ5C,YAER,IAAMX,EAAS","file":"component---src-templates-ghost-faq-archive-js-7eb7d7295d6c581f0e99.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql, Link } from 'gatsby'\n\nimport { Layout } from '../../components/common/layout'\nimport { Spirit } from '../../styles/spirit-styles'\nimport { MetaData, getMetaImageUrls } from '../../components/common/meta'\nimport { FAQLink, FAQTagList } from '../../components/faq'\n\nconst FAQTags = ({ data, location, pageContext }) => {\n    const posts = data.allGhostPost.edges\n    const { tagURL, tagName, tagDescription, tagImage, tagMetaTitle, tagMetaDescription, section } = pageContext\n\n    // Add meta title and description or this page here to overwrite the site meta data as set in the config\n    const title = tagMetaTitle || `FAQ - ${tagName} - Ghost`\n    const description = tagMetaDescription || tagDescription || ``\n    const imageUrl = tagImage || getMetaImageUrls(section)\n\n    return (\n        <>\n            <MetaData\n                data={data}\n                location={location}\n                type=\"series\"\n                title={title}\n                description={description}\n                image={imageUrl}\n            />\n            <Layout headerDividerStyle=\"shadow\">\n                <div className=\"bg-faq bb b--whitegrey\">\n                    <div className={`${Spirit.page.xl} pt-vw7 pt-vw1-ns pb-vw1`}>\n                        <h1 className={`${Spirit.h4} white`}>\n                            <Link to=\"/faq/\" className=\"link dim white fw3\">Frequently Asked Questions</Link>\n                            <span className=\"white titleslash-white pl4 ml4 relative\">\n                                <Link to={tagURL} className=\"link dim white\">{tagName}</Link>\n                            </span>\n                        </h1>\n                    </div>\n                </div>\n                <div className={`${Spirit.page.xl} grid-12 pb5` }>\n                    <div className=\"bg-white shadow-2 br4 mt10 pa5 pa15-ns pt10-ns pb12-ns col-12 col-8-ns\">\n                        {posts.map(({ node }) => (\n                            <FAQLink key={node.id} post={node} section={section}/>\n                        ))}\n                    </div>\n                    <div className=\"col-12 col-4-ns pa5 pa15-ns pt10-ns mt11-ns\">\n                        <FAQTagList location={location} />\n                    </div>\n                </div>\n            </Layout>\n        </>\n    )\n}\n\nFAQTags.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        allGhostPost: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    pageContext: PropTypes.shape({\n        section: PropTypes.string.isRequired,\n        tagName: PropTypes.string.isRequired,\n        tagURL: PropTypes.string.isRequired,\n        tagDescription: PropTypes.string,\n        tagMetaDescription: PropTypes.string,\n        tagMetaTitle: PropTypes.string,\n        tagImage: PropTypes.string,\n    }).isRequired,\n}\n\nexport default FAQTags\n\nexport const tagsQuery = graphql`\n    query($tagSlug: String!) {\n        site {\n            ...SiteMetaFields\n        }\n        allGhostPost(\n            sort: { order: DESC, fields: [published_at] },\n            limit: 100,\n            filter: {tags: {elemMatch: {slug: {eq: $tagSlug}}}}\n        ) {\n            edges {\n                node {\n                    ...GhostPostListFields\n                }\n            }\n        }\n    }\n`\n"],"sourceRoot":""}