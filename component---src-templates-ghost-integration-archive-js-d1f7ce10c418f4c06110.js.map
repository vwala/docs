{"version":3,"sources":["webpack:///./src/templates/ghost/integration-archive.js"],"names":["__webpack_require__","r","__webpack_exports__","d","tagsQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","_components_integrations__WEBPACK_IMPORTED_MODULE_2__","_components_common_meta__WEBPACK_IMPORTED_MODULE_3__","IntegrationsTags","_ref","data","location","pageContext","posts","allGhostPost","edges","tagName","tagDescription","tagImage","tagMetaTitle","tagMetaDescription","section","title","description","imageUrl","getMetaImageUrls","a","createElement","Fragment","type","site","siteMetadata","image","propTypes","PropTypes","shape","siteUrl","string","isRequired","object","pathname"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,GAAAS,EAAAT,EAAAO,EAAAC,GAAAE,EAAAV,EAAA,KAAAW,EAAAX,EAAA,KAOMY,EAAmB,SAAAC,GAAqC,IAAlCC,EAAkCD,EAAlCC,KAAMC,EAA4BF,EAA5BE,SAAUC,EAAkBH,EAAlBG,YAClCC,EAAQH,EAAKI,aAAaC,MACxBC,EAAiFJ,EAAjFI,QAASC,EAAwEL,EAAxEK,eAAgBC,EAAwDN,EAAxDM,SAAUC,EAA8CP,EAA9CO,aAAcC,EAAgCR,EAAhCQ,mBAAoBC,EAAYT,EAAZS,QAGvEC,EAAQH,GAAY,kBAAsBH,EAAtB,WACpBO,EAAcH,GAAsBH,GAAtB,GACdO,EAAWN,GAAYO,YAAiBJ,GAE9C,OACInB,EAAAwB,EAAAC,cAAAzB,EAAAwB,EAAAE,SAAA,KACI1B,EAAAwB,EAAAC,cAACpB,EAAA,EAAD,CACIG,KAAMA,EACNC,SAAUA,EACVkB,KAAK,SACLP,MAAOA,GAASZ,EAAKoB,KAAKC,aAAaT,MACvCC,YAAaA,GAAeb,EAAKoB,KAAKC,aAAaR,YACnDS,MAAOR,IAEXtB,EAAAwB,EAAAC,cAACrB,EAAA,EAAD,CACIO,MAAOA,EACPF,SAAUA,MAM1BH,EAAiByB,UAAY,CACzBvB,KAAMwB,IAAUC,MAAM,CAClBL,KAAMI,IAAUC,MAAM,CAClBJ,aAAcG,IAAUC,MAAM,CAC1BC,QAASF,IAAUG,OAAOC,WAC1BhB,MAAOY,IAAUG,OAAOC,WACxBf,YAAaW,IAAUG,OAAOC,aAC/BA,aACJA,WACHxB,aAAcoB,IAAUK,OAAOD,aAChCA,WACH3B,SAAUuB,IAAUC,MAAM,CACtBK,SAAUN,IAAUG,OAAOC,aAC5BA,WACH1B,YAAasB,IAAUC,MAAM,CACzBd,QAASa,IAAUG,OAAOC,WAC1BtB,QAASkB,IAAUG,OAAOC,WAC1BrB,eAAgBiB,IAAUG,OAC1BjB,mBAAoBc,IAAUG,OAC9BlB,aAAce,IAAUG,OACxBnB,SAAUgB,IAAUG,SACrBC,YAGQ9B,YAER,IAAMR,EAAS","file":"component---src-templates-ghost-integration-archive-js-d1f7ce10c418f4c06110.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport { IntegrationsContent } from '../../components/integrations'\nimport { MetaData, getMetaImageUrls } from '../../components/common/meta'\n\nconst IntegrationsTags = ({ data, location, pageContext }) => {\n    const posts = data.allGhostPost.edges\n    const { tagName, tagDescription, tagImage, tagMetaTitle, tagMetaDescription, section } = pageContext\n\n    // Add meta title and description or this page here to overwrite the site meta data as set in the config\n    const title = tagMetaTitle || `Integrations - ${tagName} - Ghost`\n    const description = tagMetaDescription || tagDescription || ``\n    const imageUrl = tagImage || getMetaImageUrls(section)\n\n    return (\n        <>\n            <MetaData\n                data={data}\n                location={location}\n                type=\"series\"\n                title={title || data.site.siteMetadata.title}\n                description={description || data.site.siteMetadata.description}\n                image={imageUrl}\n            />\n            <IntegrationsContent\n                posts={posts}\n                location={location}\n            />\n        </>\n    )\n}\n\nIntegrationsTags.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        allGhostPost: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    pageContext: PropTypes.shape({\n        section: PropTypes.string.isRequired,\n        tagName: PropTypes.string.isRequired,\n        tagDescription: PropTypes.string,\n        tagMetaDescription: PropTypes.string,\n        tagMetaTitle: PropTypes.string,\n        tagImage: PropTypes.string,\n    }).isRequired,\n}\n\nexport default IntegrationsTags\n\nexport const tagsQuery = graphql`\n    query($tagSlug: String!) {\n        site {\n            ...SiteMetaFields\n        }\n        allGhostPost(\n            sort: { order: ASC, fields: [published_at] },\n            limit: 100,\n            filter: {tags: {elemMatch: {slug: {eq: $tagSlug}}}}\n        ) {\n            edges {\n                node {\n                    ...GhostPostListFields\n                }\n            }\n        }\n    }\n`\n"],"sourceRoot":""}