{"version":3,"sources":["webpack:///./src/components/common/meta/getAuthorProperties.js","webpack:///./src/components/common/meta/ImageMeta.js","webpack:///./src/components/common/meta/ArticleMetaGhost.js","webpack:///./src/components/common/meta/ArticleMetaMD.js","webpack:///./src/components/common/meta/WebsiteMeta.js","webpack:///./src/components/common/meta/MetaData.js","webpack:///./src/components/common/meta/getMetaImageUrls.js","webpack:///./src/components/common/meta/index.js","webpack:///./src/utils/getTagsforPostCollection.js","webpack:///./src/components/faq/FAQLink.js","webpack:///./src/components/faq/FAQTagList.js","webpack:///./src/components/faq/index.js"],"names":["getAuthorProperties","primaryAuthor","fetchAuthorData","authorProfiles","push","website","twitter","_","trimStart","facebook","compact","name","sameAsArray","length","join","image","profile_image","defaultProps","PropTypes","shape","string","isRequired","bool","ImageMeta","_ref","react_default","a","createElement","Helmet_default","content","property","propTypes","ArticleMetaGhost","data","canonical","title","overwriteDefaultImage","ghostPost","siteMetadata","site","author","primary_author","publicTags","map","tagsHelper","visibility","fn","tag","primaryTag","slug","seoImage","feature_image","Fragment","meta_title","meta_description","excerpt","rel","href","og_title","og_description","published_at","updated_at","keyword","i","key","twitter_title","twitter_description","type","siteUrl","meta_ImageMeta","object","tags","arrayOf","description","ArticleMetaMD","post","markdownRemark","fm","frontmatter","publishedAtISODate","date","Date","toISOString","keywords","getMetaImageUrls","timeToRead","number","WebsiteMeta","oneOf","MetaData","location","_ref2","url","resolve","pathname","meta_ArticleMetaGhost","meta_ArticleMetaMD","meta_WebsiteMeta","imageUrls","default","process","section","proptypes","__webpack_require__","d","__webpack_exports__","meta_MetaData","meta_getMetaImageUrls","getTagsforPostCollection","posts","linkPrefix","exec","forEach","node","flattenDeep","link","sortedUniqBy","sortBy","FAQLink","children","to","className","substring","gatsby_browser_entry","Spirit","small","FAQTagList","allGhostPost","edges","unshift","h5","dynamicClass","data-cy","FAQTagsQuery","props","query","render","FAQTagList_FAQTagList","Object","assign","_4095130143","faq_FAQLink","faq_FAQTagList"],"mappings":"sMAGaA,EAAsB,SAACC,EAAeC,GAC/C,IAAIC,EAAiB,GAkBrB,OAhBID,EACAC,EAAeC,KACXH,EAAcI,QAAUJ,EAAcI,QAAU,KAChDJ,EAAcK,QAAd,uBAA+CC,IAAEC,UAAUP,EAAcK,QAA1B,KAA/C,IAA4F,KAC5FL,EAAcQ,SAAd,4BAAqDR,EAAcQ,SAAnE,IAAiF,MAGrFN,EAAeC,KAAf,kFAOJD,EAAiBI,IAAEG,QAAQP,GAEpB,CACHQ,KAAMT,EAAkBD,EAAcU,KAAjB,QACrBC,YAAaT,EAAeU,OAAf,KAA6BN,IAAEO,KAAKX,EAAP,QAA7B,KAAkE,KAC/EY,MAAOb,EAAkBD,EAAce,cAAgB,OAI/DhB,EAAoBiB,aAAe,CAC/Bf,iBAAiB,GAGrBF,EAAoBkB,UAAY,CAC5BjB,cAAeiB,IAAUC,MAAM,CAC3BR,KAAMO,IAAUE,OAAOC,WACvBL,cAAeE,IAAUE,OACzBf,QAASa,IAAUE,OACnBd,QAASY,IAAUE,OACnBX,SAAUS,IAAUE,SACrBC,WACHnB,gBAAiBgB,IAAUI,KAAKD,YAGrBrB,QCxCTuB,EAAY,SAAAC,GAAA,IAAGT,EAAHS,EAAGT,MAAH,OACdU,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACID,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,eAAekB,QAAQ,wBAClCJ,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,gBAAgBkB,QAASd,IACpCU,EAAAC,EAAAC,cAAA,QAAMG,SAAS,WAAWD,QAASd,IAEnCU,EAAAC,EAAAC,cAAA,QAAMG,SAAS,iBAAiBD,QAAQ,SACxCJ,EAAAC,EAAAC,cAAA,QAAMG,SAAS,kBAAkBD,QAAQ,UAIjDN,EAAUQ,UAAY,CAClBhB,MAAOG,IAAUE,OAAOC,YAGbE,QCVTS,EAAmB,SAAAR,GAA+E,IAA5ES,EAA4ET,EAA5ES,KAAMC,EAAsEV,EAAtEU,UAAWhC,EAA2DsB,EAA3DtB,gBAAiBiC,EAA0CX,EAA1CW,MAAOC,EAAmCZ,EAAnCY,sBAAuBrB,EAAYS,EAAZT,MAChFsB,EAAcJ,EAAdI,UACAC,EAAiBL,EAAKM,KAAtBD,aAEFE,EAASxC,EAAoBqC,EAAUI,eAAgBvC,GACvDwC,EAAanC,IAAEoC,IAAIC,eAAWP,EAAW,CAAEQ,WAAU,SAAYC,GAAI,SAAAC,GAAG,OAAIA,KAA/D,QACbC,EAAaN,EAAW,IAAM,CAAE/B,KAAI,UAAasC,KAAI,WACrDC,EAAYd,GAAyBC,EAAUc,cAAiBd,EAAUc,cAAgBpC,EAEhG,OACIU,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0B,SAAA,KACI3B,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACID,EAAAC,EAAAC,cAAA,aAAQU,EAAUgB,YAAclB,GAASE,EAAUF,OACnDV,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,cAAckB,QAASQ,EAAUiB,kBAAoBjB,EAAUkB,UAC1E9B,EAAAC,EAAAC,cAAA,QAAM6B,IAAI,YAAYC,KAAMvB,IAE5BT,EAAAC,EAAAC,cAAA,QAAMG,SAAS,eAAeD,QAASS,EAAaH,QACpDV,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,UAAUkB,QAAQ,YAC7BJ,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,WACPkB,QACIQ,EAAUqB,UACVvB,GACAE,EAAUgB,YACVhB,EAAUF,QAGlBV,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,iBACPkB,QACIQ,EAAUsB,gBACVtB,EAAUkB,SACVlB,EAAUiB,mBAGlB7B,EAAAC,EAAAC,cAAA,QAAMG,SAAS,SAASD,QAASK,IACjCT,EAAAC,EAAAC,cAAA,QAAMG,SAAS,yBAAyBD,QAASQ,EAAUuB,eAC3DnC,EAAAC,EAAAC,cAAA,QAAMG,SAAS,wBAAwBD,QAASQ,EAAUwB,aACzDnB,EAAWC,IAAI,SAACmB,EAASC,GAAV,OAAiBtC,EAAAC,EAAAC,cAAA,QAAMG,SAAS,cAAcD,QAASiC,EAASE,IAAKD,MACrFtC,EAAAC,EAAAC,cAAA,QAAMG,SAAS,iBAAiBD,QAAQ,oCAExCJ,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,gBACPkB,QACIQ,EAAU4B,eACV9B,GACAE,EAAUgB,YACVhB,EAAUF,QAGlBV,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,sBACPkB,QACIQ,EAAU6B,qBACV7B,EAAUkB,SACVlB,EAAUiB,mBAGlB7B,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,cAAckB,QAASK,IAGlCT,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,iBAAiBkB,QAAQ,eACpCJ,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,gBAAgBkB,QAASW,EAAO7B,OAC3Cc,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,iBAAiBkB,QAAQ,gBACpCJ,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,gBAAgBkB,QAASmB,IACpCvB,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,eAAekB,QAAQ,cAClCJ,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,kBAAkBkB,QAAQ,cACrCJ,EAAAC,EAAAC,cAAA,UAAQwC,KAAK,uBAAb,+PAMuB3B,EAAO7B,KAN9B,oCAOc6B,EAAOzB,MAAQyB,EAAO5B,YAAP,aAAkC4B,EAAOzB,MAAzC,kBAAkEyB,EAAOzB,MAAzE,IAAf,IAPd,kCAQcyB,EAAO5B,YAAP,aAAkC4B,EAAO5B,YAAzC,IARd,0DAUU8B,EAAW7B,OAAX,gBAAoCN,IAAEO,KAAK4B,EAAP,MAApC,SAVV,2CAWuBL,EAAUgB,YAAclB,GAASE,EAAUF,OAXlE,uCAYkBD,EAZlB,iDAa4BG,EAAUuB,aAbtC,gDAc2BvB,EAAUwB,WAdrC,oIAiBsBX,EAjBtB,mKAqB0Bb,EAAUiB,kBAAoBjB,EAAUkB,SArBlE,2IAwBsBjB,EAAa8B,QAxBnC,0EA6BJ3C,EAAAC,EAAAC,cAAC0C,EAAD,CAAWtD,MAAOmC,MAgB9BlB,EAAiBf,aAAe,CAC5Bf,iBAAiB,GAGrB8B,EAAiBD,UAAY,CACzBE,KAAMf,IAAUC,MAAM,CAClBkB,UAAWnB,IAAUC,MAAM,CACvBgB,MAAOjB,IAAUE,OAAOC,WACxBuC,aAAc1C,IAAUE,OAAOC,WAC/BwC,WAAY3C,IAAUE,OAAOC,WAC7BkC,QAASrC,IAAUE,OAAOC,WAC1BgC,WAAYnC,IAAUE,OACtBkC,iBAAkBpC,IAAUE,OAC5BqB,eAAgBvB,IAAUoD,OAAOjD,WACjC8B,cAAejC,IAAUE,OACzBmD,KAAMrD,IAAUsD,QACZtD,IAAUC,MAAM,CACZR,KAAMO,IAAUE,OAChB6B,KAAM/B,IAAUE,OAChByB,WAAY3B,IAAUE,UAG9B4B,WAAY9B,IAAUC,MAAM,CACxBR,KAAMO,IAAUE,SAEpBsC,SAAUxC,IAAUE,OACpBuC,eAAgBzC,IAAUE,OAC1B6C,cAAe/C,IAAUE,OACzB8C,oBAAqBhD,IAAUE,SAChCC,WACHkB,KAAMrB,IAAUC,MAAM,CAClBmB,aAAcpB,IAAUC,MAAM,CAC1BiD,QAASlD,IAAUE,OAAOC,WAC1Bc,MAAOjB,IAAUE,OAAOC,WACxBoD,YAAavD,IAAUE,OAAOC,aAC/BA,aACJA,aACJA,WACHa,UAAWhB,IAAUE,OAAOC,WAC5BN,MAAOG,IAAUE,OAAOC,WACxBnB,gBAAiBgB,IAAUI,KAC3Ba,MAAOjB,IAAUE,OACjBgB,sBAAuBlB,IAAUI,MAGtBU,QC1JT0C,EAAgB,SAAAlD,GAAyB,IAAtBS,EAAsBT,EAAtBS,KAAMC,EAAgBV,EAAhBU,UACrByC,EAAO1C,EAAK2C,eACZC,EAAKF,EAAKG,YACRxC,EAAiBL,EAAKM,KAAtBD,aAIFyC,EAAqBF,EAAGG,KAAO,IAAIC,KAAKJ,EAAGG,MAAME,cAAgB,IAAID,KAAJ,cAAuBC,cACxFlC,EAAa6B,EAAGM,UAAYN,EAAGM,SAAStE,OAASgE,EAAGM,SAAS,GAAK,KAClEjC,EAAWkC,IAEjB,OACI3D,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0B,SAAA,KACI3B,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACID,EAAAC,EAAAC,cAAA,aAAQkD,EAAGxB,YAAcwB,EAAG1C,OAC5BV,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,cAAckB,QAASgD,EAAGvB,kBAAoBqB,EAAKpB,UAC9D9B,EAAAC,EAAAC,cAAA,QAAM6B,IAAI,YAAYC,KAAMvB,IAE5BT,EAAAC,EAAAC,cAAA,QAAMG,SAAS,eAAeD,QAASS,EAAaH,QACpDV,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,UAAUkB,QAAQ,YAC7BJ,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,WAAWkB,QAASgD,EAAGxB,YAAcwB,EAAG1C,QACnDV,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,iBAAiBkB,QAASgD,EAAGvB,kBAAoBqB,EAAKpB,UACjE9B,EAAAC,EAAAC,cAAA,QAAMG,SAAS,SAASD,QAASK,IACjCT,EAAAC,EAAAC,cAAA,QAAMG,SAAS,yBAAyBD,QAASkD,IAChDF,EAAGM,UAAYN,EAAGM,SAAStE,OAASgE,EAAGM,SAASxC,IAAI,SAACmB,EAASC,GAAV,OAAiBtC,EAAAC,EAAAC,cAAA,QAAMG,SAAS,cAAcD,QAASiC,EAASE,IAAKD,MAAU,KACpItC,EAAAC,EAAAC,cAAA,QAAMG,SAAS,iBAAiBD,QAAQ,oCAExCJ,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,gBAAgBkB,QAASgD,EAAGxB,YAAcwB,EAAG1C,QACxDV,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,sBAAsBkB,QAASgD,EAAGvB,kBAAoBqB,EAAKpB,UACtE9B,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,cAAckB,QAASK,IAClCT,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,iBAAiBkB,QAAQ,iBACpCJ,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,gBAAgBkB,QAAY8C,EAAKU,WAAV,cACjCrC,EAAavB,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,iBAAiBkB,QAAQ,gBAAmB,KACpEmB,EAAavB,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,gBAAgBkB,QAASmB,IAAiB,KACnEvB,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,eAAekB,QAAQ,cAClCJ,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,kBAAkBkB,QAAQ,cACrCJ,EAAAC,EAAAC,cAAA,UAAQwC,KAAK,uBAAb,8jBAaUU,EAAGM,UAAYN,EAAGM,SAAStE,OAA3B,gBAAoDN,IAAEO,KAAK+D,EAAGM,SAAV,MAApD,SAbV,2CAcuBN,EAAGxB,YAAcwB,EAAG1C,OAd3C,uCAekBD,EAflB,iDAgB4B6C,EAhB5B,oIAmBsB7B,EAnBtB,mKAuB0B2B,EAAGvB,kBAAoBqB,EAAKpB,SAvBtD,2IA0BsBjB,EAAa8B,QA1BnC,0EA+BJ3C,EAAAC,EAAAC,cAAC0C,EAAD,CAAWtD,MAAOmC,MAgB9BwB,EAAc3C,UAAY,CACtBE,KAAMf,IAAUC,MAAM,CAClByD,eAAgB1D,IAAUC,MAAM,CAC5B2D,YAAa5D,IAAUC,MAAM,CACzBgB,MAAOjB,IAAUE,OAAOC,WACxB8D,SAAUjE,IAAUsD,QAChBtD,IAAUE,QAEdiC,WAAYnC,IAAUE,OACtBkC,iBAAkBpC,IAAUE,OAC5B4D,KAAM9D,IAAUE,SACjBC,WACHkC,QAASrC,IAAUE,OAAOC,WAC1BgE,WAAYnE,IAAUoE,SACvBjE,WACHkB,KAAMrB,IAAUC,MAAM,CAClBmB,aAAcpB,IAAUC,MAAM,CAC1BiD,QAASlD,IAAUE,OAAOC,WAC1Bc,MAAOjB,IAAUE,OAAOC,WACxBoD,YAAavD,IAAUE,OAAOC,aAC/BA,aACJA,aACJA,WACHa,UAAWhB,IAAUE,OAAOC,YAGjBqD,QC/GTa,EAAc,SAAA/D,GAAA,IAAGS,EAAHT,EAAGS,KAAMC,EAATV,EAASU,UAAWC,EAApBX,EAAoBW,MAAOsC,EAA3BjD,EAA2BiD,YAAa1D,EAAxCS,EAAwCT,MAAOoD,EAA/C3C,EAA+C2C,KAA/C,OAChB1C,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0B,SAAA,KACI3B,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACID,EAAAC,EAAAC,cAAA,aAAQQ,GACRV,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,cAAckB,QAAS4C,IAClChD,EAAAC,EAAAC,cAAA,QAAM6B,IAAI,YAAYC,KAAMvB,IAC5BT,EAAAC,EAAAC,cAAA,QAAMG,SAAS,eAAeD,QAASI,EAAKM,KAAKD,aAAaH,QAC9DV,EAAAC,EAAAC,cAAA,QAAMG,SAAS,UAAUD,QAAQ,YACjCJ,EAAAC,EAAAC,cAAA,QAAMG,SAAS,WAAWD,QAASM,IACnCV,EAAAC,EAAAC,cAAA,QAAMG,SAAS,iBAAiBD,QAAS4C,IACzChD,EAAAC,EAAAC,cAAA,QAAMG,SAAS,SAASD,QAASK,IACjCT,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,gBAAgBkB,QAASM,IACpCV,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,sBAAsBkB,QAAS4C,IAC1ChD,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,cAAckB,QAASK,IAClCT,EAAAC,EAAAC,cAAA,QAAMhB,KAAK,eAAekB,QAAQ,cAClCJ,EAAAC,EAAAC,cAAA,UAAQwC,KAAK,uBAAb,0HAGuBA,GAAY,WAAJA,EAAR,wBAHvB,sCAIsBjC,EAJtB,oIAO0BnB,EAP1B,8PAa0BkB,EAAKM,KAAKD,aAAa8B,QAbjD,0EAe8BK,EAf9B,+CAmBJhD,EAAAC,EAAAC,cAAC0C,EAAD,CAAWtD,MAAOA,MAe1BwE,EAAYxD,UAAY,CACpBE,KAAMf,IAAUC,MAAM,CAClBoB,KAAMrB,IAAUC,MAAM,CAClBmB,aAAcpB,IAAUC,MAAM,CAC1BiD,QAASlD,IAAUE,OAAOC,WAC1Bc,MAAOjB,IAAUE,OAAOC,aACzBA,aACJA,aACJA,WACHa,UAAWhB,IAAUE,OAAOC,WAC5Bc,MAAOjB,IAAUE,OAAOC,WACxBoD,YAAavD,IAAUE,OAAOC,WAC9BN,MAAOG,IAAUE,OAAOC,WACxB8C,KAAMjD,IAAUsE,MAAM,sBAAuBnE,YAGlCkE,QC/DTE,EAAW,SAAAjE,GASX,IARFS,EAQET,EARFS,KACAkC,EAOE3C,EAPF2C,KACAhC,EAMEX,EANFW,MACAsC,EAKEjD,EALFiD,YACA1D,EAIES,EAJFT,MACAb,EAGEsB,EAHFtB,gBACAkC,EAEEZ,EAFFY,sBACAsD,EACElE,EADFkE,SACEC,EACoC1D,GAAQ,GAAtCI,EADNsD,EACMtD,UAAWuC,EADjBe,EACiBf,eACXtC,EAAiBL,EAAKM,KAAtBD,aAEFJ,EAAY0D,IAAIC,QAAQvD,EAAa8B,QAASsB,EAASI,SAA3C,KAElB,GAAQ,YAAJ3B,EAAoB,CACpB,GAAI9B,EACA,OACIZ,EAAAC,EAAAC,cAACoE,EAAD,CACI9D,KAAMA,EACNC,UAAWA,EACXhC,gBAAiBA,EACjBiC,MAAOA,EACPpB,MAAOA,EACPqB,sBAAuBA,IAG5B,GAAIwC,EACP,OACInD,EAAAC,EAAAC,cAACqE,EAAD,CACI/D,KAAMA,EACNC,UAAWA,SAIpB,GAAQ,YAAJiC,GAA0B,WAAJA,EAC7B,OACI1C,EAAAC,EAAAC,cAACsE,EAAD,CACIhE,KAAMA,EACNC,UAAWA,EACXC,MAAOA,EACPsC,YAAaA,EACb1D,MAAOA,EACPoD,KAAMA,IAKlB,OAAO,MAGXsB,EAAS1D,UAAY,CACjBE,KAAMf,IAAUC,MAAM,CAClBoB,KAAMrB,IAAUC,MAAM,CAClBmB,aAAcpB,IAAUC,MAAM,CAC1BiD,QAASlD,IAAUE,OAAOC,WAC1Bc,MAAOjB,IAAUE,OAAOC,WACxBoD,YAAavD,IAAUE,OAAOC,aAC/BA,aACJA,WACHgB,UAAWnB,IAAUoD,OACrBM,eAAgB1D,IAAUoD,SAC3BjD,WACHqE,SAAUxE,IAAUC,MAAM,CACtB2E,SAAU5E,IAAUE,OAAOC,aAC5BA,WACH8C,KAAMjD,IAAUsE,MAAM,gCAAkCnE,WACxDc,MAAOjB,IAAUE,OACjBqD,YAAavD,IAAUE,OACvBL,MAAOG,IAAUE,OACjBlB,gBAAiBgB,IAAUI,KAC3Bc,sBAAuBlB,IAAUI,MAGtBmE,QC3ETS,EAAY,CAIdC,QAASP,IAAIC,QANDO,sBAMH,0BAGAhB,EAAmB,SAACiB,GAG7B,OAAOH,EADPG,EAAUA,GAAO,YAIrBjB,EAAiBkB,UAAY,CACzBD,QAASnF,IAAUE,OAAOC,YAGf+D,QCxBfmB,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,2HCUaC,EAA2B,SAAkCC,EAAOC,GAC7E,IAAIvC,EAAO,GAeX,OAbAuC,EAAa,iCAAiCC,KAAKD,GAAY,GAE/DvG,IAAEyG,QAAQH,EAAO,SAAArF,GAAc,IAAXyF,EAAWzF,EAAXyF,KACVvE,EAAaE,eAAWqE,EAAM,CAAEpE,WAAU,SAAYC,GAAI,SAAAC,GAAG,OAAIA,KACvEwB,EAAKnE,KAAKsC,KAGd6B,EAAOhE,IAAE2G,YAAY3C,GAErBhE,IAAEoC,IAAI4B,EAAM,SAACxB,GACTA,EAAIoE,KAAOL,EAAU,IAAOA,EAAP,IAAqB/D,EAAIE,KAAzB,QAAuCF,EAAIE,KAA3C,MAGlB1C,IAAE6G,aAAa7G,IAAE8G,OAAO9G,IAAE2G,YAAY3C,GAAvB,QAAf,SAGXqC,EAAyBN,UAAY,CACjCO,MAAO3F,IAAUsD,QACbtD,IAAUC,MAAM,CACZ8F,KAAM/F,IAAUC,MAAM,CAClBoD,KAAMrD,IAAUsD,QACZtD,IAAUC,MAAM,CACZR,KAAMO,IAAUE,OAAOC,WACvB4B,KAAM/B,IAAUE,OAAOC,cAE7BA,aACHA,cACHA,WACRyF,WAAY5F,IAAUE,uGCnCpBkG,EAAU,SAAA9F,GAAuD,IAApDmD,EAAoDnD,EAApDmD,KAAM0B,EAA8C7E,EAA9C6E,QAASlE,EAAqCX,EAArCW,MAAOoF,EAA8B/F,EAA9B+F,SAAUC,EAAoBhG,EAApBgG,GAAIC,EAAgBjG,EAAhBiG,UAC7C7B,EAAMjB,EAAI,IAAO0B,EAAP,IAAkB1B,EAAK1B,KAAvB,IAAiCuE,EACjDrF,EAAQwC,EAAOA,EAAKxC,MAAQA,EAC5B,IAAMoB,EAAUoB,EACZA,EAAKpB,QAAQ1C,OAAS,IAAS8D,EAAKpB,QAAQmE,UAAU,EAAG,KAAzD,MAAqE/C,EAAKpB,QACxEgE,EAEN,OACI9F,EAAAC,EAAAC,cAACgG,EAAA,KAAD,CAAMH,GAAI5B,EAAK6B,UAAWA,GACtBhG,EAAAC,EAAAC,cAAA,MAAI6F,GAAI5B,EAAK6B,UAAcG,IAAOrE,QAAZ,sBAA0CpB,EAAhE,MACCoB,GAAW9B,EAAAC,EAAAC,cAAA,KAAG8F,UAAcG,IAAOC,MAAZ,mCAAqDtE,KAIzF+D,EAAQrG,aAAe,CACnBwG,UAAS,6CACTpB,QAAO,OAGXiB,EAAQvF,UAAY,CAChB4C,KAAMzD,IAAUC,MAAM,CAClBgB,MAAOjB,IAAUE,OACjB6B,KAAM/B,IAAUE,OAChBmC,QAASrC,IAAUE,SAEvBiF,QAASnF,IAAUE,OAAOC,WAC1Bc,MAAOjB,IAAUE,OACjBmG,SAAUrG,IAAU+F,KACpBO,GAAItG,IAAUE,OACdqG,UAAWvG,IAAUE,QAGVkG,gDC/BTQ,EAAa,SAAAtG,GAAwB,IAArBS,EAAqBT,EAArBS,KAAMyD,EAAelE,EAAfkE,SAClBnB,EAAOqC,YAAyB3E,EAAK8F,aAAaC,MAAnB,OAUrC,OANAzD,EAAK0D,QAAQ,CACTtH,KAAI,MACJsC,KAAI,MACJkE,KAAI,UAIA1F,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0B,SAAA,KACI3B,EAAAC,EAAAC,cAAA,MAAI8F,UAAcG,IAAOM,GAAZ,YAAb,cACAzG,EAAAC,EAAAC,cAAA,OAAK8F,UAAU,OACVlD,EAAK5B,IAAI,SAACI,EAAKgB,GACZ,IAAMoE,EAAezC,EAASI,WAAa/C,EAAIoE,KAA1B,0EAErB,OACI1F,EAAAC,EAAAC,cAACgG,EAAA,KAAD,CACIH,GAAIzE,EAAIoE,KACRM,UAAcU,EAAL,uCACTnE,IAAKD,EACLqE,UAAYrF,EAAIE,KAAhB,WAECF,EAAIpC,WASrCmH,EAAW/F,UAAY,CACnB2D,SAAUxE,IAAUoD,OAAOjD,WAC3BY,KAAMf,IAAUC,MAAM,CAClB4G,aAAc7G,IAAUC,MAAM,CAC1B6G,MAAO9G,IAAUsD,QACbtD,IAAUC,MAAM,CACZwD,KAAMzD,IAAUC,MAAM,CAClB4B,IAAK7B,IAAUsD,QACXtD,IAAUC,MAAM,CACZR,KAAMO,IAAUE,OAChB6B,KAAM/B,IAAUE,cAI7BC,YACLA,aACHA,aACJA,YAGP,IAoBegH,EApBM,SAAAC,GAAK,OACtB7G,EAAAC,EAAAC,cAACgG,EAAA,YAAD,CACIY,MAAK,aAeLC,OAAQ,SAAAvG,GAAI,OAAIR,EAAAC,EAAAC,cAAC8G,EAADC,OAAAC,OAAA,CAAY1G,KAAMA,GAAUqG,KAhBhDrG,KAAA2G,KC9DJrC,EAAAC,EAAAC,EAAA,sBAAAoC,IAAAtC,EAAAC,EAAAC,EAAA,sBAAAqC","file":"4-59693d3074574436b440.js","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\n\nexport const getAuthorProperties = (primaryAuthor, fetchAuthorData) => {\n    let authorProfiles = []\n\n    if (fetchAuthorData) {\n        authorProfiles.push(\n            primaryAuthor.website ? primaryAuthor.website : null,\n            primaryAuthor.twitter ? `https://twitter.com/${_.trimStart(primaryAuthor.twitter, `@`)}/` : null,\n            primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook}/` : null\n        )\n    } else {\n        authorProfiles.push(\n            `https://vwa.la/`,\n            `https://twitter.com/ghost/`,\n            `https://www.facebook.com/ghost/`\n        )\n    }\n\n    authorProfiles = _.compact(authorProfiles)\n\n    return {\n        name: fetchAuthorData ? primaryAuthor.name : `Ghost`,\n        sameAsArray: authorProfiles.length ? `[\"${_.join(authorProfiles, `\", \"`)}\"]` : null,\n        image: fetchAuthorData ? primaryAuthor.profile_image : null,\n    }\n}\n\ngetAuthorProperties.defaultProps = {\n    fetchAuthorData: false,\n}\n\ngetAuthorProperties.PropTypes = {\n    primaryAuthor: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        profile_image: PropTypes.string,\n        website: PropTypes.string,\n        twitter: PropTypes.string,\n        facebook: PropTypes.string,\n    }).isRequired,\n    fetchAuthorData: PropTypes.bool.isRequired,\n}\n\nexport default getAuthorProperties\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nconst ImageMeta = ({ image }) => (\n    <Helmet>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:image\" content={image} />\n        <meta property=\"og:image\" content={image} />\n        {/* These are the image sizes of the SEO feature images */}\n        <meta property=\"og:image:width\" content=\"1000\" />\n        <meta property=\"og:image:height\" content=\"523\" />\n    </Helmet >\n)\n\nImageMeta.propTypes = {\n    image: PropTypes.string.isRequired,\n}\n\nexport default ImageMeta\n","import { tags as tagsHelper } from '@tryghost/helpers';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from \"react-helmet\";\nimport getAuthorProperties from './getAuthorProperties';\nimport ImageMeta from './ImageMeta';\n\n\nconst ArticleMetaGhost = ({ data, canonical, fetchAuthorData, title, overwriteDefaultImage, image }) => {\n    const { ghostPost } = data\n    const { siteMetadata } = data.site\n\n    const author = getAuthorProperties(ghostPost.primary_author, fetchAuthorData)\n    const publicTags = _.map(tagsHelper(ghostPost, { visibility: `public`, fn: tag => tag }), `name`)\n    const primaryTag = publicTags[0] || { name: `General`, slug: `general` }\n    const seoImage = (overwriteDefaultImage && ghostPost.feature_image) ? ghostPost.feature_image : image\n\n    return (\n        <>\n            <Helmet>\n                <title>{ghostPost.meta_title || title || ghostPost.title}</title>\n                <meta name=\"description\" content={ghostPost.meta_description || ghostPost.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta name=\"og:type\" content=\"article\" />\n                <meta name=\"og:title\"\n                    content={\n                        ghostPost.og_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"og:description\"\n                    content={\n                        ghostPost.og_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={ghostPost.published_at} />\n                <meta property=\"article:modified_time\" content={ghostPost.updated_at} />\n                {publicTags.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />))}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\"\n                    content={\n                        ghostPost.twitter_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"twitter:description\"\n                    content={\n                        ghostPost.twitter_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta name=\"twitter:url\" content={canonical} />\n                {/* <meta name=\"twitter.label1\" content=\"Reading time\" /> */}\n                {/* <meta name=\"twitter:data1\" content=\"TODO: Reading time helper and replace existing `label1` data\" /> */}\n                <meta name=\"twitter:label1\" content=\"Written by\" />\n                <meta name=\"twitter:data1\" content={author.name} />\n                <meta name=\"twitter:label2\" content=\"Filed under\" />\n                <meta name=\"twitter:data2\" content={primaryTag} />\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"${author.name}\",\n                            ${author.image ? author.sameAsArray ? `\"image\": \"${author.image}\",` : `\"image\": \"${author.image}\"` : ``}\n                            ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray}` : ``}\n                        },\n                        ${publicTags.length ? `\"keywords\": \"${_.join(publicTags, `, `)}\",` : ``}\n                        \"headline\": \"${ghostPost.meta_title || title || ghostPost.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${ghostPost.published_at}\",\n                        \"dateModified\": \"${ghostPost.updated_at}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${ghostPost.meta_description || ghostPost.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://blog.vwa.la/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nArticleMetaGhost.defaultProps = {\n    fetchAuthorData: false,\n}\n\nArticleMetaGhost.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            published_at: PropTypes.string.isRequired,\n            updated_at: PropTypes.string.isRequired,\n            excerpt: PropTypes.string.isRequired,\n            meta_title: PropTypes.string,\n            meta_description: PropTypes.string,\n            primary_author: PropTypes.object.isRequired,\n            feature_image: PropTypes.string,\n            tags: PropTypes.arrayOf(\n                PropTypes.shape({\n                    name: PropTypes.string,\n                    slug: PropTypes.string,\n                    visibility: PropTypes.string,\n                })\n            ),\n            primaryTag: PropTypes.shape({\n                name: PropTypes.string,\n            }),\n            og_title: PropTypes.string,\n            og_description: PropTypes.string,\n            twitter_title: PropTypes.string,\n            twitter_description: PropTypes.string,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    fetchAuthorData: PropTypes.bool,\n    title: PropTypes.string,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default ArticleMetaGhost\n","import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { getMetaImageUrls } from '.';\nimport ImageMeta from './ImageMeta';\n\n\nconst ArticleMetaMD = ({ data, canonical }) => {\n    const post = data.markdownRemark\n    const fm = post.frontmatter\n    const { siteMetadata } = data.site\n\n    // Convert the frontmatter date into ISO String but, and use a fixed\n    // date, if no date is set. The published date should not change once set.\n    const publishedAtISODate = fm.date ? new Date(fm.date).toISOString() : new Date(`2018-10-15`).toISOString()\n    const primaryTag = fm.keywords && fm.keywords.length ? fm.keywords[0] : null\n    const seoImage = getMetaImageUrls()\n\n    return (\n        <>\n            <Helmet>\n                <title>{fm.meta_title || fm.title}</title>\n                <meta name=\"description\" content={fm.meta_description || post.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta name=\"og:type\" content=\"article\" />\n                <meta name=\"og:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"og:description\" content={fm.meta_description || post.excerpt} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={publishedAtISODate} />\n                {fm.keywords && fm.keywords.length ? fm.keywords.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />)) : null}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"twitter:description\" content={fm.meta_description || post.excerpt} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter.label1\" content=\"Reading time\" />\n                <meta name=\"twitter:data1\" content={`${post.timeToRead} min read`} />\n                {primaryTag ? <meta name=\"twitter:label2\" content=\"Filed under\" /> : null}\n                {primaryTag ? <meta name=\"twitter:data2\" content={primaryTag} /> : null}\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"Ghost\",\n                            \"sameAs\": [\n                                \"https://vwa.la/\",\n                                \"https://www.facebook.com/ghost/\",\n                                \"https://twitter.com/tryghost/\"\n                            ]\n                        },\n                        ${fm.keywords && fm.keywords.length ? `\"keywords\": \"${_.join(fm.keywords, `, `)}\",` : ``}\n                        \"headline\": \"${fm.meta_title || fm.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${publishedAtISODate}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${fm.meta_description || post.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//     \"name\": \"Ghost\",\n//     \"logo\": {\n//         \"@type\": \"ImageObject\",\n//         \"url\": \"https://blog.vwa.la/favicon.png\",\n//         \"width\": 60,\n//         \"height\": 60\n//     }\n// },\n\nArticleMetaMD.propTypes = {\n    data: PropTypes.shape({\n        markdownRemark: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n                title: PropTypes.string.isRequired,\n                keywords: PropTypes.arrayOf(\n                    PropTypes.string,\n                ),\n                meta_title: PropTypes.string,\n                meta_description: PropTypes.string,\n                date: PropTypes.string,\n            }).isRequired,\n            excerpt: PropTypes.string.isRequired,\n            timeToRead: PropTypes.number,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n}\n\nexport default ArticleMetaMD\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from \"react-helmet\";\nimport ImageMeta from './ImageMeta';\n\n\nconst WebsiteMeta = ({ data, canonical, title, description, image, type }) => (\n    <>\n        <Helmet>\n            <title>{title}</title>\n            <meta name=\"description\" content={description} />\n            <link rel=\"canonical\" href={canonical} />\n            <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n            <meta property=\"og:type\" content=\"website\" />\n            <meta property=\"og:title\" content={title} />\n            <meta property=\"og:description\" content={description} />\n            <meta property=\"og:url\" content={canonical} />\n            <meta name=\"twitter:title\" content={title} />\n            <meta name=\"twitter:description\" content={description} />\n            <meta name=\"twitter:url\" content={canonical} />\n            <meta name=\"twitter:site\" content=\"@tryghost\" />\n            <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": ${type && type === `series` ? `\"Series\"` : `\"WebSite\"`},\n                        \"url\": \"${canonical}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${image}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${data.site.siteMetadata.siteUrl}\"\n                        },\n                        \"description\": \"${description}\"\n                    }\n                `}</script>\n        </Helmet>\n        <ImageMeta image={image} />\n    </>\n)\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://blog.vwa.la/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nWebsiteMeta.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    type: PropTypes.oneOf([`website`, `series`]).isRequired,\n}\n\nexport default WebsiteMeta\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport url from 'url'\n\nimport ArticleMetaGhost from './ArticleMetaGhost'\nimport ArticleMetaMD from './ArticleMetaMD'\nimport WebsiteMeta from './WebsiteMeta'\n\nconst MetaData = ({\n    data,\n    type,\n    title,\n    description,\n    image,\n    fetchAuthorData,\n    overwriteDefaultImage,\n    location,\n}) => {\n    const { ghostPost, markdownRemark } = data || {}\n    const { siteMetadata } = data.site\n\n    const canonical = url.resolve(siteMetadata.siteUrl, location.pathname, `/`)\n\n    if (type === `article`) {\n        if (ghostPost) {\n            return (\n                <ArticleMetaGhost\n                    data={data}\n                    canonical={canonical}\n                    fetchAuthorData={fetchAuthorData}\n                    title={title}\n                    image={image}\n                    overwriteDefaultImage={overwriteDefaultImage}\n                />\n            )\n        } else if (markdownRemark) {\n            return (\n                <ArticleMetaMD\n                    data={data}\n                    canonical={canonical}\n                />\n            )\n        }\n    } else if (type === `website` || type === `series`) {\n        return (\n            <WebsiteMeta\n                data={data}\n                canonical={canonical}\n                title={title}\n                description={description}\n                image={image}\n                type={type}\n            />\n        )\n    }\n\n    return null\n}\n\nMetaData.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        ghostPost: PropTypes.object,\n        markdownRemark: PropTypes.object,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    type: PropTypes.oneOf([`website`, `series`, `article`]).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n    fetchAuthorData: PropTypes.bool,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default MetaData\n","import PropTypes from 'prop-types';\nimport url from 'url';\n\n// TODO: this should be available as global var without the need to query\n// the siteMetadata.\nconst SITEURL = process.env.SITE_URL || `https://docs.vwa.la`\n\nconst imageUrls = {\n    // faq: url.resolve(SITEURL, `/images/meta/Ghost-FAQ.jpg`),\n    // integrations: url.resolve(SITEURL, `/images/meta/Ghost-Integrations.jpg`),\n    // tutorials: url.resolve(SITEURL, `/images/meta/Ghost-Tutorials.jpg`),\n    default: url.resolve(SITEURL, `/images/meta/hero.png`),\n}\n\nexport const getMetaImageUrls = (section) => {\n    // Set the default image if no section is passed\n    section = section || `default`\n    return imageUrls[section]\n}\n\ngetMetaImageUrls.proptypes = {\n    section: PropTypes.string.isRequired,\n}\n\nexport default getMetaImageUrls\n\n","export { default as MetaData } from './MetaData'\nexport { default as getMetaImageUrls } from './getMetaImageUrls'\n","import PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { tags as tagsHelper } from '@tryghost/helpers'\n\n/* getTagsforPostCollection\n* Takes a Ghost post object and a link prefix and returns the used tags\n* array for a passed post collection. The tags will not contain internal tags,\n* duplicates, and are sorted ascending by name. The tags array can be used to\n* programmatically generate a tags cloud or menu.\n*/\nexport const getTagsforPostCollection = function getTagsforPostCollection(posts, linkPrefix) {\n    let tags = []\n    // remove any added `/`, as we add them later again\n    linkPrefix = /^(?:\\/?)([a-zA-Z\\d-]*)(?:\\/?)/i.exec(linkPrefix)[1]\n\n    _.forEach(posts, ({ node }) => {\n        const publicTags = tagsHelper(node, { visibility: `public`, fn: tag => tag })\n        tags.push(publicTags)\n    })\n\n    tags = _.flattenDeep(tags)\n\n    _.map(tags, (tag) => {\n        tag.link = linkPrefix ? `/${linkPrefix}/${tag.slug}/` : `/${tag.slug}/`\n    })\n\n    return _.sortedUniqBy(_.sortBy(_.flattenDeep(tags), `name`), `name`)\n}\n\ngetTagsforPostCollection.proptypes = {\n    posts: PropTypes.arrayOf(\n        PropTypes.shape({\n            node: PropTypes.shape({\n                tags: PropTypes.arrayOf(\n                    PropTypes.shape({\n                        name: PropTypes.string.isRequired,\n                        slug: PropTypes.string.isRequired,\n                    })\n                ).isRequired,\n            }).isRequired,\n        })).isRequired,\n    linkPrefix: PropTypes.string,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\n\nimport { Spirit } from '../../styles/spirit-styles'\n\nconst FAQLink = ({ post, section, title, children, to, className }) => {\n    const url = post ? `/${section}/${post.slug}/` : to\n    title = post ? post.title : title\n    const excerpt = post ?\n        post.excerpt.length > 200 ? `${post.excerpt.substring(0, 200)}...` : post.excerpt\n        : children\n\n    return (\n        <Link to={url} className={className}>\n            <h4 to={url} className={`${Spirit.excerpt} link darkgrey fw5`}>{title} &raquo;</h4>\n            {excerpt && <p className={`${Spirit.small} ma0 f8 lh-copy middarkgrey mb6`}>{excerpt}</p>}\n        </Link>\n    )\n}\nFAQLink.defaultProps = {\n    className: `f5 db tdn mb6 faq-question bb b--whitegrey`,\n    section: `faq`,\n}\n\nFAQLink.propTypes = {\n    post: PropTypes.shape({\n        title: PropTypes.string,\n        slug: PropTypes.string,\n        excerpt: PropTypes.string,\n    }),\n    section: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    children: PropTypes.node,\n    to: PropTypes.string,\n    className: PropTypes.string,\n}\n\nexport default FAQLink\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, StaticQuery, graphql } from 'gatsby'\n\nimport { Spirit } from '../../styles/spirit-styles'\nimport { getTagsforPostCollection } from '../../utils/getTagsforPostCollection'\n\nconst FAQTagList = ({ data, location }) => {\n    const tags = getTagsforPostCollection(data.allGhostPost.edges, `faq`)\n\n    // Add a default tag for \"All\" at first place, which\n    // links back to the general faq page\n    tags.unshift({\n        name: `All`,\n        slug: `all`,\n        link: `/faq/`,\n    })\n\n    return (\n            <>\n                <h4 className={`${Spirit.h5} midgrey` }>FAQ topics</h4>\n                <div className=\"mt4\">\n                    {tags.map((tag, i) => {\n                        const dynamicClass = location.pathname === tag.link ? `bg-faq-color white fw5` : `bg-whitegrey middarkgrey hover-bg-lightgrey-l2`\n\n                        return (\n                            <Link\n                                to={tag.link}\n                                className={`${dynamicClass} dib pa2 pl3 pr3 br3 mb3 mr3 f8 link`}\n                                key={i}\n                                data-cy={`${tag.slug}-filter`}\n                            >\n                                {tag.name}\n                            </Link>\n                        )\n                    })}\n                </div>\n            </>\n    )\n}\n\nFAQTagList.propTypes = {\n    location: PropTypes.object.isRequired,\n    data: PropTypes.shape({\n        allGhostPost: PropTypes.shape({\n            edges: PropTypes.arrayOf(\n                PropTypes.shape({\n                    post: PropTypes.shape({\n                        tag: PropTypes.arrayOf(\n                            PropTypes.shape({\n                                name: PropTypes.string,\n                                slug: PropTypes.string,\n                            })\n                        ),\n                    }),\n                }).isRequired,\n            ).isRequired,\n        }).isRequired,\n    }).isRequired,\n}\n\nconst FAQTagsQuery = props => (\n    <StaticQuery\n        query={graphql`\n            query GhostFAQTagsQuery {\n                allGhostPost(\n                    sort: { order: ASC, fields: [published_at] },\n                    limit: 100,\n                    filter: {tags: {elemMatch: {slug: {eq: \"hash-faq\"}}}}\n                ) {\n                edges {\n                    node {\n                    ...GhostTagListFields\n                    }\n                }\n                }\n            }\n        `}\n        render={data => <FAQTagList data={data} {...props} />}\n    />\n)\nexport default FAQTagsQuery\n","export { default as FAQLink } from './FAQLink'\nexport { default as FAQTagList } from './FAQTagList'\n"],"sourceRoot":""}