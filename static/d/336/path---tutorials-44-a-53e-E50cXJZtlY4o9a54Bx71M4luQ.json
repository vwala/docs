{"data":{"site":{"siteMetadata":{"siteUrl":"https://docs.vwa.la","title":"vwa.la help","description":"Everything you need to know about the vwa.la influencer marketing platform."}},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5bf7bbe19b2bb500c059a78c","slug":"custom-rss-feed","title":"How to make an iTunes Podcast RSS feed with Ghost","excerpt":"Ghost comes with automatic RSS feeds for your content, but you can also create a custom feed using the flexible dynamic routing layer to support specific content types, like videos and podcasts.","feature_image":null,"plaintext":"Ghost comes with automatic RSS feeds for your content, but you can also create a\ncustom feed using the flexible dynamic routing layer to support specific content\ntypes, like videos and podcasts.\n\nAdding /rss/  to most URLs in Ghost produces an automatically generated RSS feed\nfor your content. If you're publishing a podcast on your Ghost site then you'll\nprobably want to create a custom RSS feed to distribute your podcast episodes to\nplaces like iTunes. \n\nThis tutorial walks you through how to create a custom RSS route using dynamic\nrouting, as well as a Handlebars template for your RSS feed that is fully\noptimised for a podcast and iTunes. \n\nAdd a new route for your RSS feed\nThe first thing to do is add a new route where your RSS feed will exist in the\nusing the dynamic routing layer in Ghost. Download the most up to date version\nof your routes.yaml  file from Ghost Admin settings menu and open it in your\ncode editor of choice. \n\nFor the purposes of this example, we're adding this to our podcast collection -\nhere's what it looks like: \n\nroutes:\n  /podcast/rss/:\n    template: podcast/rss\n    content_type: text/xml\n\n\nNote that this assumes we already have a collection in place for the podcast\ncontent, which would appear under collections in the routes.yaml  file like so: \n\ncollections:\n  /blog/:\n    permalink: /blog/{slug}/\n    filter: tag:blog+tag:-podcast\n  /podcast/:\n    permalink: /podcast/{slug}/\n    filter: tag:podcast+tag:-blog\n\n\nIf you haven't yet setup your podcast content in Ghost, then you can use this\ntutorial on content collections\n[https://docs.ghost.org/tutorials/creating-content-collections/]  as a guide.\n\nCreate a new template for an iTunes RSS feed\nNow you've updated the routes.yaml, you'll need to create a new Handlebars\ntemplate in your theme. This requires a little bit of coding, but you can use\nthe example provided in this tutorial as a starting point.\n\n\n--------------------------------------------------------------------------------\n\nDefine your podcast channel for iTunes\nIn order for iTunes to understand your RSS feed, there a few basic requirements\nthat you need to include at the start of your new template, which defines the\ntype of RSS feed and some basic information about your podcast. Below is an\nexample of the required information for an iTunes podcast, which you can copy\ninto your own template and replace with necessary information: \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\" xmlns:wfw=\"http://wellformedweb.org/CommentAPI/\"\n    xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:atom=\"http://www.w3.org/2005/Atom\" xmlns:sy=\"http://purl.org/rss/1.0/modules/syndication/\"\n    xmlns:slash=\"http://purl.org/rss/1.0/modules/slash/\" xmlns:itunes=\"http://www.itunes.com/dtds/podcast-1.0.dtd\"\n    xmlns:rawvoice=\"http://www.rawvoice.com/rawvoiceRssModule/\" xmlns:googleplay=\"http://www.google.com/schemas/play-podcasts/1.0\">\n\n<channel>\n<title>{{@blog.title}}</title>\n<link>{{@blog.url}}</link>\n<description>{{@blog.description}}</description>\n<language>{{lang}}</language>\n<copyright>{{@blog.title}} Copyright {{date format=\"YYYY\"}}</copyright>\n<atom:link href=\"{{@blog.url}}/podcast/rss/\" rel=\"self\" type=\"application/rss+xml\" />\n<lastBuildDate>{{date format=\"ddd, DD MMM YYYY HH:mm:ss ZZ\"}}</lastBuildDate>\n<itunes:author>{{@blog.title}}</itunes:author>\n<itunes:summary>{{@blog.description}}</itunes:summary>\n<itunes:owner>\n    <itunes:name>Your Name</itunes:name>\n    <itunes:email>youremail@example.com</itunes:email>\n</itunes:owner>\n<itunes:explicit>clean</itunes:explicit>\n<itunes:image href=\"{{img_url @blog.icon absolute=\"true\"}}\"/>\n<itunes:category text=\"Technology\"></itunes:category>\n\n{{#get \"posts\" filter=\"tag:podcast\" include=\"tags,authors\" as |episode|}}\n    {{#foreach episode}}\n    <item>\n        <title>{{title}}</title>\n        <link>{{url absolute=\"true\"}}</link>\n        <pubDate>{{date format=\"ddd, DD MMM YYYY HH:mm:ss ZZ\"}}</pubDate>\n        <guid isPermaLink=\"false\">{{id}}</guid>\n        <category><![CDATA[ {{primary_tag}} ]]></category>\n        <description>{{custom_excerpt}}</description>\n        <content:encoded><![CDATA[ {{content}} ]]></content:encoded>\n        <enclosure url=\"{{og_description}}\" length=\"0\" type=\"audio/mpeg\"/>\n        <itunes:subtitle>{{custom_excerpt}}</itunes:subtitle>\n        <itunes:summary><![CDATA[ {{content}} ]]></itunes:summary>\n    </item>\n    {{/foreach}}\n{{/get}}\n\n</channel>\n</rss>\n\n\nYou can copy and paste this exact implementation for your site, then go ahead\nand customise it to suit your needs! There are a couple of static variables\nwhich need to be adjusted, like your name, email, and the iTunes category you\nwant to appear in.\n\nThere's also one very small hack/workaround that makes all of this work: The\nfeed requires that you specify the podcast mp3/audio file URL for each episode.\nBecause Ghost doesn't have custom fields, we can repurpose the Facebook\nDescription  field for each post to store the link to the audio file. \n\nSo wherever you upload your audio to, just paste the provided URL into the\nFacebook Description and you should be all set. \n\nUpdate routes.yaml  and your active theme\nOnce you're happy with your work, upload a new version of routes.yaml  and\nupdate your active theme in Ghost Admin to enable your new RSS feed. Once you\nhave done this, you should be able to visit the feed at /podcast/rss/  to ensure\nit's working as desired and submit it to iTunes.\n\nSummary\nSuccess! You should have implemented your very own custom iTunes RSS feed for\npodcast content on your Ghost site using dynamic routing and a Handlebars\ntemplate. Don't forget you can get more in-depth information about the\nHandlebars theme layer in Ghost in the docs\n[https://docs.ghost.org/api/handlebars-themes/].","featured":false,"created_at_pretty":"23 November, 2018","published_at_pretty":"06 December, 2018","updated_at_pretty":"28 March, 2019","created_at":"2018-11-23T08:35:45.000+00:00","published_at":"2018-12-06T10:13:53.000+00:00","updated_at":"2019-03-28T08:20:52.000+00:00","tags":[{"name":"Dynamic Routing","slug":"dynamic-routing","visibility":"public"},{"name":"Themes","slug":"themes","visibility":"public"},{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}},{"node":{"id":"Ghost__Post__5bed2c8751461600ccb3a341","slug":"google-custom-search","title":"Add Google Custom Search to Ghost","excerpt":"Discover how to add a search functionality to your Ghost publication with the free Google Custom Search tool!","feature_image":null,"plaintext":"Add search functionality to your Ghost publication and allow your readers to\nfind exactly what they are looking for\n\nOverview\nAdding search to your Ghost publication gives your readers an additional way to\nnavigate your content and improves engagement. It's possible to add a sensible\nsearch function using the free Google Custom Search\n[https://cse.google.com/cse/]  tool.\n\nThis is possible using the Handlebars theme layer - by using the code provided\nby Google Custom Search in your theme files. This tutorial will show you how to\nimplement site search on your Ghost publication.\n\nIf you're looking for a free tool to add site search then this is an ideal\nsolution. However it's important to note that it does come with some limitations\nwith search functionality, custom styles and ads.Create a new search engine in\nthe Google Custom Search tool\nLogin to the Google Custom Search tool using Google credentials and create a new\nsearch engine. Enter the domain for your Ghost site: \n\nCopy the code provided\nOnce you've entered your domain and any other custom settings required (useful\nif you want to only search certain parts of your site, or exclude pages), grab\nthe code for your new search function: \n\nAdd the code to your theme files\nThis code can be pasted any where in Ghost depending on how you'd like to render\nyour search box - this could be in your posts, on specific pages or across your\nwhole site. \n\nOpen your theme files in your code editor of choice and find the best spot for\nyour search bar. Â For the purposes of this example, we're going to put the code\ninto the index.hbs, directly below the header and above the main content area: \n\nIt's a good idea to make one small modification to the code provided by the\nGoogle Custom Search tool, which is to add a <div>  around \n<gcse:search></gcse:search>  so that you can add some custom CSS later if\nrequired. \n\nCustomise your search bar\nThe Google Custom Search tool gives you plenty of customisation options within\nthe dashboard once you have created your search engine. It's advisable to spend\nsome time navigating around all of the options available to you so that you\nunderstand the full capabilities and limitations of using this tool to implement\nsearch on your Ghost publication. \n\nYou can style the way the search bar and the results looks, and add or remove\nthe Google branding. There are also several options to customise the behaviour\nof your search functionality. The tool gives a preview so that you can see the\nresults as you make adjustments and you can come back to this any time and\nupdate it.\n\nUpdate your active theme\nBy now you should have added the code snippet to your theme files and started\ncustomising the behaviour and style of your search engine. Now it's time to give\nthis thing a test run. \n\nSave your updated theme files and upload the .zip  file in the design menu in\nGhost Admin. You should now be able to see the search bar on your site! \n\nHere's an example of what an implementation of Google Custom Search looks like\non Coding Horror [https://blog.codinghorror.com/]: \n\nFurther customisation\nSince we're inserting Google's tool via a script, there are two ways that you\ncan adjust the way it appears on your site. First of all you can go back into\nthe customisation menu on the Google Custom Search dashboard and try different\nthemes or tweak the settings. Hit refresh and you'll be able to see these\nupdates in real time on your site.\n\nSecondly, you can style the search bar yourself with HTML and CSS. Since we\nadded a <div>  to the code earlier, you can add some custom CSS to the \nscreen.css  file in your theme. For example: \n\n.gse-searchbox {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 0 auto;\n    max-width: 400px;\n}\n\nThe rest is up to you! Always remember to update the active theme in Ghost Admin\neach time you are ready to ship changes to your CSS files ð§\n\nSummary\nYou've completed the tutorial and hopefully deployed a search box on your Ghost\npublication, powered by Google's custom search tool. Your search bar can be\nadded to any post or page on your site repeating the same process and adding the\ncode into the relevant Handlebars template files. Don't forget you can use the \nHandlebars documentation [https://docs.ghost.org/api/handlebars-themes/] \nanytime to learn more about themes!","featured":false,"created_at_pretty":"15 November, 2018","published_at_pretty":"15 November, 2018","updated_at_pretty":"15 November, 2018","created_at":"2018-11-15T08:21:27.000+00:00","published_at":"2018-11-15T12:04:42.000+00:00","updated_at":"2018-11-15T12:04:42.000+00:00","tags":[{"name":"Themes","slug":"themes","visibility":"public"},{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}},{"node":{"id":"Ghost__Post__5be28f8b23e4db00bfbf3f9f","slug":"related-posts-block","title":"How to build a related posts block","excerpt":"Learn how to build and deploy a related posts block using partials to keep readers engaged with your content!","feature_image":null,"plaintext":"Improve your reader engagement with a related posts block for your site using\nthe flexible theme layer in Ghost.\n\nOverview\nAdding a related posts block on each post on your site is a great way to ensure\nyour readers have a positive experience and encourages them to move around your\nsite content once they land on a post.\n\nThis is possible using the Handlebars theme layer by creating a partial template\nand utilising the {{#get}}  helper\n[https://docs.ghost.org/api/handlebars-themes/helpers/get/]. This tutorial will\nwalk you through building your own related posts block ready for deployment on\nyour Ghost publication â¨\n\nAdd a partial reference to default.hbs\nThe first steps involve creating a new partial template. The /partials \ndirectory in a Ghost theme is optional, but it's a useful tool to create blocks\nof HTML that will be used between multiple templates in your theme. This reduces\ncode duplication and makes the building blocks of your theme easier to work\nwith. \n\nFirst of all, create a reference to your new partial in the relevant template(s)\nwhere you would like the block to appear, for example:\n\n...\n{{ghost_head}}\n</head>\n<body class=\"{{body_class}}\">\n  <section class=\"blog-content\">\n    {{{body}}}\n  </section>\n\n  {{> sidebar}}\n  \n  {{ghost_foot}}\n</body>\n\n\nFor the purposes of this tutorial, we're calling our partial \"sidebar\"  and\nreferencing it with {{> sidebar}}  in the defaut.hbs template. You can call your\npartial anything you like so long as it makes sense to you. In this example, you\ncan imagine that the related posts block is intended to appear in the sidebar of\nthe theme ð\n\nThis reference will usually be placed in the default.hbs, post.hbs  or page.hbs.\nThe great thing about working with partials is that they're reusable, so if you\nneed to use this content block on various templates or parts of your site, then\nyou can!\n\nCreate a partial template and add some HTML\nNext we need to create a partial template in partials/  and add some HTML to\ncreate the skeleton of our related posts block. Here's an example which exists\nin partials/sidebar.hbs:\n\n<aside class=\"blog-sidebar\">\n  <section class=\"recent-posts\">\n    <h3>Recent posts</h3>\n    <ol>\n      <li><a href=\"\"></a></li>\n    </ol>\n  </section>\n  \n  <section class=\"featured-posts\">\n    <h3>Featured posts</h3>\n    <ol>\n      <li><a href=\"\"></a></li>\n    </ol>\n  </section>\n</aside>\n\n\nFetch data to be rendered in your related posts block\nIn a Ghost theme each page belongs to a context\n[https://docs.ghost.org/api/handlebars-themes/context/], and each context\nprovides some essential data by default. When you need extra dynamic data other\nthan what the context provides, you can fetch it using the {{#get}}  helper.\nThis helper makes a custom query to the Ghost API to fetch publicly available\ndata - which is why it's so useful when used as a block helper. \n\nIt's possible to fetch a variety of data for your related posts block depending\non your requirements. Here's the most popular configurations: \n\n * Related posts by topic\n * Recently published posts\n * Featured posts\n\nAll of these configurations for a related posts block can be achieved using the \n{{#get}}  helper and are documented below:\n\nRelated posts\nThe most effective way to show posts that are related by topic in your related\nposts block is to filter by tag. For example:\n\n{{#get \"posts\" limit=\"5\" filter=\"tags:[{{post.tags}}]+id:-{{post.id}}\" include=\"tags\" as |related|}}\n{{/get}}\n\n\nThis provides up to 5 related posts that match the tags of the post the reader\nis currently on, and excludes the current post from appearing in the featured\nblock. Since these are related posts, block parameter syntax is used to name the\ndata with as |related|.\n\nRecently published posts\nThe call to the get helper to feature your most recently published posts looks\nlike this: {{#get \"posts\" limit=\"3\"}}. It's also useful to exclude the current\npost with a filter here too, and add the block parameter syntax for naming: \n\n{{#get \"posts\" limit=\"3\" filter=\"id:-{{post.id}}\" as |recents|}}\n\n\nFeatured posts\nIf you want to call posts that have been checked as featured from the Ghost\neditor in your block, use a filter parameter:\n\n{{#get \"posts\" filter=\"featured:true+id:-{{post.id}}\" limit=\"3\" as |featured|}}\n\n\nTip ð¡ the resource must always come first, and the block parameter to name the\ndata must be last â but parameters like limit  and filter  can be added in any\norder.Use the {{foreach}}  helper\nNow that you understand how to fetch the relevant data using one of the methods\nabove in your partial template, the final step is to use the {{foreach}}  helper\n[https://docs.ghost.org/api/handlebars-themes/helpers/foreach/]  to iterate the\nposts in your related posts block. For example, plugging this into the \npartials/sidebar.hbs  for featured posts will look like this: \n\n{{#get \"posts\" filter=\"featured:true\" limit=\"3\" as |featured|}}\n<section class=\"featured-posts\">\n  <h3>Featured posts</h3>\n  <ol>\n    {{#foreach featured}}\n    <li><a href=\"{{url}}\">{{title}}</a></li>\n    {{/foreach}}\n  </ol>\n</section>\n{{/get}}\n\n\nUsing {{else}}  as a fallback\nIn the event that no posts match the filter, utilise the {{else}}  helper  to\nrender alternative content and ensure that your readers aren't staring at an\nempty space. For example: \n\n{{#get \"posts\" filter=\"featured:true\" limit=\"3\" as |featured|}}\n<section class=\"featured-posts\">\n  <h3>Featured posts</h3>\n  <ol>\n    {{#foreach featured}}\n    <li><a href=\"{{url}}\">{{title}}</a></li>\n    {{/foreach}}\n  </ol>\n</section>\n{{else}}\n<p>Content for a fallback when no related posts are available.</p>\n{{/get}}\n\n\nThis is just an example. You could feature pretty much anything here as a\nfallback... link to a static page on your site, add some text that describes\nwhat your publication is all about or insert your favourite meme - you do you!\n\nImplement your new templates\nOnce you've finished creating your partial template and made any necessary\nadjustments to your CSS files, update your site's active theme to get it up and\nrunning. The easiest way to implement a new theme is to upload the .zip  file in\nGhost Admin under the Design Settings menu. \n\nSummary\nYou've completed the tutorial and hopefully deployed a neat featured image block\non your Ghost publication. Your new content block is a partial Handlebars\ntemplate which can be used across any template in your theme when required. \n\nDon't forget you can use the Handlebars documentation\n[https://docs.ghost.org/api/handlebars-themes/]  anytime to learn more about\nthemes and access a full reference list of available helpers.","featured":false,"created_at_pretty":"07 November, 2018","published_at_pretty":"08 November, 2018","updated_at_pretty":"08 November, 2018","created_at":"2018-11-07T07:08:59.000+00:00","published_at":"2018-11-08T10:34:49.000+00:00","updated_at":"2018-11-08T10:52:14.000+00:00","tags":[{"name":"Themes","slug":"themes","visibility":"public"},{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}},{"node":{"id":"Ghost__Post__5bd7009d4b8b9800bf8d3a2a","slug":"custom-amp-themes","title":"A complete guide to â¡ AMP templates in Ghost","excerpt":"Ghost ships with a clean, simple AMP template which works with just about any site, but wouldn't it be nice if you could customise it to make it perfectly match your theme and your brand?","feature_image":null,"plaintext":"Ghost ships with a clean, simple AMP template which works with just about any\nsite, but wouldn't it be nice if you could customise it to make it perfectly\nmatch your theme and your brand? Well you can! Read on:\n\nHow does AMP work in Ghost?\nGhost comes with AMP built-in, and it can be enabled or disabled (for those who\nprefer not to use it). When enabled, Ghost uses a single Handlebars template\nfile to render your AMP content. As soon as you add /amp  to the url of any post\nURL (e. g. https://www.myblog.com/welcome-to-ghost/amp), you'll see this\ntemplate file being rendered. \n\nAll blog posts also get a new canonical link, which refers to the AMP version of\nthe post: <link rel=\"amphtml\"\nhref=\"https://www.myblog.com/welcome-to-ghost/amp/\" />. This is a necessary\nlink. Without it, your AMP post will not be served from the Google AMP Cache.\n\nThe amp.hbs  template exists in the active theme directory. By default, Ghost\ncomes with an amp.hbs  template that is suitable for most publications. It can\nbe used out of the box without any extra effort or code, but it can  also be\ncustomised for additional features or styling. The structure of the file looks\nlike this:\n\nâââ /assets\n|   âââ /css\n|       âââ screen.css\n|   âââ /fonts\n|   âââ /images\n|   âââ /js\nâââ default.hbs \nâââ index.hbs [required]\nâââ post.hbs [required]\nâââ amp.hbs [optional]\nâââ package.json [required]\n\n\nBe aware of the AMP restrictions\nBefore you start developing your AMP template, it's useful to know a few things\nabout the restrictions which Google has enforced in AMP to maintain optimal\nperformance:\n\nâ¡ No client side scripts\nAMP pages can't include any client side scripts, except under special\ncircumstances. Any use of jQuery  or JavaScript  will lead to an invalid AMP\ntemplate!\n\nâ¡ Keep CSS inside <style amp-custom>\nCSS can only live in the <style amp-custom></style>  tag inside the <head> \nsection. You can use class  and id  in your HTML, but you can't use inline CSS.\nThe CSS is also size limited to 50 kilobytes. Additionally, some CSS styles are \ndisallowed  for performance.\n\nâ¡ Prohibited HTML\nAMP uses its own AMP-HTML markup language. This means that some HTML tags are\nprohibited while others need to be transformed. Ghost automatically transforms\nHTML in your {{content}}  (e. g. <img>  becomes <amp-img>) and strips out\ndisallowed tags, like embed  or frame. You can find a full list of banned HTML\ntags here.\n\nâ¡ Required AMP markup\nAMP has a few pieces of required markup  which must be used.\n\nâ¡ Links to media need https\nIf you want to load stuff externally, you'll need to use https  protocol. Ghost\ndoes this automatically for any links in your post {{content}}.\n\nâ¡ Media needs width  & height\nAll kind of media need width  and height  attributes. Again, anything being\nrendered within post {{content}}  will be handled automatically. Here's an\nexample of how you'd implement an image outside of the main content:\n\n{{#post}}\n  <amp-img src={{image absolute=\"true\"}} width=\"600\" height=\"400\" layout=\"responsive\"></amp-img>\n{{/post}}\n\n\nor the author image:\n\n{{#post}}\n\t{{#author}}\n  \t<amp-img src={{image absolute=\"true\"}} width=\"50\" height=\"50\"></amp-img>\n\t{{/author\"}}\n{{/post}}\n\n\nâ¡ Validate your template on-the-fly\nAMP provides two ways to validate your template: \n\n * The first is to add #development=1  to the URL and check for any validation\n   errors in the console. \n * The second is to copy your HTML into the online validator\n   [https://validator.ampproject.org/], but keep in mind that this will not work\n   with Ghost handlebars helpers.\n\nBuilding a custom AMP templates\nThe Google-led AMP project often add support for new features and customisation\nof your AMP content. For example, you can do cool things like edit the styling\nof your AMP content or generate revenue with advertising.\n\nThe best way to implement these features is to follow the AMP documentation\n[https://www.ampproject.org/docs/]  for the features you are interested in\nadding, and edit the amp.hbs  template in Ghost. Note that using AMP features\nthat require content from Ghost will not work. \n\nThe rest of this tutorial will walk you through the default amp.hbs  template\n[https://github.com/TryGhost/Ghost/blob/master/core/server/apps/amp/lib/views/amp.hbs] \n in Ghost and walk you through what each section contains and how it works. The\neasiest way to get started with developing your own is to use this default\ntemplate and make changes to it. Let's get to it...\n\nAMP template <head>\n<!DOCTYPE html>\n<html â¡>\n<head>\n    <meta charset=\"utf-8\">\n    <title>{{meta_title}}</title>\n    <meta name=\"description\" content=\"{{meta_description}}\" />\n    <meta name=\"HandheldFriendly\" content=\"True\" /> //required\n    <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\"> //required\n    <link rel=\"shortcut icon\" href=\"{{asset \"favicon.ico\"}}\">\n    \n    {{amp_ghost_head}}\n    \n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://fonts.googleapis.com/css?family=Merriweather:300,700,700italic,300italic|Open+Sans:700,600,400\" />\n    <style amp-custom>\n       ...\n    </style>\n    \n    <style amp-boilerplate>...</style><noscript><style amp-boilerplate>...</style></noscript>\n\n    <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n\n    {{amp_components}}\n</head>\n\n\nIf you're a theme developer, this is probably all very familiar. Here are the\nhighlights:\n\n<html â¡>\nThis makes it AMP! You can also use <html amp>, but â¡ is more awesome.\n\nRequired by AMP:\n * <meta charset=\"utf-8\">\n * <meta name=\"HandheldFriendly\" content=\"True\" />\n * <meta name=\"viewport\"\n   content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n\n{{amp_ghost_head}}\nThis helper will output the mandatory structured data and the JSON+LD  data,\njust like {{ghost_head}}  does. It also renders the necessary link to the\nregular post, which is (wait for it) required by AMP. ðð»\n\nCode injection content won't be rendered here, as this may contain additional\n<style>  and <script>  tags.\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://fonts.googleapis.com...\" />\nAMP does  allow the use of custom font faces.\n\n<style amp-custom>\nAll your CSS goes here. The default AMP template comes with a similar structure\nto the Casper theme. You can work with CSS classes just as you're used to. Just\nkeep in mind that there are some CSS restrictions, as mentioned above.\n\n<style amp-boilerplate>\nThis is required by AMP, and essentially outputs a few default AMP UI styles for\nanimations/etc which are mandatory. You can find the current version here\n[https://github.com/ampproject/amphtml/blob/master/spec/amp-boilerplate.md].\n\n<script async src=\"https://cdn.ampproject.org/v0.js\"></script>\nThis will load the AMP JavaScript library and is required by AMP.\n\n{{amp_components}}\nThis is a special helper which scans your {{content}}  for any extended\ncomponents [https://www.ampproject.org/docs/reference/extended.html], such as \n.gif  files, iframe-tags and audio  tags. If it finds them, it'll include\nscripts to make them work good. Yes, work good. That's what we're going with.\n\nAMP template <body>\nNow it's time to build the structure for the content:\n\n<body class=\"amp-template\">\n    {{#post}}\n    <header class=\"main-header\">\n        <nav class=\"blog-title\">\n            <a href=\"{{@blog.url}}\">{{@blog.title}}</a>\n        </nav>\n    </header>\n    <main class=\"content\" role=\"main\">\n        <article class=\"post\">\n            <header class=\"post-header\">\n                <h1 class=\"post-title\">{{title}}</h1>\n                <section class=\"post-meta\">\n                    {{#author}}\n                    <p class=\"author\">by <a href=\"{{url}}\">{{name}}</a></p>\n                    {{/author}}\n                    <time class=\"post-date\" datetime=\"{{date format=\"YYYY-MM-DD\"}}\">{{date format=\"YYYY-MM-DD\"}}</time>\n                </section>\n            </header>\n            {{#if image}}\n            <figure class=\"post-image\">\n                <amp-img src=\"{{image absolute=\"true\"}}\" width=\"600\" height=\"400\" layout=\"responsive\"></amp-img>\n            </figure>\n            {{/if}}\n            <section class=\"post-content\">\n                {{amp_content}}\n            </section>\n       </article>\n    </main>\n    {{/post}}\n    <footer class=\"site-footer clearfix\">\n        <section class=\"copyright\"><a href=\"{{@blog.url}}\">{{@blog.title}}</a> &copy; {{date format=\"YYYY\"}}</section>\n        <section class=\"poweredby\">Proudly published with <a href=\"https://ghost.org\">Ghost</a></section>\n    </footer>\n</body>\n\n\nThis is where you can go wild! Here's a quick explanation of the most important\nstuff in here:\n\n{{image}} and <amp-img>\nThe default template uses the {{#if}}  helper to check for a post image. But\nyou'll notice that it needs to be wrapped in <amp-img>  and also provide the\nmandatory width  and height  attributes.\n\n{{amp_content}}\nA special version of the regular {{content}}  helper which transforms HTML tags\ninto AMP HTML where appropriate.\n\nRemember to validate your template\nDon't forget to open any blog post on your site and add /amp/#development=1  to\nthe URL. This will not only render your AMP template, but also open the AMP\nvalidator.\n\nSummary\nYou now have a strong understanding of how AMP content works in Ghost and a\ndetailed overview of the default amp.hbs  template and how you can adjust it to\nsuit your needs. If you run into any difficulties with AMP, try their developer\nsupport [https://www.ampproject.org/support/developer/get_support]  options.","featured":false,"created_at_pretty":"29 October, 2018","published_at_pretty":"30 October, 2018","updated_at_pretty":"30 October, 2018","created_at":"2018-10-29T12:44:13.000+00:00","published_at":"2018-10-30T10:19:10.000+00:00","updated_at":"2018-10-30T11:55:05.000+00:00","tags":[{"name":"Themes","slug":"themes","visibility":"public"},{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"}],"authors":[{"name":"Kym Ellis","slug":"kym"},{"name":"Aileen Nowak","slug":"aileen"}]}},{"node":{"id":"Ghost__Post__5bc09b4694250c00bf9d3b0f","slug":"chronological-posts","title":"Chronological posts","excerpt":"Learn how to implement chronological content collections on your publication.","feature_image":null,"plaintext":"Posts on any index page in Ghost will be displayed in reverse chronological\norder by default, but it's possible to display posts in chronological order\nusing the data property in the routes.yaml  file. \n\nIf you have created content collections using the dynamic routing configuration\nlayer in Ghost, and would like to display your content chronologically, this can\nbe implemented using one extra line of code. \n\nCreate content collections\nIf you haven't already created a content collection, follow this tutorial first\n[https://docs.ghost.org/tutorials/creating-content-collections/]. Once you have\na functional content collection rendering a distinct section on your site with\nit's own URL structure, you will be able to transform it from reverse\nchronological to chronological using this tutorial. \n\nDownload the routes.yaml  file\nEnsure you are working with the most recent version of your routes.yaml  file by\ndownloading it from the settings in Ghost admin and opening it with any code\neditor. \n\nUse the order property in collections\nUsing the example below, let's assume that the /blog/  collection should remain\nreverse chronological, and the /podcast/  collection should be chronological:\n\ncollections:\n  /blog/:\n    permalink: /blog/{slug}/\n    filter: primary_tag:blog\n  /podcast/:\n    permalink: /podcast/{slug}/\n    filter: primary_tag:podcast\n\n\nUse the order  property with it's two parameters asc  or desc  to determine\nascending or descending order. For example:\n\ncollections:\n  /blog/:\n    permalink: /blog/{slug}/\n    filter: primary_tag:blog\n    order: desc\n  /podcast/:\n    permalink: /podcast/{slug}/\n    filter: primary_tag:podcast\n    order: asc\n\n\nImplement your collections and templates\nOnce you have set the order for your posts to be rendered for your collections,\nupload the new version of your routes.yaml  file back into the settings in Ghost\nadmin. If you've made any changes to templates or CSS, ensure you also upload\nthe latest version of your theme as a .zip. \n\nWhen this is done, check your publication to ensure the index page of the\ncollection you wanted to render in chronological order is working as expected. \n\nSummary\nIn this tutorial you have successfully rendered chronological content in one or\nmore collections on your site. It's possible to do this with any distinct\nsections of content on a Ghost publication as required.","featured":false,"created_at_pretty":"12 October, 2018","published_at_pretty":"12 October, 2018","updated_at_pretty":"06 February, 2019","created_at":"2018-10-12T13:01:58.000+00:00","published_at":"2018-10-12T13:45:13.000+00:00","updated_at":"2019-02-06T11:23:39.000+00:00","tags":[{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"},{"name":"Dynamic Routing","slug":"dynamic-routing","visibility":"public"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}},{"node":{"id":"Ghost__Post__5bad0adbf193d500bfd5b41d","slug":"change-url-for-tags-authors","title":"Change the URL for tags and authors","excerpt":"Adjust the URL structure of your tag and author taxonomies using dynamic routing and custom templates.\n","feature_image":"https://docs.ghost.io/content/images/2018/10/dynamic-routing-2.svg","plaintext":"A taxonomy is used to group things together based on a common relation. In\nGhost, a taxonomy is used to group posts together by the author  of the post, or\nthe tags  used for a post and you can adjust the URL structure of your taxonomy\nwith a few lines of code â¡\n\nOverviewï¸\nBy default, Ghost will create permalinks for each taxonomy value, so there is be\na unique URL for each author and for each tag, featuring all of the content that\nmatches the slug. \n\nTaxonomies are also mapped to generic handlebars templates by default, but you\ncan create custom ones if required. \n\nThis tutorial shows you how to customise your taxonomy structure and templates.\n\nIf you want to merge content that matches more than one tag or author, or divide\ncontent into subsets and supersets, check out how to create a content hub using \nchannels [/tutorials/building-a-content-hub/]. Define your taxonomies in the routes.yaml  file\nDownload your routes.yaml  file from the settings in Ghost admin or locate the\nfile on your server and open it in any code editor.\n\nThis file is split into three sections, and for this tutorial you'll be using\nthe \"taxonomies\" section - read more about dynamic routing\n[https://docs.ghost.org/concepts/routing/].\n\nThe default taxonomy configuration routes.yaml  file looks like this: \n\ntaxonomies: \n  tag: /tag/{slug}\n  author: /author/{slug}\n\n\nThis standard configuration must be present in the taxonomy configuration in\norder for these pages to work, and will return 404 errors when removed. \n\nThe taxonomies can be adjusted to suit your publication's needs by changing the\npermalink structure. In the following example, the publication is a podcast\nfocussed website: \n\ntaxonomies:\n  tag: /topic/{slug}\n  author: /host/{slug}\n\n\n\n\nCreate custom templates in your theme\nDepending on which theme you are using, your taxonomies will use the available\nstandard template to render each taxonomy permalink. This is usually index.hbs \nor default.hbs. \n\nFollowing the previous example, it may be more fitting to create entirely\ncustomised handlebars templates determine what data to fetch and how to render\neach taxonomy in a unique way. \n\nIn this case, create new theme templates using the file name: tag-technology.hbs \n or author-lewis-carroll.hbs. The URL is rendered like so: \n\n * https://yoursite.com/topic/technology/ renders tag-technology.hbs\n * https://example.com/host/lewis-carroll/ renders author-lewis-carroll.hbs\n\nThis gives you the flexibility to completely customise the index page for any\nparticular tag or author within your publication.\n\nFor more information about handlebars themes and creating a custom template,\ncheck out the theme documentation\n[https://docs.ghost.org/api/handlebars-themes/]  to find out more!\n\nImplement your taxonomies and templates\nOnce you've finished working on the routes.yaml  file, your handlebars templates\nand any necessary adjustments to your CSS files, upload your work in Ghost admin\nfor it to take effect.\n\n 1. Upload your edited routes.yaml  file containing new taxonomy configuration\n 2. Upload your new theme files including CSS in a .zip  \n 3. Visit one of your new taxonomy URLs and check they render correctly\n\nSummary\nYou've successfully updated your taxonomies and permalinks for tags and authors\non your Ghost publication. Don't forget that custom templates and CSS can be\nused to render unique content for any particular tag or author that you use now\nand in the future!","featured":false,"created_at_pretty":"27 September, 2018","published_at_pretty":"12 October, 2018","updated_at_pretty":"23 October, 2018","created_at":"2018-09-27T16:52:43.000+00:00","published_at":"2018-10-12T12:30:33.000+00:00","updated_at":"2018-10-23T08:16:01.000+00:00","tags":[{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"},{"name":"Dynamic Routing","slug":"dynamic-routing","visibility":"public"}],"authors":[{"name":"Sarah Frantz","slug":"sarah"}]}},{"node":{"id":"Ghost__Post__5bc04cc994250c00bf9d398c","slug":"building-a-content-hub","title":"Creating content hubs","excerpt":"The dynamic routing configuration layer in Ghost unlocks the ability to create paginated content hubs called channels.","feature_image":null,"plaintext":"The dynamic routing configuration layer in Ghost unlocks the ability to create\npaginated content hubs called channels. These can be implemented without\nchanging the individual URL of the posts, and provide an efficient way to divide\nor combine existing tagged content on your Ghost publication with a few lines of\ncode.\n\nOverview\nContent views are created using the controller  property in the routes.yaml \nfile. The controller property has one supported value: channel.\n\nA filter  is used in combination with the controller: channel  configuration to\nselect a specific list of posts for display using the {{posts}}  template\nvariable. \n\nThis tutorial goes through the steps required to create a content view or\n\"channel\" using the controller  property. \n\nBuilding content views with controller: channel  does not change the individual\nURL of any posts or pages. To create a content collection with unique URL\nstructures, check out this tutorial\n[https://docs.ghost.org/tutorials/creating-content-collections/]!\n\nCreate routes and channels in the routes.yaml  file\nDownload your routes.yaml  file from the settings in Ghost admin or locate the\nfile on your server and open it in any code editor.\n\nThis file is split into three areas, and for this tutorial you'll be using the\n\"routes\" section - read more about dynamic routing\n[https://docs.ghost.org/concepts/routing/]  and the routes.yaml  file.\n\nFirst of all, create new routes from which you want your content view to be\nindexed, and then use the controller  and filter  properties to define those\nroutes. Use the following structure: \n\nroutes:\n  /route/description/:\n    controller: channel\n    filter: tag:x+tag:y\n\n\nUsing filters\nFilters can be used in numerous ways to divide or combine both the tags and\nauthors of a post or page. Here's a full guide of the parameters for the filter \nproperty: \n\nfilter: tag:x+tag:y # must have both \"x\" and \"y\" tags (+ = AND)\nfilter: tag:x,tag:y # can have either \"x\" or \"y\" tags (, = OR)\nfilter: tag:-x+tag:y # must have tag \"y\" but not tag \"x\" (- = NOT)\nfilter: tag:[x,y,z] # must have either \"x\", \"y\", or \"z\" tags ([] = IN)\nfilter: tag:-[x,y,z] # must not have any one of \"x\", \"y\", or \"z\" tags (-[] = NOT IN)\nfilter: author:steve+tag:x # must be written by \"steve\" and have tag \"x\"\n\n\nExample\nIn the following example, two content hubs are being created for \n/reviews/mobile/  and /reviews/photography/. Let's imagine this publication\nposts reviews, news and other content about technology, and they want to create\ntwo views of content for reviews of phones and reviews of photography gear: \n\nroutes:\n  /reviews/mobile/:\n    controller: channel\n    filter: tag:review+tag:mobile\n  /reviews/photography/:\n    controller: channel\n    filter: tag:review+tag:camera\n\n\nIn this case, all posts or pages tagged with review and mobile will appear on \n/reviews/mobile/  and all posts or pages tagged with review and camera will\nappear on /reviews/photography/. Individual posts will still keep their original\nURL, for example, example.com/post-name  or example.com/blog/post-name/ \ndepending on the configuration of any other routes or collections\n[https://docs.ghost.org/tutorials/creating-content-collections/]. \n\nThis is just one working example for the purposes of the tutorial. You can\ndivide or combine content on your site in almost any way you need using tags,\nauthors and the filter property.\n\nMap your channels to a template\nOnce you are happy with your new routes and filters, the last thing you'll need\nto add to routes.yaml  is the template  property, to map your new content hub(s)\nto a handlebars template within your theme. \n\nFollowing the same example from above, the structure would be: \n\nroutes:\n  /reviews/mobile/:\n    controller: channel\n    filter: tag:review+tag:mobile\n    template: reviews\n  /reviews/photography/:\n    controller: channel\n    filter: tag:review+tag:camera\n    template: reviews\n\n\nThis would map both of the new channel routes to the template called reviews.hbs\n, which could be a custom template specifically the purposes of featuring\nreviews in their own content hub. \n\nCreate a custom template for your channel\nIf you'd like to use custom data and styling on your new content hub, you'll\nneed to create a new template from scratch. For further information about\ncreating custom templates, visit the handlebars theme documentation\n[https://docs.ghost.org/api/handlebars-themes/]!\n\nIf you don't want to use a custom template, you can use your theme's default\ntemplate for an index page or list of posts, which is usually called index.hbs.\n\nNavigation\nIn order to add a feature a link to your new content hubs from your site, try\nadding some links into the navigation, which can be found in the \"design\" menu\nin Ghost admin. Alternatively, you may want to provide links to your new pages\nfrom a custom home page or a static page\n[https://docs.ghost.org/tutorials/custom-home-page/]  on your site directly in\nthe page's template. \n\nImplement your channels and templates\nAlmost at the finish line. Once you've finished editing your routes.yaml  file,\ncreated optional handlebars templates and made any necessary adjustments to your\nCSS files, you can upload your work to your site in Ghost admin.\n\n 1. Upload your edited routes.yaml  file\n 2. Upload your new theme .zip  containing any new templates and CSS\n 3. Visit the new routes you created and ensure your content is rendering\n    correctly and your filters are passing through the correct posts and pages\n\nSummary\nIn this tutorial you have created one or more channels for your publication that\ncan be viewed like content hubs at a designated route. Each new content view has\nits own paginated index page and optional custom template, while the URL\nstructure for individual posts remains the same. \n\nNow you know the most efficient way to build a content hub on your site without\naltering the URL structure, and you can replicate this with new filter\ncombinations and templates as required.","featured":false,"created_at_pretty":"12 October, 2018","published_at_pretty":"12 October, 2018","updated_at_pretty":"07 November, 2018","created_at":"2018-10-12T07:27:05.000+00:00","published_at":"2018-10-12T10:49:10.000+00:00","updated_at":"2018-11-07T09:21:20.000+00:00","tags":[{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"},{"name":"Dynamic Routing","slug":"dynamic-routing","visibility":"public"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}},{"node":{"id":"Ghost__Post__5bad0b64f193d500bfd5b425","slug":"creating-content-collections","title":"Building content collections with distinct routes","excerpt":"Split your site into distinct sections to support different content types or topics using collections.","feature_image":"https://docs.ghost.io/content/images/2018/10/dynamic-routing-4.svg","plaintext":"Split your site into distinct sections to support different content types or\ntopics using collections.\n\nOverview\nCollections allow you to create groups of posts that match a filter, with unique\npermalinks, and an index URL where all posts within that collection are listed\nand paginated.\n\nIt's possible to have a single collection that contains all posts, or multiple\ncollections for distinct areas, content types or topics. \n\nContent collections are created using the dynamic routing configuration layer,\nand allow you to create unique areas within your publication that have entirely\ndifferent URL structures, templates, RSS feeds, design and behaviour. \n\nThis can be achieved by editing the routes.yaml  file, creating new handlebars\ntemplates in your theme, and using tags [https://docs.ghost.org/concepts/tags/] \nin your post content to determine which collection each piece of content lives\nin.\n\nThis tutorial walks you through the process of setting up custom collections. \n\nIf you want to build custom views of content on your publication without\nchanging the route, learn how create content hubs using channels in this\ntutorial [https://docs.ghost.org/tutorials/building-a-content-hub/].Create\ncollections in the routes.yaml  file\nA collection can be defined in the flexible dynamic routing layer in Ghost.\nDownload your routes.yaml  file from the settings in Ghost admin or locate the\nfile on your server and open it in any code editor. \n\nThis file is split into three sections, and for this tutorial you'll be using\nthe \"collections\" section â read more about dynamic routing\n[https://docs.ghost.org/concepts/routing/].\n\nIn this example, two collections are being created for /blog/  and /podcast/ \ncollections. \n\nPermalinks\nCollections are mapped to a permalink, for example:\n\ncollections:\n  /blog/:\n    permalink: /blog/{slug}/  \n  /podcast/:\n    permalink: /podcast/{slug}/\n\n\n\nFilters\nIn order to ensure content can be tagged effectively, use the filter property,\nfor example: \n\ncollections:\n  /blog/:\n    permalink: /blog/{slug}/\n    filter: tag:blog+tag:-podcast\n  /podcast/:\n    permalink: /podcast/{slug}/\n    filter: tag:podcast+tag:-blog\n\n\nThis configuration will allow you to filter your posts and pages that you would\nlike to belong in a particular collection using tags in the editor. \n\nTip: you can use the  full range of data properties  to fetch resources using\nGhostâs API.When a post matches the filter property in a collection, it will\ndefine the routing or the URL for that post or page. For example, if a post has\nthe tag blog  then the URL for the post will become \nyoursite.com/blog/{post-name}. When it matches the podcast filter it will become\n yoursite.com/podcast/{post-name}.\n\nIn the current beta version of Dynamic Routing, it's necessary to specify the\ninverse of filters using -.\n\nTemplates\nEach collection can be completely unique in terms of what data is used and how\nthe content is rendered on your site using the Ghost theme layer. If no template\nproperty is specified in the routes.yaml  file, then it will default to the name\nof the collection. \n\nIt is also possible to map collection to a template using the property, which is\nuseful if you want to use a partial template to render a collection, for\nexample:\n\ncollections:\n  /blog/:\n    permalink: /blog/{slug}/\n    filter: tag:blog+tag:-podcast\n  /podcast/:\n    permalink: /podcast/{slug}/\n    filter: tag:podcast+tag:-blog\n    template: podcast/video\n\n\n\nCreate a template for your collection\nTo render unique content on your static pages, create different templates for\neach page. In the collections  example above, the outcome would be to render the\ntemplates like so:\n\n * https://yoursite.com/blog ð blog.hbs\n * https://yoursite.com/podcast/ ð podcast/video.hbs\n\nIf the template is not found then the fallback template is used instead, for\nexample post.hbs  or default.hbs.\n\nCreate new templates for your new collections, using the name of the collection\nfor the template file name. If you need further help creating a custom template,\nvisit the handlebars theme documentation\n[https://docs.ghost.org/api/handlebars-themes/]  to find out more!\n\nThis method of mapping content in a collection to a template gives you the\nflexibility to create content within the Ghost editor and then use tags to\ndefine the collection, and render each section on your site in any way you like.\n \n\nNavigation\nSince each collection that you create is going to have it's own index URL, such\nas yoursite.com/podcast, you will need to ensure that you create a navigation\nitem for your collection so that it appears on your site. The navigation for\nGhost content can be edited in the \"design\" menu in Ghost admin. \n\nUse tags to define a collection for your posts\nIn order for content to appear inside each of your collections, you'll need to\ntag some posts or pages in the editor with the correct tags. \n\nUsing the tags you specified earlier using the filter  property in your \nroutes.yaml  file, tag some of your posts so that you can test that your\ncollections are working as expected in the next step. \n\nThe order that collections are listed in routes.yaml  is important. Posts will\nonly exist in one collection, which is always the first filter it matches with.\nBe mindful of this when creating three or more collections for your site. \nImplement your collections and templates\nGreat work! Once you've finished editing your routes.yaml  file with new\ncollections, created some handlebars templates and made any necessary\nadjustments to your CSS files, the final thing to do is to get your new\ncollections live on your site ð\n\n 1. Upload your edited routes.yaml  file in Ghost admin\n 2. Upload your new theme .zip  containing new templates and CSS in Ghost admin\n 3. Visit your site and ensure your new collections render correctly\n\nSummary\nIn this tutorial you have created one or more custom collections of content that\nwill live inside their own unique section on your site, and be rendered using\nindividual templates. Use this process to set up as many collections as\nrequired!","featured":false,"created_at_pretty":"27 September, 2018","published_at_pretty":"12 October, 2018","updated_at_pretty":"22 March, 2019","created_at":"2018-09-27T16:55:00.000+00:00","published_at":"2018-10-12T06:26:51.000+00:00","updated_at":"2019-03-22T11:57:38.000+00:00","tags":[{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"},{"name":"Dynamic Routing","slug":"dynamic-routing","visibility":"public"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}},{"node":{"id":"Ghost__Post__5bb4e9115a8ccb00bfd27ae1","slug":"custom-page-templates","title":"Custom post templates","excerpt":"Build custom templates and pass them directly to the admin client to be used in individual posts or pages.","feature_image":"https://docs.ghost.io/content/images/2018/10/themes.svg","plaintext":"The Ghost theme layer has built-in functionality to work with custom templates\nand pass them directly to the admin client so that they can be readily used when\ncreating content using the editor. This allows theme developers to create\nreplicable styles for a publication that can be implemented by any author or\nteam user with a couple of clicks â\n\nOverview\nRather than using a bloated page builder that comes with style limitations and\nsite speed implications, a Ghost theme allows you to apply styles in a sensible\nmanner, using HTML and CSS.\n\nOnce the custom template is in place, it can be selected from the post settings\nmenu in the editor. \n\nThis tutorial walks you through the process for setting up custom templates\nusing Ghost handlebars themes.\n\nIf you want to build custom static pages for your publication, for example a\nhome page or an about page, read this tutorial\n[https://docs.ghost.org/tutorials/custom-home-page/]  which shows you how to map\nroutes to a template using the routes.yaml  file. Create a custom template\nTo create a custom template follow this filename format: \n\ncustom-{{template-name}}.hbs\n\n\nReplace {{template-name}}  with only alphanumeric characters and dashes. This\nwill then be picked up as a custom template within Ghost. Ensure you pick a\nmemorable name, since this part of the file name will be transformed and shown\nin the dropdown menu as 'Template Name'. \n\nUsing this naming format is the only thing required to ensure Ghost picks up\nyour custom template, which can then be used in any post or page. \n\nFrom here you can create an entirely custom handlebars template to suit your\nneeds and edit your CSS files as required. For further information about\nbuilding a Handlebars template from scratch, visit the Handlebars frontend SDK\ndocumentation [https://docs.ghost.org/api/handlebars-themes/].\n\nExample\nOn the Ghost blog, we use a custom template\n[https://github.com/TryGhost/Blog/blob/master/custom-full-width.hbs]  called \ncustom-full-width.hbs  to render unique styling for special posts like this\n[https://blog.ghost.org/2-0/]. Our template is called Full Width. \n\nThere are countless use cases for custom templates, which can totally restyle an\nentire post or page, or just to change a few small elements on the page. \n\nUsually, custom post templates are used for one-off pieces of content. If you\nneed a whole collection of content to be rendered with a specific template, use\ndynamic routing configuration instead. Implement new templates and CSS\nOnce you have finished creating your new custom template file and made any\nnecessary adjustments to your CSS, upload an updated version of your theme to\nGhost.\n\nTheme files should always be in the .zip  format, and you can import your\nupdated theme from the design settings menu in Ghost admin. \n\nNow you can test your new custom template on production by creating a new draft\npost, and selecting the correct template from the dropdown menu in the post\nsettings menu: \n\nThis menu will only appear when you have one or more custom templates uploaded\nin your theme!\nAdd content to your new post and preview it to see your new custom template and\nstyling in action. \n\nSummary\nNice! You've successfully created a custom post template in your Ghost theme and\nit's now ready to use from within the editor. This same process can be repeated\nto create multiple custom styles for your posts and pages to suit your needs.","featured":false,"created_at_pretty":"03 October, 2018","published_at_pretty":"10 October, 2018","updated_at_pretty":"23 October, 2018","created_at":"2018-10-03T16:06:41.000+00:00","published_at":"2018-10-10T10:49:27.000+00:00","updated_at":"2018-10-23T08:17:55.000+00:00","tags":[{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"},{"name":"Themes","slug":"themes","visibility":"public"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}},{"node":{"id":"Ghost__Post__5bad0a7df193d500bfd5b415","slug":"custom-home-page","title":"Creating a custom home page","excerpt":"Create entirely customised static content on your publication's home page with dynamic routing and custom themes!","feature_image":"https://docs.ghost.io/content/images/2018/10/dynamic-routing-5.svg","plaintext":"When you first spin up an instance of Ghost, your home page renders the\npublication's content on the root domain. If this doesn't suit your needs, it is\nentirely possible to create a static custom home page instead ð\n\nThere really is no limit to what you can put on a static home page. Whether you\nneed to explain what your publication is all about, or provide a hub with quick\nlinks to different sections of your site. It's totally up to you! \n\nOverview\nSetting up a custom home page involves configuring the routes in your \nroutes.yaml  file, as well as creating a custom template in your theme. The end\nresult is a unique static page on your /  root domain. \n\nThis tutorial walks you through the entire setup process for setting up custom\nstatic pages using the Ghost theme layer and dynamic routing. \n\nSingle route template configuration\nA single route can be defined in the flexible dynamic routing layer. In the Labs\npage in Ghost admin, download your routes.yaml  file and open it in any code\neditor. \n\nThis file is split into three sections, and for this tutorial you'll be using\nthe \"routes\" section - read more about dynamic routing\n[https://docs.ghost.org/api/handlebars-themes/routing/]\n[https://docs.ghost.org/concepts/routing/].\n\nSingle routes are mapped to a template, for example:\n\nroutes:\n  /: home\n\n\nIf you have more than one custom static page, then you can replicate the process\nand list all single routes and respective templates on a new line: \n\nroutes:\n  /: home\n  /about/: about\n  /subscribe/: subscribe\n\n\nThis configuration allows you to create unique content and templates for each\nsingle route using the Ghost theme layer. \n\nCreate a template for each static URL\nTo render unique content on your static pages, create different templates for\neach page. In the routes  example above, the outcome would be to render the\nspecified template: \n\n * https://yoursite.com/ ð home.hbs  \n * https://yoursite.com/about/ ð about.hbs  \n * https://yoursite.com/subscribe/ ð subscribe.hbs  \n\nIf the template is not found then the fallback template is used instead, for\nexample index.hbs  or default.hbs.\n\nCreate new templates for your new home page or static pages. If you need further\nhelp creating a custom template, visit the theme documentation\n[https://docs.ghost.org/api/handlebars-themes/]  to find out more! \n\nThis method of creating content on a static URL allows you to completely render\nyour content and design from the handlebars template and CSS files, without\nusing posts or the Ghost editor. Check out the custom template tutorial\n[https://docs.ghost.org/tutorials/custom-page-templates]  to find out how to\nfetch dynamic content from Ghost and render it on a static URL. \n\nUsing the data attribute\nWhen rendering a route that is not /  there is no implicit context\n[https://docs.ghost.org/api/handlebars-themes/context/]  but you can use the \ndata  attribute [https://docs.ghost.org/concepts/routing/#data]  on the route to\nfetch resources using Ghostâs API, for example: \n\nroutes:\n  /:\n    data: page.home\n    template: home\n  /about/careers/:\n    data: page.careers\n    template: careers\n  /about/team/:\n    data: page.team\n    template: team\n\n\nIt's also possible to use the {{get}} [https://themes.ghost.org/docs/get]  \nhelper [https://docs.ghost.org/api/handlebars-themes/helpers/get/]  in the\nroute's template to fetch any dynamic content that you want to render.\n\nNavigation considerations\nSince each static page that you create is unique, it's important to ensure you\nbuild in some site navigation to your new templates for each static page. The\nnavigation for Ghost content and collections can be edited in the Design menu in\nGhost admin. \n\nImplement your routes and templates\nOnce you have finished editing the routes.yaml  file, created your new\nhandlebars templates and made any necessary adjustments to your CSS files, it's\ntime to get your new custom home page or static pages live on your site. \n\n 1. Upload your edited routes.yaml  file in Ghost admin\n 2. Upload your new theme .zip  containing new templates and CSS in Ghost admin\n 3. Visit your site and ensure your new static pages render correctly\n\nSummary\nNice work! You've figured out how to create a custom static home page for your\nGhost publication, where you can render any content and design required from\nyour theme. This same process can be repeated to create multiple static pages to\nsuit your needs.","featured":false,"created_at_pretty":"27 September, 2018","published_at_pretty":"04 October, 2018","updated_at_pretty":"15 February, 2019","created_at":"2018-09-27T16:51:09.000+00:00","published_at":"2018-10-04T13:53:41.000+00:00","updated_at":"2019-02-15T05:11:46.000+00:00","tags":[{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"},{"name":"Dynamic Routing","slug":"dynamic-routing","visibility":"public"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}},{"node":{"id":"Ghost__Post__5bad09fdf193d500bfd5b411","slug":"implementing-redirects","title":"Implementing redirects","excerpt":"Maintain the redirects on your Ghost publication with a single JSON file and ensure your site is SEO friendly and avoid 404 errors!","feature_image":"https://docs.ghost.io/content/images/2018/10/configuration.svg","plaintext":"When managing a website of any nature, implementing URL redirects is a commonly\nused practice. Redirection is the process of forwarding one URL to a different\nURL. They are most commonly used when removing or moving content on your site,\nto fix broken links, or to migrate content between different domains. \n\nIn Ghost, implementing redirects can be done by accessing a simple JSON file \nredirects.json  in Ghost admin. This file can be downloaded, edited with code\nand reimported into the admin interface.\n\nThis tutorial will walk you through: \n\n * When not to use the redirects.json  file ð\n * Accessing the redirects.json  file and the basics of it's structure\n * How to create your own redirects with code with common examples to reference\n * Implementing your new redirects\n * Some tips for getting started with regular expressions\n\n\n--------------------------------------------------------------------------------\n\nWhen not to use redirects.json \nBefore we get started, make sure you are not trying to implement some common\npatterns where it is not necessary or advised to use the redirects.json  file:\n\n * Page rules for www or HTTP/HTTPS redirection should always be implemented\n   with your DNS provider.\n * Ghost automatically forces trailing slashes, so you do not need to write any\n   page rules to accommodate for duplicate content caused by this.\n * If you are trying to change the URL structure of your publication, the\n   recommended way to do this is with dynamic routing\n   [https://docs.ghost.org/tutorials/creating-content-collections/]  and the \n   routes.yaml  file. However, you may still need to redirect existing content\n   following this tutorial.\n   \n\nAccessing the redirect file in Ghost\nThe redirects.json  file is located in content/data/redirects.json  and can be\ndownloaded and uploaded in the settings in Ghost admin.\n\nFile structure\nThis file always starts with a [  and ends with a ]. A new ghost publication\nwill have an empty redirect file containing[]. It can be edited in any source\ncode editor.\n\nEntries to the redirects file follow this structure: \n\n{\n  \"from\": \"/url/\" ,\n  \"to\":  \"/url/\",\n  \"permanent\": true | false\n}\n\n\nMultiple entries are separated by ,  and the last entry does not have the ,. It\nis also possible to use regular expressions.\n\nCreating redirects in redirects.json\nRedirects can be created using the three fields in the file structure and regex\ncan be used to determine incoming URL patterns, or dynamic values for the final\ndestination.\n\n * The from  field you defines the incoming URL or pattern (regex)\n * The to  field defines where the incoming traffic should be redirected to,\n   which can be a static URL, or a dynamic value using regex (example: \"to\":\n   \"/$1/\").\n * The permanent  field can be defined with true  for a permanent 301 redirect,\n   or false  for a temporary 302 redirect. \n\nThe following examples are some common use cases of redirects for a Ghost\npublication.\n\nâ¡ï¸ Redirect an old URL to a new one\nIf you update or remove a URL it is best practice to redirect it. This prevents\nbroken links and your visitors landing on error pages, and is beneficial for SEO\nif the search engines have indexed that page(s) that you have removed or\nchanged.\n\nFor example, to redirect domain.com/old-postname/  to domain.com/new-postname/,\ninclude the following in the redirects.json  field:\n\n[{\n    \"from\": \"/old-postname/\",\n    \"to\": \"/new-postname/\",\n    \"permanent\": true\n}]\n\n\nIt is also possible to use regex to find URL patterns and redirect all URLs that\nmatch that pattern. For example: \n\n[{\n    \"from\": \"^\\\\/blog/old(\\\\/?)$\",\n    \"to\": \"/blog/new-postname\",\n    \"permanent\": true\n}]\n\n\nThis is useful if you need to redirect several versions of the same URL, or have\npatterns of posts which have a common string. \n\nâ¡ï¸ Redirect your post structure\nThere are lots of examples where you may want to redefine the URL structure of\nthe content on your site. The recommended way to do this is with dynamic routing\n[https://docs.ghost.org/tutorials/creating-content-collections/]  in your \nroutes.yaml  file. \n\nOne of the benefits of using an open source platform like Ghost is that there\nare almost infinite ways to customise your publication. You have the ultimate\nflexibility. \nHere are some common examples of restructuring a Ghost publication:\n\n * Category  - from domain.com/blog/post-name/  to /domain.com/news/post-name/\n * Date  - from domain.com/blog/year/post-name/  to domain.com/postname/\n * Author  - from domain.com/author/author-name/  to \n   domain.com/host/author-name/\n * Tag  - from domain.com/tag/post/  to domain.com/topic/post/\n * Search labels - from domain.com/search/label/  to domain.com/tag/tag-name\n\nFor examples like this, dynamic routing is recommended because it will enforce\nthe desired structure for all new content on your site. However, if you already\nhave existing content or are migrating content from another platform, then you\nthen you can use the redirect.json  file to ensure all existing content is\nproperly redirected too. \n\nâ¡ï¸ Fixing URL discrepancies\nSometimes there can be multiple versions of the same URL that need to be\nconsolidated. \n\nFor example, in some cases there may be a problem with upper and lower case in a\nURL, such as /osx/  ,/OSX/  ,/OsX/. These can all be redirected to /MacOS/ \nusing regex like so: \n\n{\n    \"from\": \"/\\\\/osx/i\",\n    \"to\": \"/MacOS/\"\n}\n\n\nImplementing redirects in Ghost\nOnce you have created your redirects by editing your redirects.json  file,\nupload it in Ghost admin in the Labs menu. This is the recommended method.\n\nIf you would like to replace the JSON file on the server it should exist in \ncontent/data/redirects.json  and you'll need to run ghost restart  for your\nchanges to take effect.\n\nOnce the file is in place you can test your redirects by visiting any URL that\nyou are redirecting in your browser and ensuring it is being redirected as you\nwould expect.\n\nUsing regular expressions\nThere are lots of different ways to implement redirects using regex. The best\nresource to assist with designing regular expressions for a wide variety of use\ncases is regex101 [https://regex101.com]. Using this tool you can select the </>\njavascript  option. \n\nThis tool allows you to enter your pattern in the top bar, and then the paths\nyou want to match (one per line) and also provides useful building blocks and\nsuggestions.\n\nSummary\nThat's it. You have discovered the recommended process to implementing redirects\nfor your Ghost publication: \n\n1. Download the redirects.json  file from Ghost admin\n2. Edit the file and use code to add new redirection rules\n3. Upload the file in Ghost admin\n\nThis process can be repeated as often as required. All of your redirects will\nalways be stored in one accessible place and are always managed and owned by\nyou.","featured":false,"created_at_pretty":"27 September, 2018","published_at_pretty":"03 October, 2018","updated_at_pretty":"12 November, 2018","created_at":"2018-09-27T16:49:01.000+00:00","published_at":"2018-10-03T14:31:39.000+00:00","updated_at":"2018-11-12T20:11:51.000+00:00","tags":[{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"},{"name":"Configuration","slug":"configuration","visibility":"public"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}},{"node":{"id":"Ghost__Post__5b8803ae2ffffa00bfa11454","slug":"multi-language-content","title":"Multi-language content","excerpt":"By configuring collections and templates you can support multi-language content on your site. This means you can have each language run on a unique URL.","feature_image":"https://docs.ghost.io/content/images/2018/10/dynamic-routing-6.svg","plaintext":"Using Ghost's dynamic routing configuration layer, your site can support\nmulti-lingual content served across unique URLs with SEO-friendly, semantic\ntemplates. This means you can have each language run on it's own URL, for\nexample example.com  for English content and example.com/de  for German content.\n \n\nSetting up multi-language content involves configuring collections in your \nroutes.yaml  file, as well as creating different templates in your theme for\neach collection. \n\nThis tutorial walks you through the entire setup process for a multi language\nsite using the Ghost theme layer including configuring the routes.yaml  and\ncreating templates for each language.\n\nConfigure collections for each language\nFirst of all, configure your routes.yaml  file to include collections for each\ndesired language. In the Labs page in Ghost admin, download your routes.yaml \nfile and open it in any code editor. \n\nThis file is split into three sections, and for this tutorial we will be using\nthe \"collections\" section. Read more about dynamic routing in the core concepts\n[https://docs.ghost.org/concepts/routing/].\n\nHere is an example of the code required to create a collection for German\ncontent: \n\nroutes:\n\ncollections:\n  /:\n    permalink: /{slug}/\n    filter: 'tag:-de'\n  /de/:\n    permalink: /de/{slug}/\n    filter: 'tag:de'\n\ntaxonomies:\n  tag: /tag/{slug}/\n  author: /author/{slug}/\n\n\nThis configuration will allow you to filter your posts and pages that contain\nmulti-language content using tags in the editor. \n\n> Note: in the current beta version of Dynamic Routing, it's necessary to specify\nthe inverse of filters using -.\nCreate templates for each collection\nOnce your collections are in place, you'll need to create different templates\nfor each collection and define html lang  attributes in those templates, for\nexample: \n\nindex.hbs  \n<html lang=\"en\">  \n\nde.hbs\n<html lang=\"de\">  \n\nIf you need further help creating a custom template, visit the theme\ndocumentation [https://docs.ghost.org/api/handlebars-themes/]  for more detailed\ninformation about working with the Ghost theme layer. \n\nFinally, update your post template to ensure the correct template is used for\neach collection, for example: \n\npost.hbs\n\n{{#post}}\n  {{#has tag=\"de\"}}\n    <html lang=\"de\">\n  {{else}}\n    <html lang=\"en\">\n  {{/has}}\n{{/post}} \n\n\nImplement your collections and templates\nOnce you have finished editing the routes.yaml  file, created your new\nhandlebars templates and made any necessary adjustments to your CSS files, it's\ntime to get your new multi-language collections up and running. \n\n 1. Upload your edited routes.yaml  file in Ghost admin\n 2. Upload your new theme .zip  containing new templates and CSS in Ghost admin\n 3. Visit your site and ensure your multi-language content renders correctly\n\nSummary\nThis same process can be repeated to create multiple collections for different\nlanguages as required and you can use the new templates you create to determine\nhow the content for each language specific collection should render.","featured":false,"created_at_pretty":"30 August, 2018","published_at_pretty":"30 August, 2018","updated_at_pretty":"22 March, 2019","created_at":"2018-08-30T14:48:14.000+00:00","published_at":"2018-08-30T14:51:08.000+00:00","updated_at":"2019-03-22T11:57:53.000+00:00","tags":[{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"},{"name":"Dynamic Routing","slug":"dynamic-routing","visibility":"public"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}},{"node":{"id":"Ghost__Post__5c94c0b4cb358d00c095d343","slug":"localising-dates-in-ghost-themes","title":"Localising dates in Ghost themes","excerpt":"By default, Ghost outputs dates in English using the timezone of the server hosting your site. Find out how to change this using jQuery!","feature_image":null,"plaintext":"Ghost, by default, outputs dates in English using the timezone of the server\nhosting your site. It is possible to change both the language and the timezone\nused to output dates in your theme using jQuery, moment.js\n[http://momentjs.com/]  and moment.js timezone [http://momentjs.com/timezone/].\n\nIn the following guide, you'll learn how to switch the locale to German and also\nhow to output dates converted to the 'Europe/Berlin' timezone.\n\n> Note: This guide assumes you're comfortable editing a Ghost theme. If you need\nhelp getting started with theming for Ghost, go to the theme docs\n[https://docs.ghost.org/api/handlebars-themes/].\nProviding dates to moment\nFor this to work, you'll first need to make sure that your theme is outputting\ndates in a format that moment can pick up and manipulate. This means using\nGhost's date  helper to output a complete machine-readable date in an HTML\nattribute.\n\nFor example, if you're using the Casper theme, change the <time></time>  HTML\nblocks to look like this:\n\n<time class=\"post-date\" datetime=\"{{date\nformat=\"YYYY-MM-DDTHH:mm:ss.SS\\Z\"}}\"></time>\n\nThe format YYYY-MM-DDTHH:mm:ss.SS\\Z  can be understood by moment.js. Note that\nwe're only outputting it as an attribute, rather than rendering the date on the\npage. Using an html data attribute\n[https://developer.mozilla.org/en/docs/Web/Guide/HTML/Using_data_attributes] \nwould also work here.\n\nInclude jQuery\nMany Ghost themes, including the default theme Casper, already have jQuery\nincluded. If you theme doesn't yet have jQuery you'll need to add it, or see the\nsection on improving performance  at the end of this guide for alternatives.\n\nTo include jQuery, add the following snippet to the default.hbs  file of your\ntheme, somewhere near {{ghost_foot}}  or just above the </body>  tag:\n\n<script type=\"text/javascript\"\nsrc=\"https://code.jquery.com/jquery-1.11.3.min.js\"></script>\n\nChange your locale\nTo change your local, you'll need to grab both the moment.js file, and the local\nyou want and include them in your theme.I recommend grabbing these from \ncdnjs.cloudflare.com [http://cdnjs.com/libraries/moment], and placing them in\nyour default.hbs  underneath where you added jQuery:\n\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.6/moment.min.js\"></script>\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.6/locale/de.js\"></script>\n\n\nOnce these are included, you'll need to add a final piece of JavaScript just\nbeneath where you included jQuery and the moment files.\n\nThis code first sets the moment locale to 'de'. Then it loops through each date\non the page, and replaces the content of the tag with a brand new, correctly\nlocalised date using moment:\n\n<script type=\"text/javascript\">\n$(document).ready(function () {\n  moment.locale('de');\n\n  $('.post-date').each(function (i, date) {\n    var $date = $(date);\n        \n    $date.html(\n      moment($date.attr('datetime'))\n        .format('LLL')\n    );\n  });\n});\n</script>\n\n\nLLL  is a format specific to the locale provided, you can look up how moment\nwill format dates for your local, by visiting the moment locale docs\n[http://momentjs.com/#multiple-locale-support]  and choosing your locale.\n\nChange your timezone\nThe majority of Ghost themes don't output the time a post was published. For\nsome blogs with a high volume of posts, distinguishing posts based on time is\nimportant and for these blogs, Ghost's use of UTC (or whatever timezone your\nserver runs) isn't ideal.\n\nTo change your timezone, you'll need to grab both the moment.js & moment\ntimezone libraries with the timezone data. Again, I recommend grabbing these\nfrom cdnjs.cloudflare.com [http://cdnjs.com/libraries/moment], and placing them\nin your default.hbs  underneath where you added jQuery:\n\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.6/moment.min.js\"></script>\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.4.1/moment-timezone-with-data-2010-2020.min.js\"></script>\n\n\nOnce you have these included in your theme, you'll need to add a small snippet\nof JavaScript that will read all of the dates on the page, and replace them with\na transformed version.\n\n<script type=\"text/javascript\">\n$(document).ready(function () {\n  $('.post-date').each(function (i, date) {\n    var $date = $(date); \n\n    $date.html(\n      moment($date.attr('datetime'))\n        .tz('Europe/Berlin')\n        .format('DD MMMM YYYY HH:mm')\n      );\n  });\n});\n</script>\n\n\nThis snippet calls .tz('Europe/Berlin')  to convert the date into the correct\ntimezone for Germany. Use the map in the moment timezone docs\n[http://momentjs.com/timezone/]  to look up the name for your timezone.\n\nThis snippet also uses a custom date format to output both the date and time.\nMoment's formatting documentation [http://momentjs.com/docs/#/displaying/]  has\nfull info on how to design your own custom format.\n\nCombining locale & timezone\nHere's a combined version, switching both the locale and the timezone:\n\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.6/moment.min.js\"></script>\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.6/locale/de.js\"></script>\n<script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.4.1/moment-timezone-with-data-2010-2020.min.js\"></script>\n\n<script type=\"text/javascript\">\n  $(document).ready(function () {\n    moment.locale('de');\n\n    $('.post-date').each(function (i, date) {\n      var $date = $(date);\n\n      $date.html(\n        moment($date.attr('datetime'))\n          .tz('Europe/Berlin')\n          .format('LLL')\n       );\n    });\n  });\n</script>\n\n\nImproving performance\nIf you're keen on keeping your theme super-lightweight, there are some\nimprovements that can be made to the provided examples. The first and most\nobvious is to remove jQuery as there are plenty of other ways to do \n$document.ready()  without jQuery\n[http://stackoverflow.com/questions/799981/document-ready-equivalent-without-jquery]\n.\n\nAlthough moment.js no longer provides a tool for creating a custom build of\ntimezone data, it is relatively straightforward to open the timezone data file\nto pull out just the data you need. For example, this gist\n[https://gist.github.com/ErisDS/b56155424e00d166c862]  contains just the data\nfor GMT, which will ensure your blog respects time changes during the Summer if\nyou're in the UK.\n\n> Note: If you do choose to create custom builds of moment.js that are stored\nlocally, please remember to use the asset helper\n[http://themes.ghost.org/docs/asset].","featured":false,"created_at_pretty":"22 March, 2019","published_at_pretty":"31 July, 2018","updated_at_pretty":"22 March, 2019","created_at":"2019-03-22T11:02:12.000+00:00","published_at":"2018-07-31T11:54:00.000+00:00","updated_at":"2019-03-22T12:09:31.000+00:00","tags":[{"name":"Themes","slug":"themes","visibility":"public"},{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}},{"node":{"id":"Ghost__Post__5c94cd13cb358d00c095d357","slug":"test-pull-request","title":"Test any open source pull request in seconds","excerpt":"Ever wished it was easier to test out Pull Requests on the Ghost repo? Follow this guide to get your environment setup to test a PR with a single command.","feature_image":null,"plaintext":"Have you ever taken a look at the list of Pull Requests on the Ghost\n[http://github.com/TryGhost/Ghost]  repo and wished it was easier to try them\nout? The following post details how to setup your environment so that testing a\nPR is as easy as:\n\n> $ pr 3361\nEdit the git config file\nThis step comes from a gist [https://gist.github.com/piscisaureus/3342247]  by\nBert Belder, @piscisaureus [https://github.com/piscisaureus]:\n\nYou need to edit the git config file for your locally checked out Ghost\nrepository. To do this locate the file .git/config  inside your local clone and\nopen it for editing. Something like:\n\n> $ cd Ghost && vim .git/config\nInside your git config file, you should see an entry for the remote Ghost repo\nwhich looks a bit like this:\n\n[remote \"upstream\"]\n  url = git@github.com:TryGhost/Ghost.git\n  fetch = +refs/heads/*:refs/remotes/upstream/*\n\n\nWe're going to add a second fetch  line to this block, as shown here:\n\n[remote \"upstream\"]\n  url = git@github.com:TryGhost/Ghost.git\n  fetch = +refs/heads/*:refs/remotes/upstream/*\n  fetch = +refs/pull/*/head:refs/remotes/upstream/pr/*\n\n\nTip:  If you're using the vim editor, you'll need to type i for insert mode, so\nthat you can edit the file and use your keyboard to navigate around.\n\nGo ahead and add this line, save and exit the file. git fetch upstream  will now\nfetch any new PRs as a branch called pr/####. Typing git checkout pr/3361  will\nswitch you onto a branch containing the changes from PR #3361.\n\nFrom here you will still need to run a set of commands to get Ghost running,\nincluding npm install, grunt init  and npm start. \n\nTip:  If you've read all this and gotten yourself stuck in the vim editor, you\nneed to type ESC : wq Enter to save and exit.\n\nSet up a bash alias\nBash aliases let you create your own name for a command or set of commands, so\nby adding a bash alias, we can make all of this as easy as typing:\n\n> $ pr 3361\nSetting up a bash alias takes just a few seconds, and will save you a lot of\ntime and energy remembering and typing arcane strings of commands.\n\nYou need to open your bash config file for editing. If you use git bash on\nWindows [http://git-scm.com/download/win]  the file you need to edit will likely\nbe ~/.bashrc. For terminal on Mac the code is the same but the file you'll need\nto edit is usually ~/.bash_profile. In both cases ~  means your user directory.\n\nFind your bash config file, and open it for editing:\n\n> $ vim ~/.bashrc\nPaste the following code anywhere in that file:\n\nalias pr='f() { git fetch upstream && git checkout pr/\"$1\" && npm install && grunt init && npm start; }; f'\n\n\nTip:  If you work on multiple projects, whilst you're here perhaps change the\nalias to ghostpr  rather than just pr, and setup a similar command for your\nother projects?\n\nReload the config\nTo finish up, save and exit the bash config file. Your new command won't work\nuntil you reload the config by either opening a new terminal / bash window or by\nexecuting it with a command like this (notice the dot):\n\n> $ . ~/.bashrc\nNow you can easily test Ghost pull requests\n[https://github.com/TryGhost/Ghost/pulls]!","featured":false,"created_at_pretty":"22 March, 2019","published_at_pretty":"31 July, 2018","updated_at_pretty":"22 March, 2019","created_at":"2019-03-22T11:54:59.000+00:00","published_at":"2018-07-31T11:54:00.000+00:00","updated_at":"2019-03-22T12:05:41.000+00:00","tags":[{"name":"Configuration","slug":"configuration","visibility":"public"},{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}}]}},"pageContext":{}}