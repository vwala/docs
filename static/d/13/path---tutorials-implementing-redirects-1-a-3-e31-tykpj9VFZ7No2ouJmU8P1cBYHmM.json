{"data":{"site":{"siteMetadata":{"siteUrl":"http://ghost.local:8000","title":"vwa.la help","description":"Everything you need to know about the vwa.la influencer marketing platform."}},"ghostPost":{"title":"Implementing redirects","slug":"implementing-redirects","featured":false,"feature_image":"https://docs.ghost.io/content/images/2018/10/configuration.svg","created_at_pretty":"27 September, 2018","published_at_pretty":"03 October, 2018","updated_at_pretty":"12 November, 2018","created_at":"2018-09-27T16:49:01.000+00:00","published_at":"2018-10-03T14:31:39.000+00:00","updated_at":"2018-11-12T20:11:51.000+00:00","excerpt":"Maintain the redirects on your Ghost publication with a single JSON file and ensure your site is SEO friendly and avoid 404 errors!","meta_title":"Implementing redirects in Ghost ‚Äì Tutorials","meta_description":"This tutorial explains how to implement redirects with Ghost: the open-source platform for professional publishing.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Kym Ellis","slug":"kym","bio":"Technical marketing lead","profile_image":"//www.gravatar.com/avatar/65b8e98952305f0ae0f90c7439718680?s=250&d=mm&r=x","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Kym Ellis","slug":"kym","bio":"Technical marketing lead","profile_image":"//www.gravatar.com/avatar/65b8e98952305f0ae0f90c7439718680?s=250&d=mm&r=x","twitter":null,"facebook":null,"website":null},"primary_tag":null,"tags":[{"name":"#tutorial","slug":"hash-tutorial","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"internal"},{"name":"Configuration","slug":"configuration","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"When managing a website of any nature, implementing URL redirects is a commonly\nused practice. Redirection is the process of forwarding one URL to a different\nURL. They are most commonly used when removing or moving content on your site,\nto fix broken links, or to migrate content between different domains. \n\nIn Ghost, implementing redirects can be done by accessing a simple JSON file \nredirects.json  in Ghost admin. This file can be downloaded, edited with code\nand reimported into the admin interface.\n\nThis tutorial will walk you through: \n\n * When not to use the redirects.json  file üôÉ\n * Accessing the redirects.json  file and the basics of it's structure\n * How to create your own redirects with code with common examples to reference\n * Implementing your new redirects\n * Some tips for getting started with regular expressions\n\n\n--------------------------------------------------------------------------------\n\nWhen not to use redirects.json \nBefore we get started, make sure you are not trying to implement some common\npatterns where it is not necessary or advised to use the redirects.json  file:\n\n * Page rules for www or HTTP/HTTPS redirection should always be implemented\n   with your DNS provider.\n * Ghost automatically forces trailing slashes, so you do not need to write any\n   page rules to accommodate for duplicate content caused by this.\n * If you are trying to change the URL structure of your publication, the\n   recommended way to do this is with dynamic routing\n   [https://docs.ghost.org/tutorials/creating-content-collections/]  and the \n   routes.yaml  file. However, you may still need to redirect existing content\n   following this tutorial.\n   \n\nAccessing the redirect file in Ghost\nThe redirects.json  file is located in content/data/redirects.json  and can be\ndownloaded and uploaded in the settings in Ghost admin.\n\nFile structure\nThis file always starts with a [  and ends with a ]. A new ghost publication\nwill have an empty redirect file containing[]. It can be edited in any source\ncode editor.\n\nEntries to the redirects file follow this structure: \n\n{\n  \"from\": \"/url/\" ,\n  \"to\":  \"/url/\",\n  \"permanent\": true | false\n}\n\n\nMultiple entries are separated by ,  and the last entry does not have the ,. It\nis also possible to use regular expressions.\n\nCreating redirects in redirects.json\nRedirects can be created using the three fields in the file structure and regex\ncan be used to determine incoming URL patterns, or dynamic values for the final\ndestination.\n\n * The from  field you defines the incoming URL or pattern (regex)\n * The to  field defines where the incoming traffic should be redirected to,\n   which can be a static URL, or a dynamic value using regex (example: \"to\":\n   \"/$1/\").\n * The permanent  field can be defined with true  for a permanent 301 redirect,\n   or false  for a temporary 302 redirect. \n\nThe following examples are some common use cases of redirects for a Ghost\npublication.\n\n‚ö°Ô∏è Redirect an old URL to a new one\nIf you update or remove a URL it is best practice to redirect it. This prevents\nbroken links and your visitors landing on error pages, and is beneficial for SEO\nif the search engines have indexed that page(s) that you have removed or\nchanged.\n\nFor example, to redirect domain.com/old-postname/  to domain.com/new-postname/,\ninclude the following in the redirects.json  field:\n\n[{\n    \"from\": \"/old-postname/\",\n    \"to\": \"/new-postname/\",\n    \"permanent\": true\n}]\n\n\nIt is also possible to use regex to find URL patterns and redirect all URLs that\nmatch that pattern. For example: \n\n[{\n    \"from\": \"^\\\\/blog/old(\\\\/?)$\",\n    \"to\": \"/blog/new-postname\",\n    \"permanent\": true\n}]\n\n\nThis is useful if you need to redirect several versions of the same URL, or have\npatterns of posts which have a common string. \n\n‚ö°Ô∏è Redirect your post structure\nThere are lots of examples where you may want to redefine the URL structure of\nthe content on your site. The recommended way to do this is with dynamic routing\n[https://docs.ghost.org/tutorials/creating-content-collections/]  in your \nroutes.yaml  file. \n\nOne of the benefits of using an open source platform like Ghost is that there\nare almost infinite ways to customise your publication. You have the ultimate\nflexibility. \nHere are some common examples of restructuring a Ghost publication:\n\n * Category  - from domain.com/blog/post-name/  to /domain.com/news/post-name/\n * Date  - from domain.com/blog/year/post-name/  to domain.com/postname/\n * Author  - from domain.com/author/author-name/  to \n   domain.com/host/author-name/\n * Tag  - from domain.com/tag/post/  to domain.com/topic/post/\n * Search labels - from domain.com/search/label/  to domain.com/tag/tag-name\n\nFor examples like this, dynamic routing is recommended because it will enforce\nthe desired structure for all new content on your site. However, if you already\nhave existing content or are migrating content from another platform, then you\nthen you can use the redirect.json  file to ensure all existing content is\nproperly redirected too. \n\n‚ö°Ô∏è Fixing URL discrepancies\nSometimes there can be multiple versions of the same URL that need to be\nconsolidated. \n\nFor example, in some cases there may be a problem with upper and lower case in a\nURL, such as /osx/  ,/OSX/  ,/OsX/. These can all be redirected to /MacOS/ \nusing regex like so: \n\n{\n    \"from\": \"/\\\\/osx/i\",\n    \"to\": \"/MacOS/\"\n}\n\n\nImplementing redirects in Ghost\nOnce you have created your redirects by editing your redirects.json  file,\nupload it in Ghost admin in the Labs menu. This is the recommended method.\n\nIf you would like to replace the JSON file on the server it should exist in \ncontent/data/redirects.json  and you'll need to run ghost restart  for your\nchanges to take effect.\n\nOnce the file is in place you can test your redirects by visiting any URL that\nyou are redirecting in your browser and ensuring it is being redirected as you\nwould expect.\n\nUsing regular expressions\nThere are lots of different ways to implement redirects using regex. The best\nresource to assist with designing regular expressions for a wide variety of use\ncases is regex101 [https://regex101.com]. Using this tool you can select the </>\njavascript  option. \n\nThis tool allows you to enter your pattern in the top bar, and then the paths\nyou want to match (one per line) and also provides useful building blocks and\nsuggestions.\n\nSummary\nThat's it. You have discovered the recommended process to implementing redirects\nfor your Ghost publication: \n\n1. Download the redirects.json  file from Ghost admin\n2. Edit the file and use code to add new redirection rules\n3. Upload the file in Ghost admin\n\nThis process can be repeated as often as required. All of your redirects will\nalways be stored in one accessible place and are always managed and owned by\nyou.","html":"<p>When managing a website of any nature, implementing URL redirects is a commonly used practice. Redirection is the process of forwarding one URL to a different URL. They are most commonly used when removing or moving content on your site, to fix broken links, or to migrate content between different domains. </p><p>In Ghost, implementing redirects can be done by accessing a simple JSON file <code>redirects.json</code> in Ghost admin. This file can be downloaded, edited with code and reimported into the admin interface.</p><p>This tutorial will walk you through: </p><ul><li>When not to use the <code>redirects.json</code> file üôÉ</li><li>Accessing the <code>redirects.json</code> file and the basics of it's structure</li><li>How to create your own redirects with code with common examples to reference</li><li>Implementing your new redirects</li><li>Some tips for getting started with regular expressions</li></ul><hr><h2 id=\"when-not-to-use-redirects-json\">When not to use redirects.json </h2><p>Before we get started, make sure you are not trying to implement some common patterns where it is not necessary or advised to use the <code>redirects.json</code> file:</p><ul><li>Page rules for www or HTTP/HTTPS redirection should always be implemented with your DNS provider.</li><li>Ghost automatically forces trailing slashes, so you do not need to write any page rules to accommodate for duplicate content caused by this.</li><li>If you are trying to change the URL structure of your publication, the recommended way to do this is with <a href=\"https://docs.ghost.org/tutorials/creating-content-collections/\">dynamic routing</a> and the <code>routes.yaml</code> file. However, you may still need to redirect existing content following this tutorial.<br></li></ul><h2 id=\"accessing-the-redirect-file-in-ghost\">Accessing the redirect file in Ghost</h2><p>The <code>redirects.json</code> file is located in <code>content/data/redirects.json</code> and can be downloaded and uploaded in the settings in Ghost admin.</p><figure class=\"kg-card kg-image-card\"><img src=\"https://docs.ghost.io/content/images/2018/10/Screenshot-2018-10-03-at-10.06.17.png\" class=\"kg-image\"></figure><h3 id=\"file-structure\">File structure</h3><p>This file always starts with a <code>[</code> and ends with a <code>]</code>. A new ghost publication will have an empty redirect file containing<code>[]</code>. It can be edited in any source code editor.</p><p>Entries to the redirects file follow this structure: </p><pre><code class=\"language-json\">{\n  &quot;from&quot;: &quot;/url/&quot; ,\n  &quot;to&quot;:  &quot;/url/&quot;,\n  &quot;permanent&quot;: true | false\n}\n</code></pre>\n<p>Multiple entries are separated by <code>,</code> and the last entry does not have the <code>,</code>. It is also possible to use regular expressions.</p><h2 id=\"creating-redirects-in-redirects-json\">Creating redirects in <code>redirects.json</code></h2><p>Redirects can be created using the three fields in the file structure and regex can be used to determine incoming URL patterns, or dynamic values for the final destination.</p><ul><li>The <code>from</code> field you defines the incoming URL or pattern (regex)</li><li>The <code>to</code> field defines where the incoming traffic should be redirected to, which can be a static URL, or a dynamic value using regex (example: <code>\"to\": \"/$1/\"</code>).</li><li>The <code>permanent</code> field can be defined with <code>true</code> for a permanent 301 redirect, or <code>false</code> for a temporary 302 redirect. </li></ul><p>The following examples are some common use cases of redirects for a Ghost publication.</p><h3 id=\"-redirect-an-old-url-to-a-new-one\">‚ö°Ô∏è Redirect an old URL to a new one</h3><p>If you update or remove a URL it is best practice to redirect it. This prevents broken links and your visitors landing on error pages, and is beneficial for SEO if the search engines have indexed that page(s) that you have removed or changed.</p><p>For example, to redirect <code>domain.com/old-postname/</code> to <code>domain.com/new-postname/</code>, include the following in the <code>redirects.json</code> field:</p><pre><code class=\"language-json\">[{\n    &quot;from&quot;: &quot;/old-postname/&quot;,\n    &quot;to&quot;: &quot;/new-postname/&quot;,\n    &quot;permanent&quot;: true\n}]\n</code></pre>\n<p>It is also possible to use regex to find URL patterns and redirect all URLs that match that pattern. For example: </p><pre><code class=\"language-json\">[{\n    &quot;from&quot;: &quot;^\\\\/blog/old(\\\\/?)$&quot;,\n    &quot;to&quot;: &quot;/blog/new-postname&quot;,\n    &quot;permanent&quot;: true\n}]\n</code></pre>\n<p>This is useful if you need to redirect several versions of the same URL, or have patterns of posts which have a common string. </p><h3 id=\"-redirect-your-post-structure\">‚ö°Ô∏è Redirect your post structure</h3><p>There are lots of examples where you may want to redefine the URL structure of the content on your site. The recommended way to do this is with <a href=\"https://docs.ghost.org/tutorials/creating-content-collections/\">dynamic routing</a> in your <code>routes.yaml</code> file. </p><p>One of the benefits of using an open source platform like Ghost is that there are almost infinite ways to customise your publication. You have the ultimate flexibility. <br>Here are some common examples of restructuring a Ghost publication:</p><ul><li><strong>Category</strong> - from <code>domain.com/blog/post-name/</code> to <code>/domain.com/news/post-name/</code></li><li><strong>Date</strong> - from <code>domain.com/blog/year/post-name/</code> to <code>domain.com/postname/</code></li><li><strong>Author</strong> - from <code>domain.com/author/author-name/</code> to <code>domain.com/host/author-name/</code></li><li><strong>Tag</strong> - from <code>domain.com/tag/post/</code> to <code>domain.com/topic/post/</code></li><li><strong>Search labels </strong>- from <code>domain.com/search/label/</code> to <code>domain.com/tag/tag-name</code></li></ul><p>For examples like this, dynamic routing is recommended because it will enforce the desired structure for all new content on your site. However, if you already have existing content or are migrating content from another platform, then you<br>then you can use the <code>redirect.json</code> file to ensure all existing content is properly redirected too. </p><h3 id=\"-fixing-url-discrepancies\">‚ö°Ô∏è Fixing URL discrepancies</h3><p>Sometimes there can be multiple versions of the same URL that need to be consolidated. </p><p>For example, in some cases there may be a problem with upper and lower case in a URL, such as <code>/osx/</code> ,<code>/OSX/</code> ,<code>/OsX/</code>. These can all be redirected to <code>/MacOS/</code> using regex like so: </p><pre><code class=\"language-json\">{\n    &quot;from&quot;: &quot;/\\\\/osx/i&quot;,\n    &quot;to&quot;: &quot;/MacOS/&quot;\n}\n</code></pre>\n<h2 id=\"implementing-redirects-in-ghost\">Implementing redirects in Ghost</h2><p>Once you have created your redirects by editing your <code>redirects.json</code> file, upload it in Ghost admin in the Labs menu. <strong>This is the recommended method.</strong></p><p>If you would like to replace the JSON file on the server it should exist in <code>content/data/redirects.json</code> and you'll need to run <code>ghost restart</code> for your changes to take effect.</p><p>Once the file is in place you can test your redirects by visiting any URL that you are redirecting in your browser and ensuring it is being redirected as you would expect.</p><h2 id=\"using-regular-expressions\">Using regular expressions</h2><p>There are lots of different ways to implement redirects using regex. The best resource to assist with designing regular expressions for a wide variety of use cases is <a href=\"https://regex101.com\">regex101</a>. Using this tool you can select the <code>&lt;/&gt; javascript</code> option. </p><p>This tool allows you to enter your pattern in the top bar, and then the paths you want to match (one per line) and also provides useful building blocks and suggestions.</p><h2 id=\"summary\">Summary</h2><p>That's it. You have discovered the recommended process to implementing redirects for your Ghost publication: <br><br>1. Download the <code>redirects.json</code> file from Ghost admin<br>2. Edit the file and use code to add new redirection rules<br>3. Upload the file in Ghost admin</p><p>This process can be repeated as often as required. All of your redirects will always be stored in one accessible place and are always managed and owned by you. </p><p><br></p>","custom_template":null,"url":"https://docs.ghost.io/implementing-redirects/","uuid":"8be3df6b-9ba9-47b3-b4c9-6ef1b7e9b6b4","page":false,"codeinjection_foot":"","codeinjection_head":"","comment_id":"5bad09fdf193d500bfd5b411"}},"pageContext":{"slug":"implementing-redirects","relatedPosts":[{"node":{"slug":"custom-amp-themes","title":"A complete guide to ‚ö° AMP templates in Ghost","url":"/tutorials/custom-amp-themes/","published_at":"2018-10-30T10:19:10.000+00:00","feature_image":null,"tags":[{"slug":"themes","name":"Themes","description":null,"meta_title":null,"meta_description":null,"feature_image":null},{"slug":"hash-tutorial","name":"#tutorial","description":null,"meta_title":null,"meta_description":null,"feature_image":null}]}},{"node":{"slug":"change-url-for-tags-authors","title":"Change the URL for tags and authors","url":"/tutorials/change-url-for-tags-authors/","published_at":"2018-10-12T12:30:33.000+00:00","feature_image":"https://docs.ghost.io/content/images/2018/10/dynamic-routing-2.svg","tags":[{"slug":"hash-tutorial","name":"#tutorial","description":null,"meta_title":null,"meta_description":null,"feature_image":null},{"slug":"dynamic-routing","name":"Dynamic Routing","description":null,"meta_title":null,"meta_description":null,"feature_image":null}]}},{"node":{"slug":"related-posts-block","title":"How to build a related posts block","url":"/tutorials/related-posts-block/","published_at":"2018-11-08T10:34:49.000+00:00","feature_image":null,"tags":[{"slug":"themes","name":"Themes","description":null,"meta_title":null,"meta_description":null,"feature_image":null},{"slug":"hash-tutorial","name":"#tutorial","description":null,"meta_title":null,"meta_description":null,"feature_image":null}]}},{"node":{"slug":"custom-page-templates","title":"Custom post templates","url":"/tutorials/custom-page-templates/","published_at":"2018-10-10T10:49:27.000+00:00","feature_image":"https://docs.ghost.io/content/images/2018/10/themes.svg","tags":[{"slug":"hash-tutorial","name":"#tutorial","description":null,"meta_title":null,"meta_description":null,"feature_image":null},{"slug":"themes","name":"Themes","description":null,"meta_title":null,"meta_description":null,"feature_image":null,"url":"/tutorials/themes/"}]}},{"node":{"slug":"chronological-posts","title":"Chronological posts","url":"/tutorials/chronological-posts/","published_at":"2018-10-12T13:45:13.000+00:00","feature_image":null,"tags":[{"slug":"hash-tutorial","name":"#tutorial","description":null,"meta_title":null,"meta_description":null,"feature_image":null},{"slug":"dynamic-routing","name":"Dynamic Routing","description":null,"meta_title":null,"meta_description":null,"feature_image":null}]}}],"section":"tutorials"}}