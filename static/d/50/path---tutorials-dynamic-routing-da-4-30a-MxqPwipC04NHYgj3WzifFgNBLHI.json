{"data":{"site":{"siteMetadata":{"siteUrl":"http://ghost.local:8000","title":"vwa.la help","description":"Everything you need to know about the vwa.la influencer marketing platform."}},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5bf7bbe19b2bb500c059a78c","slug":"custom-rss-feed","title":"How to make an iTunes Podcast RSS feed with Ghost","excerpt":"Ghost comes with automatic RSS feeds for your content, but you can also create a\ncustom feed using the flexible dynamic routing layer to support specific content\ntypes, like videos and podcasts.\n\nAdding /rss/  to most URLs in Ghost produces an automatically generated RSS feed\nfor your content. If you're publishing a podcast on your Ghost site then you'll\nprobably want to create a custom RSS feed to distribute your podcast episodes to\nplaces like iTunes. \n\nThis tutorial walks you through how to c","feature_image":null,"plaintext":"Ghost comes with automatic RSS feeds for your content, but you can also create a\ncustom feed using the flexible dynamic routing layer to support specific content\ntypes, like videos and podcasts.\n\nAdding /rss/  to most URLs in Ghost produces an automatically generated RSS feed\nfor your content. If you're publishing a podcast on your Ghost site then you'll\nprobably want to create a custom RSS feed to distribute your podcast episodes to\nplaces like iTunes. \n\nThis tutorial walks you through how to create a custom RSS route using dynamic\nrouting, as well as a Handlebars template for your RSS feed that is fully\noptimised for a podcast and iTunes. \n\nAdd a new route for your RSS feed\nThe first thing to do is add a new route where your RSS feed will exist in the\nusing the dynamic routing layer in Ghost. Download the most up to date version\nof your routes.yaml  file from Ghost Admin settings menu and open it in your\ncode editor of choice. \n\nFor the purposes of this example, we're adding this to our podcast collection -\nhere's what it looks like: \n\nroutes:\n  /podcast/rss/:\n    template: podcast/rss\n    content_type: rss\n\n\nNote that this assumes we already have a collection in place for the podcast\ncontent, which would appear under collections in the routes.yaml  file like so: \n\ncollections:\n  /blog/:\n    permalink: /blog/{slug}/\n    filter: tag:blog\n  /podcast/:\n    permalink: /podcast/{slug}/\n    filter: tag:podcast\n\n\nIf you haven't yet setup your podcast content in Ghost, then you can use this\ntutorial on content collections\n[https://docs.ghost.org/tutorials/creating-content-collections/]  as a guide.\n\nCreate a new template for an iTunes RSS feed\nNow you've updated the routes.yaml, you'll need to create a new Handlebars\ntemplate in your theme. This requires a little bit of coding, but you can use\nthe example provided in this tutorial as a starting point.\n\n\n--------------------------------------------------------------------------------\n\nDefine your podcast channel for iTunes\nIn order for iTunes to understand your RSS feed, there a few basic requirements\nthat you need to include at the start of your new template, which defines the\ntype of RSS feed and some basic information about your podcast. Below is an\nexample of the required information for an iTunes podcast, which you can copy\ninto your own template and replace with necessary information: \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\" xmlns:wfw=\"http://wellformedweb.org/CommentAPI/\"\n    xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:atom=\"http://www.w3.org/2005/Atom\" xmlns:sy=\"http://purl.org/rss/1.0/modules/syndication/\"\n    xmlns:slash=\"http://purl.org/rss/1.0/modules/slash/\" xmlns:itunes=\"http://www.itunes.com/dtds/podcast-1.0.dtd\"\n    xmlns:rawvoice=\"http://www.rawvoice.com/rawvoiceRssModule/\" xmlns:googleplay=\"http://www.google.com/schemas/play-podcasts/1.0\">\n\n<channel>\n<title>{{@blog.title}}</title>\n<link>{{@blog.url}}</link>\n<description>{{@blog.description}}</description>\n<language>{{lang}}</language>\n<copyright>{{@blog.title}} Copyright {{date format=\"YYYY\"}}</copyright>\n<atom:link href=\"{{@blog.url}}/podcast/rss/\" rel=\"self\" type=\"application/rss+xml\" />\n<lastBuildDate>{{date format=\"ddd, DD MMM YYYY HH:mm:ss ZZ\"}}</lastBuildDate>\n<itunes:author>{{@blog.title}}</itunes:author>\n<itunes:summary>{{@blog.description}}</itunes:summary>\n<itunes:owner>\n    <itunes:name>Your Name</itunes:name>\n    <itunes:email>youremail@example.com</itunes:email>\n</itunes:owner>\n<itunes:explicit>clean</itunes:explicit>\n<itunes:image href=\"{{img_url @blog.icon absolute=\"true\"}}\"/>\n<itunes:category text=\"Technology\"></itunes:category>\n\n{{#get \"posts\" filter=\"tag:podcast\" include=\"tags,authors\" as |episode|}}\n    {{#foreach episode}}\n    <item>\n        <title>{{title}}</title>\n        <link>{{url absolute=\"true\"}}</link>\n        <pubDate>{{date format=\"ddd, DD MMM YYYY HH:mm:ss ZZ\"}}</pubDate>\n        <guid isPermaLink=\"false\">{{id}}</guid>\n        <category><![CDATA[ {{primary_tag}} ]]></category>\n        <description>{{custom_excerpt}}</description>\n        <content:encoded><![CDATA[ {{content}} ]]></content:encoded>\n        <enclosure url=\"{{og_description}}\" length=\"0\" type=\"audio/mpeg\"/>\n        <itunes:subtitle>{{custom_excerpt}}</itunes:subtitle>\n        <itunes:summary><![CDATA[ {{content}} ]]></itunes:summary>\n    </item>\n    {{/foreach}}\n{{/get}}\n\n</channel>\n</rss>\n\n\nYou can copy and paste this exact implementation for your site, then go ahead\nand customise it to suit your needs! There are a couple of static variables\nwhich need to be adjusted, like your name, email, and the iTunes category you\nwant to appear in.\n\nThere's also one very small hack/workaround that makes all of this work: The\nfeed requires that you specify the podcast mp3/audio file URL for each episode.\nBecause Ghost doesn't have custom fields, we can repurpose the Facebook\nDescription  field for each post to store the link to the audio file. \n\nSo wherever you upload your audio to, just paste the provided URL into the\nFacebook Description and you should be all set. \n\nUpdate routes.yaml  and your active theme\nOnce you're happy with your work, upload a new version of routes.yaml  and\nupdate your active theme in Ghost Admin to enable your new RSS feed. Once you\nhave done this, you should be able to visit the feed at /podcast/rss/  to ensure\nit's working as desired and submit it to iTunes.\n\nSummary\nSuccess! You should have implemented your very own custom iTunes RSS feed for\npodcast content on your Ghost site using dynamic routing and a Handlebars\ntemplate. Don't forget you can get more in-depth information about the\nHandlebars theme layer in Ghost in the docs\n[https://docs.ghost.org/api/handlebars-themes/].","featured":false,"created_at_pretty":"23 November, 2018","published_at_pretty":"06 December, 2018","updated_at_pretty":"06 December, 2018","created_at":"2018-11-23T08:35:45.000+00:00","published_at":"2018-12-06T10:13:53.000+00:00","updated_at":"2018-12-06T10:13:53.000+00:00","tags":[{"name":"Dynamic Routing","slug":"dynamic-routing","visibility":"public"},{"name":"Themes","slug":"themes","visibility":"public"},{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}},{"node":{"id":"Ghost__Post__5bc09b4694250c00bf9d3b0f","slug":"chronological-posts","title":"Chronological posts","excerpt":"Learn how to implement chronological content collections on your publication.","feature_image":null,"plaintext":"Posts on any index page in Ghost will be displayed in reverse chronological\norder by default, but it's possible to display posts in chronological order\nusing the data property in the routes.yaml  file. \n\nIf you have created content collections using the dynamic routing configuration\nlayer in Ghost, and would like to display your content chronologically, this can\nbe implemented using one extra line of code. \n\nCreate content collections\nIf you haven't already created a content collection, follow this tutorial first\n[https://docs.ghost.org/tutorials/creating-content-collections/]. Once you have\na functional content collection rendering a distinct section on your site with\nit's own URL structure, you will be able to transform it from reverse\nchronological to chronological using this tutorial. \n\nDownload the routes.yaml  file\nEnsure you are working with the most recent version of your routes.yaml  file by\ndownloading it from the settings in Ghost admin and opening it with any code\neditor. \n\nUse the order property in collections\nUsing the example below, let's assume that the /blog/  collection should remain\nreverse chronological, and the /podcast/  collection should be chronological:\n\ncollections:\n  /blog/:\n    permalink: /blog/{slug}/\n    filter: primary_tag:blog\n  /podcast/:\n    permalink: /podcast/{slug}/\n    filter: primary_tag:podcast\n\n\nUse the order  property with it's two parameters asc  or desc  to determine\nascending or descending order. For example:\n\ncollections:\n  /blog/:\n    permalink: /blog/{slug}/\n    filter: primary_tag:blog\n    order: desc\n  /podcast/:\n    permalink: /podcast/{slug}/\n    filter: primary_tag:podcast\n    order: asc\n\n\nImplement your collections and templates\nOnce you have set the order for your posts to be rendered for your collections,\nupload the new version of your routes.yaml  file back into the settings in Ghost\nadmin. If you've made any changes to templates or CSS, ensure you also upload\nthe latest version of your theme as a .zip. \n\nWhen this is done, check your publication to ensure the index page of the\ncollection you wanted to render in chronological order is working as expected. \n\nSummary\nIn this tutorial you have successfully rendered chronological content in one or\nmore collections on your site. It's possible to do this with any distinct\nsections of content on a Ghost publication as required.","featured":false,"created_at_pretty":"12 October, 2018","published_at_pretty":"12 October, 2018","updated_at_pretty":"06 February, 2019","created_at":"2018-10-12T13:01:58.000+00:00","published_at":"2018-10-12T13:45:13.000+00:00","updated_at":"2019-02-06T11:23:39.000+00:00","tags":[{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"},{"name":"Dynamic Routing","slug":"dynamic-routing","visibility":"public"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}},{"node":{"id":"Ghost__Post__5bad0adbf193d500bfd5b41d","slug":"change-url-for-tags-authors","title":"Change the URL for tags and authors","excerpt":"Adjust the URL structure of your tag and author taxonomies using dynamic routing and custom templates.\n","feature_image":"https://docs.ghost.io/content/images/2018/10/dynamic-routing-2.svg","plaintext":"A taxonomy is used to group things together based on a common relation. In\nGhost, a taxonomy is used to group posts together by the author  of the post, or\nthe tags  used for a post and you can adjust the URL structure of your taxonomy\nwith a few lines of code ⚡\n\nOverview️\nBy default, Ghost will create permalinks for each taxonomy value, so there is be\na unique URL for each author and for each tag, featuring all of the content that\nmatches the slug. \n\nTaxonomies are also mapped to generic handlebars templates by default, but you\ncan create custom ones if required. \n\nThis tutorial shows you how to customise your taxonomy structure and templates.\n\nIf you want to merge content that matches more than one tag or author, or divide\ncontent into subsets and supersets, check out how to create a content hub using \nchannels [/tutorials/building-a-content-hub/]. Define your taxonomies in the routes.yaml  file\nDownload your routes.yaml  file from the settings in Ghost admin or locate the\nfile on your server and open it in any code editor.\n\nThis file is split into three sections, and for this tutorial you'll be using\nthe \"taxonomies\" section - read more about dynamic routing\n[https://docs.ghost.org/concepts/routing/].\n\nThe default taxonomy configuration routes.yaml  file looks like this: \n\ntaxonomies: \n  tag: /tag/{slug}\n  author: /author/{slug}\n\n\nThis standard configuration must be present in the taxonomy configuration in\norder for these pages to work, and will return 404 errors when removed. \n\nThe taxonomies can be adjusted to suit your publication's needs by changing the\npermalink structure. In the following example, the publication is a podcast\nfocussed website: \n\ntaxonomies:\n  tag: /topic/{slug}\n  author: /host/{slug}\n\n\n\n\nCreate custom templates in your theme\nDepending on which theme you are using, your taxonomies will use the available\nstandard template to render each taxonomy permalink. This is usually index.hbs \nor default.hbs. \n\nFollowing the previous example, it may be more fitting to create entirely\ncustomised handlebars templates determine what data to fetch and how to render\neach taxonomy in a unique way. \n\nIn this case, create new theme templates using the file name: tag-technology.hbs \n or author-lewis-carroll.hbs. The URL is rendered like so: \n\n * https://yoursite.com/topic/technology/ renders tag-technology.hbs\n * https://example.com/host/lewis-carroll/ renders author-lewis-carroll.hbs\n\nThis gives you the flexibility to completely customise the index page for any\nparticular tag or author within your publication.\n\nFor more information about handlebars themes and creating a custom template,\ncheck out the theme documentation\n[https://docs.ghost.org/api/handlebars-themes/]  to find out more!\n\nImplement your taxonomies and templates\nOnce you've finished working on the routes.yaml  file, your handlebars templates\nand any necessary adjustments to your CSS files, upload your work in Ghost admin\nfor it to take effect.\n\n 1. Upload your edited routes.yaml  file containing new taxonomy configuration\n 2. Upload your new theme files including CSS in a .zip  \n 3. Visit one of your new taxonomy URLs and check they render correctly\n\nSummary\nYou've successfully updated your taxonomies and permalinks for tags and authors\non your Ghost publication. Don't forget that custom templates and CSS can be\nused to render unique content for any particular tag or author that you use now\nand in the future!","featured":false,"created_at_pretty":"27 September, 2018","published_at_pretty":"12 October, 2018","updated_at_pretty":"23 October, 2018","created_at":"2018-09-27T16:52:43.000+00:00","published_at":"2018-10-12T12:30:33.000+00:00","updated_at":"2018-10-23T08:16:01.000+00:00","tags":[{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"},{"name":"Dynamic Routing","slug":"dynamic-routing","visibility":"public"}],"authors":[{"name":"Sarah Frantz","slug":"sarah"}]}},{"node":{"id":"Ghost__Post__5bc04cc994250c00bf9d398c","slug":"building-a-content-hub","title":"Creating content hubs","excerpt":"The dynamic routing configuration layer in Ghost unlocks the ability to create paginated content hubs called channels.","feature_image":null,"plaintext":"The dynamic routing configuration layer in Ghost unlocks the ability to create\npaginated content hubs called channels. These can be implemented without\nchanging the individual URL of the posts, and provide an efficient way to divide\nor combine existing tagged content on your Ghost publication with a few lines of\ncode.\n\nOverview\nContent views are created using the controller  property in the routes.yaml \nfile. The controller property has one supported value: channel.\n\nA filter  is used in combination with the controller: channel  configuration to\nselect a specific list of posts for display using the {{posts}}  template\nvariable. \n\nThis tutorial goes through the steps required to create a content view or\n\"channel\" using the controller  property. \n\nBuilding content views with controller: channel  does not change the individual\nURL of any posts or pages. To create a content collection with unique URL\nstructures, check out this tutorial\n[https://docs.ghost.org/tutorials/creating-content-collections/]!\n\nCreate routes and channels in the routes.yaml  file\nDownload your routes.yaml  file from the settings in Ghost admin or locate the\nfile on your server and open it in any code editor.\n\nThis file is split into three areas, and for this tutorial you'll be using the\n\"routes\" section - read more about dynamic routing\n[https://docs.ghost.org/concepts/routing/]  and the routes.yaml  file.\n\nFirst of all, create new routes from which you want your content view to be\nindexed, and then use the controller  and filter  properties to define those\nroutes. Use the following structure: \n\nroutes:\n  /route/description/:\n    controller: channel\n    filter: tag:x+tag:y\n\n\nUsing filters\nFilters can be used in numerous ways to divide or combine both the tags and\nauthors of a post or page. Here's a full guide of the parameters for the filter \nproperty: \n\nfilter: tag:x+tag:y # must have both \"x\" and \"y\" tags (+ = AND)\nfilter: tag:x,tag:y # can have either \"x\" or \"y\" tags (, = OR)\nfilter: tag:-x+tag:y # must have tag \"y\" but not tag \"x\" (- = NOT)\nfilter: tag:[x,y,z] # must have either \"x\", \"y\", or \"z\" tags ([] = IN)\nfilter: tag:-[x,y,z] # must not have any one of \"x\", \"y\", or \"z\" tags (-[] = NOT IN)\nfilter: author:steve+tag:x # must be written by \"steve\" and have tag \"x\"\n\n\nExample\nIn the following example, two content hubs are being created for \n/reviews/mobile/  and /reviews/photography/. Let's imagine this publication\nposts reviews, news and other content about technology, and they want to create\ntwo views of content for reviews of phones and reviews of photography gear: \n\nroutes:\n  /reviews/mobile/:\n    controller: channel\n    filter: tag:review+tag:mobile\n  /reviews/photography/:\n    controller: channel\n    filter: tag:review+tag:camera\n\n\nIn this case, all posts or pages tagged with review and mobile will appear on \n/reviews/mobile/  and all posts or pages tagged with review and camera will\nappear on /reviews/photography/. Individual posts will still keep their original\nURL, for example, example.com/post-name  or example.com/blog/post-name/ \ndepending on the configuration of any other routes or collections\n[https://docs.ghost.org/tutorials/creating-content-collections/]. \n\nThis is just one working example for the purposes of the tutorial. You can\ndivide or combine content on your site in almost any way you need using tags,\nauthors and the filter property.\n\nMap your channels to a template\nOnce you are happy with your new routes and filters, the last thing you'll need\nto add to routes.yaml  is the template  property, to map your new content hub(s)\nto a handlebars template within your theme. \n\nFollowing the same example from above, the structure would be: \n\nroutes:\n  /reviews/mobile/:\n    controller: channel\n    filter: tag:review+tag:mobile\n    template: reviews\n  /reviews/photography/:\n    controller: channel\n    filter: tag:review+tag:camera\n    template: reviews\n\n\nThis would map both of the new channel routes to the template called reviews.hbs\n, which could be a custom template specifically the purposes of featuring\nreviews in their own content hub. \n\nCreate a custom template for your channel\nIf you'd like to use custom data and styling on your new content hub, you'll\nneed to create a new template from scratch. For further information about\ncreating custom templates, visit the handlebars theme documentation\n[https://docs.ghost.org/api/handlebars-themes/]!\n\nIf you don't want to use a custom template, you can use your theme's default\ntemplate for an index page or list of posts, which is usually called index.hbs.\n\nNavigation\nIn order to add a feature a link to your new content hubs from your site, try\nadding some links into the navigation, which can be found in the \"design\" menu\nin Ghost admin. Alternatively, you may want to provide links to your new pages\nfrom a custom home page or a static page\n[https://docs.ghost.org/tutorials/custom-home-page/]  on your site directly in\nthe page's template. \n\nImplement your channels and templates\nAlmost at the finish line. Once you've finished editing your routes.yaml  file,\ncreated optional handlebars templates and made any necessary adjustments to your\nCSS files, you can upload your work to your site in Ghost admin.\n\n 1. Upload your edited routes.yaml  file\n 2. Upload your new theme .zip  containing any new templates and CSS\n 3. Visit the new routes you created and ensure your content is rendering\n    correctly and your filters are passing through the correct posts and pages\n\nSummary\nIn this tutorial you have created one or more channels for your publication that\ncan be viewed like content hubs at a designated route. Each new content view has\nits own paginated index page and optional custom template, while the URL\nstructure for individual posts remains the same. \n\nNow you know the most efficient way to build a content hub on your site without\naltering the URL structure, and you can replicate this with new filter\ncombinations and templates as required.","featured":false,"created_at_pretty":"12 October, 2018","published_at_pretty":"12 October, 2018","updated_at_pretty":"07 November, 2018","created_at":"2018-10-12T07:27:05.000+00:00","published_at":"2018-10-12T10:49:10.000+00:00","updated_at":"2018-11-07T09:21:20.000+00:00","tags":[{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"},{"name":"Dynamic Routing","slug":"dynamic-routing","visibility":"public"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}},{"node":{"id":"Ghost__Post__5bad0b64f193d500bfd5b425","slug":"creating-content-collections","title":"Building content collections with distinct routes","excerpt":"Split your site into distinct sections to support different content types or topics using collections.","feature_image":"https://docs.ghost.io/content/images/2018/10/dynamic-routing-4.svg","plaintext":"Split your site into distinct sections to support different content types or\ntopics using collections.\n\nOverview\nCollections allow you to create groups of posts that match a filter, with unique\npermalinks, and an index URL where all posts within that collection are listed\nand paginated.\n\nIt's possible to have a single collection that contains all posts, or multiple\ncollections for distinct areas, content types or topics. \n\nContent collections are created using the dynamic routing configuration layer,\nand allow you to create unique areas within your publication that have entirely\ndifferent URL structures, templates, RSS feeds, design and behaviour. \n\nThis can be achieved by editing the routes.yaml  file, creating new handlebars\ntemplates in your theme, and using tags [https://docs.ghost.org/concepts/tags/] \nin your post content to determine which collection each piece of content lives\nin.\n\nThis tutorial walks you through the process of setting up custom collections. \n\nIf you want to build custom views of content on your publication without\nchanging the route, learn how create content hubs using channels in this\ntutorial [https://docs.ghost.org/tutorials/building-a-content-hub/].Create\ncollections in the routes.yaml  file\nA collection can be defined in the flexible dynamic routing layer in Ghost.\nDownload your routes.yaml  file from the settings in Ghost admin or locate the\nfile on your server and open it in any code editor. \n\nThis file is split into three sections, and for this tutorial you'll be using\nthe \"collections\" section – read more about dynamic routing\n[https://docs.ghost.org/concepts/routing/].\n\nIn this example, two collections are being created for /blog/  and /podcast/ \ncollections. \n\nPermalinks\nCollections are mapped to a permalink, for example:\n\ncollections:\n  /blog/:\n    permalink: /blog/{slug}/  \n  /podcast/:\n    permalink: /podcast/{slug}/\n\n\n\nFilters\nIn order to ensure content can be tagged effectively, use the filter property,\nfor example: \n\ncollections:\n  /blog/:\n    permalink: /blog/{slug}/\n    filter: tag:blog+tag:-podcast\n  /podcast/:\n    permalink: /podcast/{slug}/\n    filter: tag:podcast+tag:-blog\n\n\nThis configuration will allow you to filter your posts and pages that you would\nlike to belong in a particular collection using tags in the editor. \n\nTip: you can use the  full range of data properties  to fetch resources using\nGhost’s API.When a post matches the filter property in a collection, it will\ndefine the routing or the URL for that post or page. For example, if a post has\nthe tag blog  then the URL for the post will become \nyoursite.com/blog/{post-name}. When it matches the podcast filter it will become\n yoursite.com/podcast/{post-name}.\n\nIn the current beta version of Dynamic Routing, it's necessary to specify the\ninverse of filters using -.\n\nTemplates\nEach collection can be completely unique in terms of what data is used and how\nthe content is rendered on your site using the Ghost theme layer. If no template\nproperty is specified in the routes.yaml  file, then it will default to the name\nof the collection. \n\nIt is also possible to map collection to a template using the property, which is\nuseful if you want to use a partial template to render a collection, for\nexample:\n\ncollections:\n  /blog/:\n    permalink: /blog/{slug}/\n    filter: tag:blog+tag:-podcast\n  /podcast/:\n    permalink: /podcast/{slug}/\n    filter: tag:podcast+tag:-blog\n    template: podcast/video\n\n\n\nCreate a template for your collection\nTo render unique content on your static pages, create different templates for\neach page. In the collections  example above, the outcome would be to render the\ntemplates like so:\n\n * https://yoursite.com/blog 👉 blog.hbs\n * https://yoursite.com/podcast/ 👉 podcast/video.hbs\n\nIf the template is not found then the fallback template is used instead, for\nexample post.hbs  or default.hbs.\n\nCreate new templates for your new collections, using the name of the collection\nfor the template file name. If you need further help creating a custom template,\nvisit the handlebars theme documentation\n[https://docs.ghost.org/api/handlebars-themes/]  to find out more!\n\nThis method of mapping content in a collection to a template gives you the\nflexibility to create content within the Ghost editor and then use tags to\ndefine the collection, and render each section on your site in any way you like.\n \n\nNavigation\nSince each collection that you create is going to have it's own index URL, such\nas yoursite.com/podcast, you will need to ensure that you create a navigation\nitem for your collection so that it appears on your site. The navigation for\nGhost content can be edited in the \"design\" menu in Ghost admin. \n\nUse tags to define a collection for your posts\nIn order for content to appear inside each of your collections, you'll need to\ntag some posts or pages in the editor with the correct tags. \n\nUsing the tags you specified earlier using the filter  property in your \nroutes.yaml  file, tag some of your posts so that you can test that your\ncollections are working as expected in the next step. \n\nThe order that collections are listed in routes.yaml  is important. Posts will\nonly exist in one collection, which is always the first filter it matches with.\nBe mindful of this when creating three or more collections for your site. \nImplement your collections and templates\nGreat work! Once you've finished editing your routes.yaml  file with new\ncollections, created some handlebars templates and made any necessary\nadjustments to your CSS files, the final thing to do is to get your new\ncollections live on your site 🎉\n\n 1. Upload your edited routes.yaml  file in Ghost admin\n 2. Upload your new theme .zip  containing new templates and CSS in Ghost admin\n 3. Visit your site and ensure your new collections render correctly\n\nSummary\nIn this tutorial you have created one or more custom collections of content that\nwill live inside their own unique section on your site, and be rendered using\nindividual templates. Use this process to set up as many collections as\nrequired!","featured":true,"created_at_pretty":"27 September, 2018","published_at_pretty":"12 October, 2018","updated_at_pretty":"23 October, 2018","created_at":"2018-09-27T16:55:00.000+00:00","published_at":"2018-10-12T06:26:51.000+00:00","updated_at":"2018-10-23T08:17:21.000+00:00","tags":[{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"},{"name":"Dynamic Routing","slug":"dynamic-routing","visibility":"public"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}},{"node":{"id":"Ghost__Post__5bad0a7df193d500bfd5b415","slug":"custom-home-page","title":"Creating a custom home page","excerpt":"Create entirely customised static content on your publication's home page with dynamic routing and custom themes!","feature_image":"https://docs.ghost.io/content/images/2018/10/dynamic-routing-5.svg","plaintext":"When you first spin up an instance of Ghost, your home page renders the\npublication's content on the root domain. If this doesn't suit your needs, it is\nentirely possible to create a static custom home page instead 🎉\n\nThere really is no limit to what you can put on a static home page. Whether you\nneed to explain what your publication is all about, or provide a hub with quick\nlinks to different sections of your site. It's totally up to you! \n\nOverview\nSetting up a custom home page involves configuring the routes in your \nroutes.yaml  file, as well as creating a custom template in your theme. The end\nresult is a unique static page on your /  root domain. \n\nThis tutorial walks you through the entire setup process for setting up custom\nstatic pages using the Ghost theme layer and dynamic routing. \n\nSingle route template configuration\nA single route can be defined in the flexible dynamic routing layer. In the Labs\npage in Ghost admin, download your routes.yaml  file and open it in any code\neditor. \n\nThis file is split into three sections, and for this tutorial you'll be using\nthe \"routes\" section - read more about dynamic routing\n[https://docs.ghost.org/concepts/routing/].\n\nSingle routes are mapped to a template, for example:\n\nroutes:\n  /: home\n\n\nIf you have more than one custom static page, then you can replicate the process\nand list all single routes and respective templates on a new line: \n\nroutes:\n  /: home\n  /about/: about\n  /subscribe/: subscribe\n\n\nThis configuration allows you to create unique content and templates for each\nsingle route using the Ghost theme layer. \n\nCreate a template for each static URL\nTo render unique content on your static pages, create different templates for\neach page. In the routes  example above, the outcome would be to render the\nspecified template: \n\n * https://yoursite.com/ 👉 home.hbs  \n * https://yoursite.com/about/ 👉 about.hbs  \n * https://yoursite.com/subscribe/ 👉 subscribe.hbs  \n\nIf the template is not found then the fallback template is used instead, for\nexample index.hbs  or default.hbs.\n\nCreate new templates for your new home page or static pages. If you need further\nhelp creating a custom template, visit the theme documentation\n[https://docs.ghost.org/api/handlebars-themes/]  to find out more! \n\nThis method of creating content on a static URL allows you to completely render\nyour content and design from the handlebars template and CSS files, without\nusing posts or the Ghost editor. Check out the custom template tutorial\n[https://docs.ghost.org/tutorials/custom-page-templates]  to find out how to\nfetch dynamic content from Ghost and render it on a static URL. \n\nUsing the data attribute\nWhen rendering a route that is not /  there is no implicit context\n[https://docs.ghost.org/api/handlebars-themes/context/]  but you can use the \ndata  attribute [https://docs.ghost.org/concepts/routing/#data]  on the route to\nfetch resources using Ghost’s API, for example: \n\nroutes:\n  /:\n    data: page.home\n    template: home\n  /about/careers/:\n    data: page.careers\n    template: careers\n  /about/team/:\n    data: page.team\n    template: team\n\n\nIt's also possible to use the {{get}} [https://themes.ghost.org/docs/get]  \nhelper [https://docs.ghost.org/api/handlebars-themes/helpers/get/]  in the\nroute's template to fetch any dynamic content that you want to render.\n\nNavigation considerations\nSince each static page that you create is unique, it's important to ensure you\nbuild in some site navigation to your new templates for each static page. The\nnavigation for Ghost content and collections can be edited in the Design menu in\nGhost admin. \n\nImplement your routes and templates\nOnce you have finished editing the routes.yaml  file, created your new\nhandlebars templates and made any necessary adjustments to your CSS files, it's\ntime to get your new custom home page or static pages live on your site. \n\n 1. Upload your edited routes.yaml  file in Ghost admin\n 2. Upload your new theme .zip  containing new templates and CSS in Ghost admin\n 3. Visit your site and ensure your new static pages render correctly\n\nSummary\nNice work! You've figured out how to create a custom static home page for your\nGhost publication, where you can render any content and design required from\nyour theme. This same process can be repeated to create multiple static pages to\nsuit your needs.","featured":false,"created_at_pretty":"27 September, 2018","published_at_pretty":"04 October, 2018","updated_at_pretty":"03 February, 2019","created_at":"2018-09-27T16:51:09.000+00:00","published_at":"2018-10-04T13:53:41.000+00:00","updated_at":"2019-02-03T08:40:42.000+00:00","tags":[{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"},{"name":"Dynamic Routing","slug":"dynamic-routing","visibility":"public"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}},{"node":{"id":"Ghost__Post__5b8803ae2ffffa00bfa11454","slug":"multi-language-content","title":"Multi-language content","excerpt":"By configuring collections and templates you can support multi-language content on your site. This means you can have each language run on a unique URL.","feature_image":"https://docs.ghost.io/content/images/2018/10/dynamic-routing-6.svg","plaintext":"Using Ghost's dynamic routing configuration layer, your site can support\nmulti-lingual content served across unique URLs with SEO-friendly, semantic\ntemplates. This means you can have each language run on it's own URL, for\nexample example.com  for English content and example.com/de  for German content.\n \n\nSetting up multi-language content involves configuring collections in your \nroutes.yaml  file, as well as creating different templates in your theme for\neach collection. \n\nThis tutorial walks you through the entire setup process for a multi language\nsite using the Ghost theme layer including configuring the routes.yaml  and\ncreating templates for each language.\n\nConfigure collections for each language\nFirst of all, configure your routes.yaml  file to include collections for each\ndesired language. In the Labs page in Ghost admin, download your routes.yaml \nfile and open it in any code editor. \n\nThis file is split into three sections, and for this tutorial we will be using\nthe \"collections\" section. Read more about dynamic routing in the core concepts\n[https://docs.ghost.org/concepts/routing/].\n\nHere is an example of the code required to create a collection for German\ncontent: \n\nroutes:\n\ncollections:\n  /:\n    permalink: /{slug}/\n    filter: 'tag:-de'\n  /de/:\n    permalink: /de/{slug}/\n    filter: 'tag:de'\n\ntaxonomies:\n  tag: /tag/{slug}/\n  author: /author/{slug}/\n\n\nThis configuration will allow you to filter your posts and pages that contain\nmulti-language content using tags in the editor. \n\n> Note: in the current beta version of Dynamic Routing, it's necessary to specify\nthe inverse of filters using -.\nCreate templates for each collection\nOnce your collections are in place, you'll need to create different templates\nfor each collection and define html lang  attributes in those templates, for\nexample: \n\nindex.hbs  \n<html lang=\"en\">  \n\nde.hbs\n<html lang=\"de\">  \n\nIf you need further help creating a custom template, visit the theme\ndocumentation [https://docs.ghost.org/api/handlebars-themes/]  for more detailed\ninformation about working with the Ghost theme layer. \n\nFinally, update your post template to ensure the correct template is used for\neach collection, for example: \n\npost.hbs\n\n{{#post}}\n  {{#has tag=\"de\"}}\n    <html lang=\"de\">\n  {{else}}\n    <html lang=\"en\">\n  {{/has}}\n{{/post}} \n\n\nImplement your collections and templates\nOnce you have finished editing the routes.yaml  file, created your new\nhandlebars templates and made any necessary adjustments to your CSS files, it's\ntime to get your new multi-language collections up and running. \n\n 1. Upload your edited routes.yaml  file in Ghost admin\n 2. Upload your new theme .zip  containing new templates and CSS in Ghost admin\n 3. Visit your site and ensure your multi-language content renders correctly\n\nSummary\nThis same process can be repeated to create multiple collections for different\nlanguages as required and you can use the new templates you create to determine\nhow the content for each language specific collection should render.","featured":true,"created_at_pretty":"30 August, 2018","published_at_pretty":"30 August, 2018","updated_at_pretty":"06 February, 2019","created_at":"2018-08-30T14:48:14.000+00:00","published_at":"2018-08-30T14:51:08.000+00:00","updated_at":"2019-02-06T11:28:15.000+00:00","tags":[{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"},{"name":"Dynamic Routing","slug":"dynamic-routing","visibility":"public"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}}]}},"pageContext":{"tagSlug":"dynamic-routing","tagName":"Dynamic Routing","tagURL":"/tutorials/dynamic-routing/","tagDescription":null,"tagImage":null,"tagMetaTitle":null,"tagMetaDescription":null,"section":"tutorials"}}