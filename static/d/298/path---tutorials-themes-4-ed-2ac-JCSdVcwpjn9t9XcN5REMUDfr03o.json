{"data":{"site":{"siteMetadata":{"siteUrl":"http://ghost.local:8000","title":"vwa.la help","description":"Everything you need to know about the vwa.la influencer marketing platform."}},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5bf7bbe19b2bb500c059a78c","slug":"custom-rss-feed","title":"How to make an iTunes Podcast RSS feed with Ghost","excerpt":"Ghost comes with automatic RSS feeds for your content, but you can also create a\ncustom feed using the flexible dynamic routing layer to support specific content\ntypes, like videos and podcasts.\n\nAdding /rss/  to most URLs in Ghost produces an automatically generated RSS feed\nfor your content. If you're publishing a podcast on your Ghost site then you'll\nprobably want to create a custom RSS feed to distribute your podcast episodes to\nplaces like iTunes. \n\nThis tutorial walks you through how to c","feature_image":null,"plaintext":"Ghost comes with automatic RSS feeds for your content, but you can also create a\ncustom feed using the flexible dynamic routing layer to support specific content\ntypes, like videos and podcasts.\n\nAdding /rss/  to most URLs in Ghost produces an automatically generated RSS feed\nfor your content. If you're publishing a podcast on your Ghost site then you'll\nprobably want to create a custom RSS feed to distribute your podcast episodes to\nplaces like iTunes. \n\nThis tutorial walks you through how to create a custom RSS route using dynamic\nrouting, as well as a Handlebars template for your RSS feed that is fully\noptimised for a podcast and iTunes. \n\nAdd a new route for your RSS feed\nThe first thing to do is add a new route where your RSS feed will exist in the\nusing the dynamic routing layer in Ghost. Download the most up to date version\nof your routes.yaml  file from Ghost Admin settings menu and open it in your\ncode editor of choice. \n\nFor the purposes of this example, we're adding this to our podcast collection -\nhere's what it looks like: \n\nroutes:\n  /podcast/rss/:\n    template: podcast/rss\n    content_type: rss\n\n\nNote that this assumes we already have a collection in place for the podcast\ncontent, which would appear under collections in the routes.yaml  file like so: \n\ncollections:\n  /blog/:\n    permalink: /blog/{slug}/\n    filter: tag:blog\n  /podcast/:\n    permalink: /podcast/{slug}/\n    filter: tag:podcast\n\n\nIf you haven't yet setup your podcast content in Ghost, then you can use this\ntutorial on content collections\n[https://docs.ghost.org/tutorials/creating-content-collections/]  as a guide.\n\nCreate a new template for an iTunes RSS feed\nNow you've updated the routes.yaml, you'll need to create a new Handlebars\ntemplate in your theme. This requires a little bit of coding, but you can use\nthe example provided in this tutorial as a starting point.\n\n\n--------------------------------------------------------------------------------\n\nDefine your podcast channel for iTunes\nIn order for iTunes to understand your RSS feed, there a few basic requirements\nthat you need to include at the start of your new template, which defines the\ntype of RSS feed and some basic information about your podcast. Below is an\nexample of the required information for an iTunes podcast, which you can copy\ninto your own template and replace with necessary information: \n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\" xmlns:wfw=\"http://wellformedweb.org/CommentAPI/\"\n    xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:atom=\"http://www.w3.org/2005/Atom\" xmlns:sy=\"http://purl.org/rss/1.0/modules/syndication/\"\n    xmlns:slash=\"http://purl.org/rss/1.0/modules/slash/\" xmlns:itunes=\"http://www.itunes.com/dtds/podcast-1.0.dtd\"\n    xmlns:rawvoice=\"http://www.rawvoice.com/rawvoiceRssModule/\" xmlns:googleplay=\"http://www.google.com/schemas/play-podcasts/1.0\">\n\n<channel>\n<title>{{@blog.title}}</title>\n<link>{{@blog.url}}</link>\n<description>{{@blog.description}}</description>\n<language>{{lang}}</language>\n<copyright>{{@blog.title}} Copyright {{date format=\"YYYY\"}}</copyright>\n<atom:link href=\"{{@blog.url}}/podcast/rss/\" rel=\"self\" type=\"application/rss+xml\" />\n<lastBuildDate>{{date format=\"ddd, DD MMM YYYY HH:mm:ss ZZ\"}}</lastBuildDate>\n<itunes:author>{{@blog.title}}</itunes:author>\n<itunes:summary>{{@blog.description}}</itunes:summary>\n<itunes:owner>\n    <itunes:name>Your Name</itunes:name>\n    <itunes:email>youremail@example.com</itunes:email>\n</itunes:owner>\n<itunes:explicit>clean</itunes:explicit>\n<itunes:image href=\"{{img_url @blog.icon absolute=\"true\"}}\"/>\n<itunes:category text=\"Technology\"></itunes:category>\n\n{{#get \"posts\" filter=\"tag:podcast\" include=\"tags,authors\" as |episode|}}\n    {{#foreach episode}}\n    <item>\n        <title>{{title}}</title>\n        <link>{{url absolute=\"true\"}}</link>\n        <pubDate>{{date format=\"ddd, DD MMM YYYY HH:mm:ss ZZ\"}}</pubDate>\n        <guid isPermaLink=\"false\">{{id}}</guid>\n        <category><![CDATA[ {{primary_tag}} ]]></category>\n        <description>{{custom_excerpt}}</description>\n        <content:encoded><![CDATA[ {{content}} ]]></content:encoded>\n        <enclosure url=\"{{og_description}}\" length=\"0\" type=\"audio/mpeg\"/>\n        <itunes:subtitle>{{custom_excerpt}}</itunes:subtitle>\n        <itunes:summary><![CDATA[ {{content}} ]]></itunes:summary>\n    </item>\n    {{/foreach}}\n{{/get}}\n\n</channel>\n</rss>\n\n\nYou can copy and paste this exact implementation for your site, then go ahead\nand customise it to suit your needs! There are a couple of static variables\nwhich need to be adjusted, like your name, email, and the iTunes category you\nwant to appear in.\n\nThere's also one very small hack/workaround that makes all of this work: The\nfeed requires that you specify the podcast mp3/audio file URL for each episode.\nBecause Ghost doesn't have custom fields, we can repurpose the Facebook\nDescription  field for each post to store the link to the audio file. \n\nSo wherever you upload your audio to, just paste the provided URL into the\nFacebook Description and you should be all set. \n\nUpdate routes.yaml  and your active theme\nOnce you're happy with your work, upload a new version of routes.yaml  and\nupdate your active theme in Ghost Admin to enable your new RSS feed. Once you\nhave done this, you should be able to visit the feed at /podcast/rss/  to ensure\nit's working as desired and submit it to iTunes.\n\nSummary\nSuccess! You should have implemented your very own custom iTunes RSS feed for\npodcast content on your Ghost site using dynamic routing and a Handlebars\ntemplate. Don't forget you can get more in-depth information about the\nHandlebars theme layer in Ghost in the docs\n[https://docs.ghost.org/api/handlebars-themes/].","featured":false,"created_at_pretty":"23 November, 2018","published_at_pretty":"06 December, 2018","updated_at_pretty":"06 December, 2018","created_at":"2018-11-23T08:35:45.000+00:00","published_at":"2018-12-06T10:13:53.000+00:00","updated_at":"2018-12-06T10:13:53.000+00:00","tags":[{"name":"Dynamic Routing","slug":"dynamic-routing","visibility":"public"},{"name":"Themes","slug":"themes","visibility":"public"},{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}},{"node":{"id":"Ghost__Post__5bed2c8751461600ccb3a341","slug":"google-custom-search","title":"Add Google Custom Search to Ghost","excerpt":"Discover how to add a search functionality to your Ghost publication with the free Google Custom Search tool!","feature_image":null,"plaintext":"Add search functionality to your Ghost publication and allow your readers to\nfind exactly what they are looking for\n\nOverview\nAdding search to your Ghost publication gives your readers an additional way to\nnavigate your content and improves engagement. It's possible to add a sensible\nsearch function using the free Google Custom Search\n[https://cse.google.com/cse/]  tool.\n\nThis is possible using the Handlebars theme layer - by using the code provided\nby Google Custom Search in your theme files. This tutorial will show you how to\nimplement site search on your Ghost publication.\n\nIf you're looking for a free tool to add site search then this is an ideal\nsolution. However it's important to note that it does come with some limitations\nwith search functionality, custom styles and ads.Create a new search engine in\nthe Google Custom Search tool\nLogin to the Google Custom Search tool using Google credentials and create a new\nsearch engine. Enter the domain for your Ghost site: \n\nCopy the code provided\nOnce you've entered your domain and any other custom settings required (useful\nif you want to only search certain parts of your site, or exclude pages), grab\nthe code for your new search function: \n\nAdd the code to your theme files\nThis code can be pasted any where in Ghost depending on how you'd like to render\nyour search box - this could be in your posts, on specific pages or across your\nwhole site. \n\nOpen your theme files in your code editor of choice and find the best spot for\nyour search bar. Â For the purposes of this example, we're going to put the code\ninto the index.hbs, directly below the header and above the main content area: \n\nIt's a good idea to make one small modification to the code provided by the\nGoogle Custom Search tool, which is to add a <div>  around \n<gcse:search></gcse:search>  so that you can add some custom CSS later if\nrequired. \n\nCustomise your search bar\nThe Google Custom Search tool gives you plenty of customisation options within\nthe dashboard once you have created your search engine. It's advisable to spend\nsome time navigating around all of the options available to you so that you\nunderstand the full capabilities and limitations of using this tool to implement\nsearch on your Ghost publication. \n\nYou can style the way the search bar and the results looks, and add or remove\nthe Google branding. There are also several options to customise the behaviour\nof your search functionality. The tool gives a preview so that you can see the\nresults as you make adjustments and you can come back to this any time and\nupdate it.\n\nUpdate your active theme\nBy now you should have added the code snippet to your theme files and started\ncustomising the behaviour and style of your search engine. Now it's time to give\nthis thing a test run. \n\nSave your updated theme files and upload the .zip  file in the design menu in\nGhost Admin. You should now be able to see the search bar on your site! \n\nHere's an example of what an implementation of Google Custom Search looks like\non Coding Horror [https://blog.codinghorror.com/]: \n\nFurther customisation\nSince we're inserting Google's tool via a script, there are two ways that you\ncan adjust the way it appears on your site. First of all you can go back into\nthe customisation menu on the Google Custom Search dashboard and try different\nthemes or tweak the settings. Hit refresh and you'll be able to see these\nupdates in real time on your site.\n\nSecondly, you can style the search bar yourself with HTML and CSS. Since we\nadded a <div>  to the code earlier, you can add some custom CSS to the \nscreen.css  file in your theme. For example: \n\n.gse-searchbox {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin: 0 auto;\n    max-width: 400px;\n}\n\nThe rest is up to you! Always remember to update the active theme in Ghost Admin\neach time you are ready to ship changes to your CSS files ð§\n\nSummary\nYou've completed the tutorial and hopefully deployed a search box on your Ghost\npublication, powered by Google's custom search tool. Your search bar can be\nadded to any post or page on your site repeating the same process and adding the\ncode into the relevant Handlebars template files. Don't forget you can use the \nHandlebars documentation [https://docs.ghost.org/api/handlebars-themes/] \nanytime to learn more about themes!","featured":false,"created_at_pretty":"15 November, 2018","published_at_pretty":"15 November, 2018","updated_at_pretty":"15 November, 2018","created_at":"2018-11-15T08:21:27.000+00:00","published_at":"2018-11-15T12:04:42.000+00:00","updated_at":"2018-11-15T12:04:42.000+00:00","tags":[{"name":"Themes","slug":"themes","visibility":"public"},{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}},{"node":{"id":"Ghost__Post__5be28f8b23e4db00bfbf3f9f","slug":"related-posts-block","title":"How to build a related posts block","excerpt":"Learn how to build and deploy a related posts block using partials to keep readers engaged with your content!","feature_image":null,"plaintext":"Improve your reader engagement with a related posts block for your site using\nthe flexible theme layer in Ghost.\n\nOverview\nAdding a related posts block on each post on your site is a great way to ensure\nyour readers have a positive experience and encourages them to move around your\nsite content once they land on a post.\n\nThis is possible using the Handlebars theme layer by creating a partial template\nand utilising the {{#get}}  helper\n[https://docs.ghost.org/api/handlebars-themes/helpers/get/]. This tutorial will\nwalk you through building your own related posts block ready for deployment on\nyour Ghost publication â¨\n\nAdd a partial reference to default.hbs\nThe first steps involve creating a new partial template. The /partials \ndirectory in a Ghost theme is optional, but it's a useful tool to create blocks\nof HTML that will be used between multiple templates in your theme. This reduces\ncode duplication and makes the building blocks of your theme easier to work\nwith. \n\nFirst of all, create a reference to your new partial in the relevant template(s)\nwhere you would like the block to appear, for example:\n\n...\n{{ghost_head}}\n</head>\n<body class=\"{{body_class}}\">\n  <section class=\"blog-content\">\n    {{{body}}}\n  </section>\n\n  {{> sidebar}}\n  \n  {{ghost_foot}}\n</body>\n\n\nFor the purposes of this tutorial, we're calling our partial \"sidebar\"  and\nreferencing it with {{> sidebar}}  in the defaut.hbs template. You can call your\npartial anything you like so long as it makes sense to you. In this example, you\ncan imagine that the related posts block is intended to appear in the sidebar of\nthe theme ð\n\nThis reference will usually be placed in the default.hbs, post.hbs  or page.hbs.\nThe great thing about working with partials is that they're reusable, so if you\nneed to use this content block on various templates or parts of your site, then\nyou can!\n\nCreate a partial template and add some HTML\nNext we need to create a partial template in partials/  and add some HTML to\ncreate the skeleton of our related posts block. Here's an example which exists\nin partials/sidebar.hbs:\n\n<aside class=\"blog-sidebar\">\n  <section class=\"recent-posts\">\n    <h3>Recent posts</h3>\n    <ol>\n      <li><a href=\"\"></a></li>\n    </ol>\n  </section>\n  \n  <section class=\"featured-posts\">\n    <h3>Featured posts</h3>\n    <ol>\n      <li><a href=\"\"></a></li>\n    </ol>\n  </section>\n</aside>\n\n\nFetch data to be rendered in your related posts block\nIn a Ghost theme each page belongs to a context\n[https://docs.ghost.org/api/handlebars-themes/context/], and each context\nprovides some essential data by default. When you need extra dynamic data other\nthan what the context provides, you can fetch it using the {{#get}}  helper.\nThis helper makes a custom query to the Ghost API to fetch publicly available\ndata - which is why it's so useful when used as a block helper. \n\nIt's possible to fetch a variety of data for your related posts block depending\non your requirements. Here's the most popular configurations: \n\n * Related posts by topic\n * Recently published posts\n * Featured posts\n\nAll of these configurations for a related posts block can be achieved using the \n{{#get}}  helper and are documented below:\n\nRelated posts\nThe most effective way to show posts that are related by topic in your related\nposts block is to filter by tag. For example:\n\n{{#get \"posts\" limit=\"5\" filter=\"tags:[{{post.tags}}]+id:-{{post.id}}\" include=\"tags\" as |related|}}\n{{/get}}\n\n\nThis provides up to 5 related posts that match the tags of the post the reader\nis currently on, and excludes the current post from appearing in the featured\nblock. Since these are related posts, block parameter syntax is used to name the\ndata with as |related|.\n\nRecently published posts\nThe call to the get helper to feature your most recently published posts looks\nlike this: {{#get \"posts\" limit=\"3\"}}. It's also useful to exclude the current\npost with a filter here too, and add the block parameter syntax for naming: \n\n{{#get \"posts\" limit=\"3\" filter=\"id:-{{post.id}}\" as |recents|}}\n\n\nFeatured posts\nIf you want to call posts that have been checked as featured from the Ghost\neditor in your block, use a filter parameter:\n\n{{#get \"posts\" filter=\"featured:true+id:-{{post.id}}\" limit=\"3\" as |featured|}}\n\n\nTip ð¡ the resource must always come first, and the block parameter to name the\ndata must be last â but parameters like limit  and filter  can be added in any\norder.Use the {{foreach}}  helper\nNow that you understand how to fetch the relevant data using one of the methods\nabove in your partial template, the final step is to use the {{foreach}}  helper\n[https://docs.ghost.org/api/handlebars-themes/helpers/foreach/]  to iterate the\nposts in your related posts block. For example, plugging this into the \npartials/sidebar.hbs  for featured posts will look like this: \n\n{{#get \"posts\" filter=\"featured:true\" limit=\"3\" as |featured|}}\n<section class=\"featured-posts\">\n  <h3>Featured posts</h3>\n  <ol>\n    {{#foreach featured}}\n    <li><a href=\"{{url}}\">{{title}}</a></li>\n    {{/foreach}}\n  </ol>\n</section>\n{{/get}}\n\n\nUsing {{else}}  as a fallback\nIn the event that no posts match the filter, utilise the {{else}}  helper  to\nrender alternative content and ensure that your readers aren't staring at an\nempty space. For example: \n\n{{#get \"posts\" filter=\"featured:true\" limit=\"3\" as |featured|}}\n<section class=\"featured-posts\">\n  <h3>Featured posts</h3>\n  <ol>\n    {{#foreach featured}}\n    <li><a href=\"{{url}}\">{{title}}</a></li>\n    {{/foreach}}\n  </ol>\n</section>\n{{else}}\n<p>Content for a fallback when no related posts are available.</p>\n{{/get}}\n\n\nThis is just an example. You could feature pretty much anything here as a\nfallback... link to a static page on your site, add some text that describes\nwhat your publication is all about or insert your favourite meme - you do you!\n\nImplement your new templates\nOnce you've finished creating your partial template and made any necessary\nadjustments to your CSS files, update your site's active theme to get it up and\nrunning. The easiest way to implement a new theme is to upload the .zip  file in\nGhost Admin under the Design Settings menu. \n\nSummary\nYou've completed the tutorial and hopefully deployed a neat featured image block\non your Ghost publication. Your new content block is a partial Handlebars\ntemplate which can be used across any template in your theme when required. \n\nDon't forget you can use the Handlebars documentation\n[https://docs.ghost.org/api/handlebars-themes/]  anytime to learn more about\nthemes and access a full reference list of available helpers.","featured":false,"created_at_pretty":"07 November, 2018","published_at_pretty":"08 November, 2018","updated_at_pretty":"08 November, 2018","created_at":"2018-11-07T07:08:59.000+00:00","published_at":"2018-11-08T10:34:49.000+00:00","updated_at":"2018-11-08T10:52:14.000+00:00","tags":[{"name":"Themes","slug":"themes","visibility":"public"},{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}},{"node":{"id":"Ghost__Post__5bd7009d4b8b9800bf8d3a2a","slug":"custom-amp-themes","title":"A complete guide to â¡ AMP templates in Ghost","excerpt":"Ghost ships with a clean, simple AMP template which works with just about any site, but wouldn't it be nice if you could customise it to make it perfectly match your theme and your brand?","feature_image":null,"plaintext":"Ghost ships with a clean, simple AMP template which works with just about any\nsite, but wouldn't it be nice if you could customise it to make it perfectly\nmatch your theme and your brand? Well you can! Read on:\n\nHow does AMP work in Ghost?\nGhost comes with AMP built-in, and it can be enabled or disabled (for those who\nprefer not to use it). When enabled, Ghost uses a single Handlebars template\nfile to render your AMP content. As soon as you add /amp  to the url of any post\nURL (e. g. https://www.myblog.com/welcome-to-ghost/amp), you'll see this\ntemplate file being rendered. \n\nAll blog posts also get a new canonical link, which refers to the AMP version of\nthe post: <link rel=\"amphtml\"\nhref=\"https://www.myblog.com/welcome-to-ghost/amp/\" />. This is a necessary\nlink. Without it, your AMP post will not be served from the Google AMP Cache.\n\nThe amp.hbs  template exists in the active theme directory. By default, Ghost\ncomes with an amp.hbs  template that is suitable for most publications. It can\nbe used out of the box without any extra effort or code, but it can  also be\ncustomised for additional features or styling. The structure of the file looks\nlike this:\n\nâââ /assets\n|   âââ /css\n|       âââ screen.css\n|   âââ /fonts\n|   âââ /images\n|   âââ /js\nâââ default.hbs \nâââ index.hbs [required]\nâââ post.hbs [required]\nâââ amp.hbs [optional]\nâââ package.json [required]\n\n\nBe aware of the AMP restrictions\nBefore you start developing your AMP template, it's useful to know a few things\nabout the restrictions which Google has enforced in AMP to maintain optimal\nperformance:\n\nâ¡ No client side scripts\nAMP pages can't include any client side scripts, except under special\ncircumstances. Any use of jQuery  or JavaScript  will lead to an invalid AMP\ntemplate!\n\nâ¡ Keep CSS inside <style amp-custom>\nCSS can only live in the <style amp-custom></style>  tag inside the <head> \nsection. You can use class  and id  in your HTML, but you can't use inline CSS.\nThe CSS is also size limited to 50 kilobytes. Additionally, some CSS styles are \ndisallowed  for performance.\n\nâ¡ Prohibited HTML\nAMP uses its own AMP-HTML markup language. This means that some HTML tags are\nprohibited while others need to be transformed. Ghost automatically transforms\nHTML in your {{content}}  (e. g. <img>  becomes <amp-img>) and strips out\ndisallowed tags, like embed  or frame. You can find a full list of banned HTML\ntags here.\n\nâ¡ Required AMP markup\nAMP has a few pieces of required markup  which must be used.\n\nâ¡ Links to media need https\nIf you want to load stuff externally, you'll need to use https  protocol. Ghost\ndoes this automatically for any links in your post {{content}}.\n\nâ¡ Media needs width  & height\nAll kind of media need width  and height  attributes. Again, anything being\nrendered within post {{content}}  will be handled automatically. Here's an\nexample of how you'd implement an image outside of the main content:\n\n{{#post}}\n  <amp-img src={{image absolute=\"true\"}} width=\"600\" height=\"400\" layout=\"responsive\"></amp-img>\n{{/post}}\n\n\nor the author image:\n\n{{#post}}\n\t{{#author}}\n  \t<amp-img src={{image absolute=\"true\"}} width=\"50\" height=\"50\"></amp-img>\n\t{{/author\"}}\n{{/post}}\n\n\nâ¡ Validate your template on-the-fly\nAMP provides two ways to validate your template: \n\n * The first is to add #development=1  to the URL and check for any validation\n   errors in the console. \n * The second is to copy your HTML into the online validator\n   [https://validator.ampproject.org/], but keep in mind that this will not work\n   with Ghost handlebars helpers.\n\nBuilding a custom AMP templates\nThe Google-led AMP project often add support for new features and customisation\nof your AMP content. For example, you can do cool things like edit the styling\nof your AMP content or generate revenue with advertising.\n\nThe best way to implement these features is to follow the AMP documentation\n[https://www.ampproject.org/docs/]  for the features you are interested in\nadding, and edit the amp.hbs  template in Ghost. Note that using AMP features\nthat require content from Ghost will not work. \n\nThe rest of this tutorial will walk you through the default amp.hbs  template\n[https://github.com/TryGhost/Ghost/blob/master/core/server/apps/amp/lib/views/amp.hbs] \n in Ghost and walk you through what each section contains and how it works. The\neasiest way to get started with developing your own is to use this default\ntemplate and make changes to it. Let's get to it...\n\nAMP template <head>\n<!DOCTYPE html>\n<html â¡>\n<head>\n    <meta charset=\"utf-8\">\n    <title>{{meta_title}}</title>\n    <meta name=\"description\" content=\"{{meta_description}}\" />\n    <meta name=\"HandheldFriendly\" content=\"True\" /> //required\n    <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\"> //required\n    <link rel=\"shortcut icon\" href=\"{{asset \"favicon.ico\"}}\">\n    \n    {{amp_ghost_head}}\n    \n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://fonts.googleapis.com/css?family=Merriweather:300,700,700italic,300italic|Open+Sans:700,600,400\" />\n    <style amp-custom>\n       ...\n    </style>\n    \n    <style amp-boilerplate>...</style><noscript><style amp-boilerplate>...</style></noscript>\n\n    <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n\n    {{amp_components}}\n</head>\n\n\nIf you're a theme developer, this is probably all very familiar. Here are the\nhighlights:\n\n<html â¡>\nThis makes it AMP! You can also use <html amp>, but â¡ is more awesome.\n\nRequired by AMP:\n * <meta charset=\"utf-8\">\n * <meta name=\"HandheldFriendly\" content=\"True\" />\n * <meta name=\"viewport\"\n   content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n\n{{amp_ghost_head}}\nThis helper will output the mandatory structured data and the JSON+LD  data,\njust like {{ghost_head}}  does. It also renders the necessary link to the\nregular post, which is (wait for it) required by AMP. ðð»\n\nCode injection content won't be rendered here, as this may contain additional\n<style>  and <script>  tags.\n\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://fonts.googleapis.com...\" />\nAMP does  allow the use of custom font faces.\n\n<style amp-custom>\nAll your CSS goes here. The default AMP template comes with a similar structure\nto the Casper theme. You can work with CSS classes just as you're used to. Just\nkeep in mind that there are some CSS restrictions, as mentioned above.\n\n<style amp-boilerplate>\nThis is required by AMP, and essentially outputs a few default AMP UI styles for\nanimations/etc which are mandatory. You can find the current version here\n[https://github.com/ampproject/amphtml/blob/master/spec/amp-boilerplate.md].\n\n<script async src=\"https://cdn.ampproject.org/v0.js\"></script>\nThis will load the AMP JavaScript library and is required by AMP.\n\n{{amp_components}}\nThis is a special helper which scans your {{content}}  for any extended\ncomponents [https://www.ampproject.org/docs/reference/extended.html], such as \n.gif  files, iframe-tags and audio  tags. If it finds them, it'll include\nscripts to make them work good. Yes, work good. That's what we're going with.\n\nAMP template <body>\nNow it's time to build the structure for the content:\n\n<body class=\"amp-template\">\n    {{#post}}\n    <header class=\"main-header\">\n        <nav class=\"blog-title\">\n            <a href=\"{{@blog.url}}\">{{@blog.title}}</a>\n        </nav>\n    </header>\n    <main class=\"content\" role=\"main\">\n        <article class=\"post\">\n            <header class=\"post-header\">\n                <h1 class=\"post-title\">{{title}}</h1>\n                <section class=\"post-meta\">\n                    {{#author}}\n                    <p class=\"author\">by <a href=\"{{url}}\">{{name}}</a></p>\n                    {{/author}}\n                    <time class=\"post-date\" datetime=\"{{date format=\"YYYY-MM-DD\"}}\">{{date format=\"YYYY-MM-DD\"}}</time>\n                </section>\n            </header>\n            {{#if image}}\n            <figure class=\"post-image\">\n                <amp-img src=\"{{image absolute=\"true\"}}\" width=\"600\" height=\"400\" layout=\"responsive\"></amp-img>\n            </figure>\n            {{/if}}\n            <section class=\"post-content\">\n                {{amp_content}}\n            </section>\n       </article>\n    </main>\n    {{/post}}\n    <footer class=\"site-footer clearfix\">\n        <section class=\"copyright\"><a href=\"{{@blog.url}}\">{{@blog.title}}</a> &copy; {{date format=\"YYYY\"}}</section>\n        <section class=\"poweredby\">Proudly published with <a href=\"https://ghost.org\">Ghost</a></section>\n    </footer>\n</body>\n\n\nThis is where you can go wild! Here's a quick explanation of the most important\nstuff in here:\n\n{{image}} and <amp-img>\nThe default template uses the {{#if}}  helper to check for a post image. But\nyou'll notice that it needs to be wrapped in <amp-img>  and also provide the\nmandatory width  and height  attributes.\n\n{{amp_content}}\nA special version of the regular {{content}}  helper which transforms HTML tags\ninto AMP HTML where appropriate.\n\nRemember to validate your template\nDon't forget to open any blog post on your site and add /amp/#development=1  to\nthe URL. This will not only render your AMP template, but also open the AMP\nvalidator.\n\nSummary\nYou now have a strong understanding of how AMP content works in Ghost and a\ndetailed overview of the default amp.hbs  template and how you can adjust it to\nsuit your needs. If you run into any difficulties with AMP, try their developer\nsupport [https://www.ampproject.org/support/developer/get_support]  options.","featured":false,"created_at_pretty":"29 October, 2018","published_at_pretty":"30 October, 2018","updated_at_pretty":"30 October, 2018","created_at":"2018-10-29T12:44:13.000+00:00","published_at":"2018-10-30T10:19:10.000+00:00","updated_at":"2018-10-30T11:55:05.000+00:00","tags":[{"name":"Themes","slug":"themes","visibility":"public"},{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"}],"authors":[{"name":"Kym Ellis","slug":"kym"},{"name":"Aileen Nowak","slug":"aileen"}]}},{"node":{"id":"Ghost__Post__5bb4e9115a8ccb00bfd27ae1","slug":"custom-page-templates","title":"Custom post templates","excerpt":"Build custom templates and pass them directly to the admin client to be used in individual posts or pages.","feature_image":"https://docs.ghost.io/content/images/2018/10/themes.svg","plaintext":"The Ghost theme layer has built-in functionality to work with custom templates\nand pass them directly to the admin client so that they can be readily used when\ncreating content using the editor. This allows theme developers to create\nreplicable styles for a publication that can be implemented by any author or\nteam user with a couple of clicks â\n\nOverview\nRather than using a bloated page builder that comes with style limitations and\nsite speed implications, a Ghost theme allows you to apply styles in a sensible\nmanner, using HTML and CSS.\n\nOnce the custom template is in place, it can be selected from the post settings\nmenu in the editor. \n\nThis tutorial walks you through the process for setting up custom templates\nusing Ghost handlebars themes.\n\nIf you want to build custom static pages for your publication, for example a\nhome page or an about page, read this tutorial\n[https://docs.ghost.org/tutorials/custom-home-page/]  which shows you how to map\nroutes to a template using the routes.yaml  file. Create a custom template\nTo create a custom template follow this filename format: \n\ncustom-{{template-name}}.hbs\n\n\nReplace {{template-name}}  with only alphanumeric characters and dashes. This\nwill then be picked up as a custom template within Ghost. Ensure you pick a\nmemorable name, since this part of the file name will be transformed and shown\nin the dropdown menu as 'Template Name'. \n\nUsing this naming format is the only thing required to ensure Ghost picks up\nyour custom template, which can then be used in any post or page. \n\nFrom here you can create an entirely custom handlebars template to suit your\nneeds and edit your CSS files as required. For further information about\nbuilding a Handlebars template from scratch, visit the Handlebars frontend SDK\ndocumentation [https://docs.ghost.org/api/handlebars-themes/].\n\nExample\nOn the Ghost blog, we use a custom template\n[https://github.com/TryGhost/Blog/blob/master/custom-full-width.hbs]  called \ncustom-full-width.hbs  to render unique styling for special posts like this\n[https://blog.ghost.org/2-0/]. Our template is called Full Width. \n\nThere are countless use cases for custom templates, which can totally restyle an\nentire post or page, or just to change a few small elements on the page. \n\nUsually, custom post templates are used for one-off pieces of content. If you\nneed a whole collection of content to be rendered with a specific template, use\ndynamic routing configuration instead. Implement new templates and CSS\nOnce you have finished creating your new custom template file and made any\nnecessary adjustments to your CSS, upload an updated version of your theme to\nGhost.\n\nTheme files should always be in the .zip  format, and you can import your\nupdated theme from the design settings menu in Ghost admin. \n\nNow you can test your new custom template on production by creating a new draft\npost, and selecting the correct template from the dropdown menu in the post\nsettings menu: \n\nThis menu will only appear when you have one or more custom templates uploaded\nin your theme!\nAdd content to your new post and preview it to see your new custom template and\nstyling in action. \n\nSummary\nNice! You've successfully created a custom post template in your Ghost theme and\nit's now ready to use from within the editor. This same process can be repeated\nto create multiple custom styles for your posts and pages to suit your needs.","featured":false,"created_at_pretty":"03 October, 2018","published_at_pretty":"10 October, 2018","updated_at_pretty":"23 October, 2018","created_at":"2018-10-03T16:06:41.000+00:00","published_at":"2018-10-10T10:49:27.000+00:00","updated_at":"2018-10-23T08:17:55.000+00:00","tags":[{"name":"#tutorial","slug":"hash-tutorial","visibility":"internal"},{"name":"Themes","slug":"themes","visibility":"public"}],"authors":[{"name":"Kym Ellis","slug":"kym"}]}}]}},"pageContext":{"tagSlug":"themes","tagName":"Themes","tagURL":"/tutorials/themes/","tagDescription":null,"tagImage":null,"tagMetaTitle":null,"tagMetaDescription":null,"section":"tutorials"}}