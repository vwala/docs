{"version":3,"sources":["webpack:///./src/components/integrations/IntegrationBox.js","webpack:///./node_modules/react-instantsearch-core/dist/es/connectors/connectHits.js","webpack:///./src/components/integrations/integration-search/IntegrationResults.js","webpack:///./node_modules/react-instantsearch-core/dist/es/connectors/connectSearchBox.js","webpack:///./src/components/integrations/integration-search/IntegrationSearchBox.js","webpack:///./src/components/integrations/integration-search/IntegrationIndex.js","webpack:///./src/components/integrations/IntegrationsTagList.js","webpack:///./src/components/integrations/IntegrationsContent.js","webpack:///./src/pages/integrations.js","webpack:///./src/components/common/meta/getAuthorProperties.js","webpack:///./src/components/common/meta/ImageMeta.js","webpack:///./src/components/common/meta/ArticleMetaGhost.js","webpack:///./src/components/common/meta/ArticleMetaMD.js","webpack:///./src/components/common/meta/WebsiteMeta.js","webpack:///./src/components/common/meta/MetaData.js","webpack:///./src/components/common/meta/getMetaImageUrls.js","webpack:///./src/components/common/meta/index.js","webpack:///./src/utils/getTagsforPostCollection.js"],"names":["IntegrationBox","_ref","post","hit","section","url","slug","title","optimisedImg","feature_image","image","react_default","a","createElement","common","to","className","elevation","radius","style","objectFit","src","alt","propTypes","PropTypes","shape","string","isRequired","connectHits","Object","createConnector","displayName","getProvidedProps","props","searchState","searchResults","results","indexUtils","this","context","hits","getSearchParameters","searchParameters","IntegrationResults","map","integrations_IntegrationBox","key","objectID","arrayOf","IntegrationResultsList","getCurrentRefinement","currentRefinement","_refine","nextRefinement","obj","value","nextValue","defineProperty","enumerable","configurable","writable","connectSearchBox","defaultRefinement","node_modules_prop_types_default","isSearchStalled","refine","cleanUp","_cleanUp","setQuery","getMetadata","_this","id","index","items","label","nextState","IntegrationSearch","_React$Component","call","state","currentInput","showResetButton","handleChange","bind","assertThisInitialized_default","setInput","resetSearch","toggleResetButton","e","setState","val","searchActive","target","render","htmlFor","name","type","placeholder","autoComplete","onChange","onClick","React","Component","func","IntegrationSearchBox","IntegrationIndex","children","Index","indexName","node","IntegrationsTagList","location","data","activeLocation","pathname","tags","getTagsforPostCollection","allGhostPost","edges","unshift","link","Fragment","data-cy","tag","i","dynamicClass","gatsby_browser_entry","object","bool","IntegrationTagsQuery","query","IntegrationsTagList_IntegrationsTagList","assign","_420472741","IntegrationsContent","posts","activeSorting","searchSwitch","sortBy","field","firstSortField","secondSortField","sortedPosts","_","layout","headerDividerStyle","header","theme","Spirit","sectionHeading","sectionSubHeading","integration_search_IntegrationSearchBox","integration_search_IntegrationIndex","page","xl","href","integrations_IntegrationsTagList","integration_search_IntegrationResults","array","__webpack_require__","d","__webpack_exports__","pageQuery","IntegrationsPage","imageUrl","getMetaImageUrls","meta","description","integrations_IntegrationsContent","site","siteMetadata","siteUrl","getAuthorProperties","primaryAuthor","fetchAuthorData","authorProfiles","push","website","twitter","trimStart","facebook","compact","sameAsArray","length","join","profile_image","defaultProps","ImageMeta","Helmet_default","content","property","ArticleMetaGhost","canonical","overwriteDefaultImage","ghostPost","author","primary_author","publicTags","tagsHelper","visibility","fn","primaryTag","seoImage","meta_title","meta_description","excerpt","rel","og_title","og_description","published_at","updated_at","keyword","twitter_title","twitter_description","meta_ImageMeta","ArticleMetaMD","markdownRemark","fm","frontmatter","publishedAtISODate","date","Date","toISOString","keywords","timeToRead","number","WebsiteMeta","oneOf","MetaData","_ref2","resolve","meta_ArticleMetaGhost","meta_ArticleMetaMD","meta_WebsiteMeta","imageUrls","default","process","proptypes","meta_MetaData","meta_getMetaImageUrls","linkPrefix","exec","forEach","flattenDeep","sortedUniqBy"],"mappings":"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","file":"component---src-pages-integrations-js-18ed663a052154e16203.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Box } from '../common'\n\nconst IntegrationBox = ({ post, hit, section }) => {\n    const url = post ? `/${section}/${post.slug}/` : hit.url\n    const title = post ? post.title : hit.title\n    const image = post ? post.feature_image : hit.image\n    const optimisedImg = `https://res.cloudinary.com/tryghost/image/fetch/w_120,h_100,c_fit/${image}`\n\n    return (\n        <Box\n            to={url}\n            className=\"flex flex-column justify-center items-center w-100 h30 pa3 tc tdn darkgrey bg-white shadow-2\"\n            elevation=\"2\"\n            radius=\"4\"\n        >\n            <div className=\"flex justify-center items-center h10 w13 mt1\">\n                <img className=\"w-100 h-100\" style={{ objectFit: `contain` }} src={optimisedImg} alt={title} />\n            </div>\n            <div className=\"f8 mt3\">{title}</div>\n        </Box>\n    )\n}\n\nIntegrationBox.propTypes = {\n    post: PropTypes.shape({\n        title: PropTypes.string,\n        feature_image: PropTypes.string,\n        slug: PropTypes.string,\n    }),\n    hit: PropTypes.shape({\n        url: PropTypes.string,\n        title: PropTypes.string,\n        image: PropTypes.string,\n    }),\n    section: PropTypes.string.isRequired,\n}\n\nexport default IntegrationBox\n","import createConnector from '../core/createConnector';\nimport { getResults } from '../core/indexUtils';\n\n/**\n * connectHits connector provides the logic to create connected\n * components that will render the results retrieved from\n * Algolia.\n *\n * To configure the number of hits retrieved, use [HitsPerPage widget](widgets/HitsPerPage.html),\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or pass the hitsPerPage\n * prop to a [Configure](guide/Search_parameters.html) widget.\n *\n * **Warning:** you will need to use the **objectID** property available on every hit as a key\n * when iterating over them. This will ensure you have the best possible UI experience\n * especially on slow networks.\n * @name connectHits\n * @kind connector\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @example\n * import React from 'react';\n * import { InstantSearch, Highlight, connectHits } from 'react-instantsearch-dom';\n *\n * const CustomHits = connectHits(({ hits }) => (\n *   <div>\n *     {hits.map(hit =>\n *       <p key={hit.objectID}>\n *         <Highlight attribute=\"name\" hit={hit} />\n *       </p>\n *     )}\n *   </div>\n * ));\n *\n * const App = () => (\n *   <InstantSearch\n *     appId=\"latency\"\n *     apiKey=\"6be0576ff61c053d5f9a3225e2a90f76\"\n *     indexName=\"instant_search\"\n *   >\n *     <CustomHits />\n *   </InstantSearch>\n * );\n */\nexport default createConnector({\n  displayName: 'AlgoliaHits',\n\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    var results = getResults(searchResults, this.context);\n    var hits = results ? results.hits : [];\n\n    return { hits: hits };\n  },\n\n\n  /* Hits needs to be considered as a widget to trigger a search if no others widgets are used.\n   * To be considered as a widget you need either getSearchParameters, getMetadata or getTransitionState\n   * See createConnector.js\n   * */\n  getSearchParameters: function getSearchParameters(searchParameters) {\n    return searchParameters;\n  }\n});","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connectHits } from 'react-instantsearch-dom'\n\nimport { IntegrationBox } from '../.'\n\nconst IntegrationResults = ({ hits }) => (\n    <div className=\"gh-integrations w-100\">\n        {hits.map(hit => <IntegrationBox key={hit.objectID} hit={hit} section=\"integrations\" />)}\n    </div>\n)\n\nIntegrationResults.propTypes = {\n    hits: PropTypes.arrayOf(\n        PropTypes.shape({\n            objectID: PropTypes.string.isRequired,\n        }).isRequired,\n    ).isRequired,\n}\n\nconst IntegrationResultsList = connectHits(IntegrationResults)\n\nexport default IntegrationResultsList\n","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { cleanUpValue, refineValue, getCurrentRefinementValue, getIndex } from '../core/indexUtils';\n\nfunction getId() {\n  return 'query';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId(props);\n  return getCurrentRefinementValue(props, searchState, context, id, '', function (currentRefinement) {\n    if (currentRefinement) {\n      return currentRefinement;\n    }\n    return '';\n  });\n}\n\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId();\n  var nextValue = _defineProperty({}, id, nextRefinement);\n  var resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\nfunction _cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, getId());\n}\n\n/**\n * connectSearchBox connector provides the logic to build a widget that will\n * let the user search for a query\n * @name connectSearchBox\n * @kind connector\n * @propType {string} [defaultRefinement] - Provide a default value for the query\n * @providedPropType {function} refine - a function to change the current query\n * @providedPropType {string} currentRefinement - the current query used\n * @providedPropType {boolean} isSearchStalled - a flag that indicates if InstantSearch has detected that searches are stalled\n */\nexport default createConnector({\n  displayName: 'AlgoliaSearchBox',\n\n  propTypes: {\n    defaultRefinement: PropTypes.string\n  },\n\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    return {\n      currentRefinement: getCurrentRefinement(props, searchState, this.context),\n      isSearchStalled: searchResults.isSearchStalled\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, this.context);\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, this.context);\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQuery(getCurrentRefinement(props, searchState, this.context));\n  },\n  getMetadata: function getMetadata(props, searchState) {\n    var _this = this;\n\n    var id = getId(props);\n    var currentRefinement = getCurrentRefinement(props, searchState, this.context);\n    return {\n      id: id,\n      index: getIndex(this.context),\n      items: currentRefinement === null ? [] : [{\n        label: id + ': ' + currentRefinement,\n        value: function value(nextState) {\n          return _refine(props, nextState, '', _this.context);\n        },\n        currentRefinement: currentRefinement\n      }]\n    };\n  }\n});","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connectSearchBox } from 'react-instantsearch-dom'\n\nimport { Icon } from '../../common'\n\nclass IntegrationSearch extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            currentInput: this.props.currentRefinement,\n            showResetButton: false,\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n        this.setInput = this.setInput.bind(this)\n        this.resetSearch = this.resetSearch.bind(this)\n        this.toggleResetButton = this.toggleResetButton.bind(this)\n    }\n\n    setInput(e) {\n        this.setState(() => {\n            return { currentInput: e }\n        })\n    }\n\n    toggleResetButton(val) {\n        this.setState(() => {\n            return { showResetButton: val }\n        })\n    }\n\n    resetSearch() {\n        this.props.searchActive(false)\n        this.toggleResetButton(false)\n        this.props.refine()\n\n        this.setState(() => {\n            return { currentInput: `` }\n        })\n    }\n\n    handleChange(e) {\n        this.setInput(e.target.value)\n\n        if (!e.target.value) {\n            // input field is empty, stop what we're doing\n            return this.resetSearch()\n        }\n\n        // Tell parent component, that the search is active now\n        this.props.searchActive(true)\n        this.toggleResetButton(true)\n\n        return this.props.refine(e.target.value)\n    }\n\n    render() {\n        return (\n            <div className=\"relative mt8 mw-s center\">\n                <label htmlFor=\"integrationsearch\" className=\"clip\">Search</label>\n                <Icon name=\"search\" className=\"fill-lightgrey w5 h-auto absolute top-4 left-4\" />\n                <input\n                    id=\"integrationsearch\"\n                    name=\"integrationsearch\"\n                    className=\"input-reset form-text pa4 pl10 pr8 w-100 f6 br-pill ba b--transparent bg-white shadow-2 whitney middarkgrey dark-placeholder\"\n                    type=\"text\"\n                    placeholder=\"Search integrations...\"\n                    autoComplete=\"off\"\n                    value={this.state.currentInput}\n                    onChange={this.handleChange}\n                />\n                {this.state.showResetButton ?\n                    <button\n                        className=\"absolute top-0 right-0 bottom-0 pa0 pr2 b--transparent flex justify-center items-center bg-transparent\"\n                        onClick={this.resetSearch}\n                    >\n                        <Icon name=\"close\" className=\"w4 h4 pa2 fill-midgrey bg-white br-100 pointer dim\" />\n                    </button>\n                    : null\n                }\n            </div>\n        )\n    }\n}\n\nIntegrationSearch.propTypes = {\n    searchActive: PropTypes.func.isRequired,\n    currentRefinement: PropTypes.string,\n    refine: PropTypes.func,\n}\n\n// `IntegrationSearchBox` renders a `<IntegrationSearch>` widget that is connected to\n// the <InstantSearch> state, providing it with `currentRefinement` and `refine` props for\n// reading and manipulating the current query of the search.\nconst IntegrationSearchBox = connectSearchBox(IntegrationSearch)\n\nexport default IntegrationSearchBox\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Index } from 'react-instantsearch-dom'\n\nconst IntegrationIndex = ({ children }) => (<Index indexName=\"integration\">{children}</Index>)\n\nIntegrationIndex.propTypes = {\n    children: PropTypes.node.isRequired,\n}\n\nexport default IntegrationIndex\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, StaticQuery, graphql } from 'gatsby'\n\nimport { getTagsforPostCollection } from '../../utils/getTagsforPostCollection'\n\nconst IntegrationsTagList = ({ location, searchActive, data }) => {\n    // When the search is active, we set the \"All integrations\" link as active and\n    // overwrite the real active link as long as the search is active\n    const activeLocation = searchActive ? `/integrations/` : location.pathname\n    const tags = getTagsforPostCollection(data.allGhostPost.edges, `integrations`)\n\n    // Add a default tag for \"All Integrations\" at first place, which\n    // links back to the general integrations page\n    tags.unshift({\n        name: `All Integrations`,\n        slug: `all-integrations`,\n        link: `/integrations/`,\n    })\n\n    return (\n        <>\n            <h3 className=\"ma0 mb2\" data-cy=\"filter\">Filter by</h3>\n            {tags.map((tag, i) => {\n                const dynamicClass = activeLocation === tag.link ? `blue fw6` : `midgrey`\n\n                return (\n                    <Link\n                        to={tag.link}\n                        className={`${dynamicClass} link pa2 pl0`}\n                        key={i}\n                        data-cy={`${tag.slug}-filter`}\n                    >\n                        {tag.name}\n                    </Link>\n                )\n            })}\n        </>\n    )\n}\n\nIntegrationsTagList.propTypes = {\n    location: PropTypes.object.isRequired,\n    searchActive: PropTypes.bool.isRequired,\n    data: PropTypes.shape({\n        allGhostPost: PropTypes.shape({\n            edges: PropTypes.arrayOf(\n                PropTypes.shape({\n                    post: PropTypes.shape({\n                        tag: PropTypes.arrayOf(\n                            PropTypes.shape({\n                                name: PropTypes.string,\n                                slug: PropTypes.string,\n                            })\n                        ),\n                    }),\n                }).isRequired,\n            ).isRequired,\n        }).isRequired,\n    }).isRequired,\n}\n\nconst IntegrationTagsQuery = props => (\n    <StaticQuery\n        query={graphql`\n            query GhostIntegrationsTagsQuery {\n                allGhostPost(\n                    sort: { order: ASC, fields: [published_at] },\n                    limit: 100,\n                    filter: {tags: {elemMatch: {slug: {eq: \"hash-integration\"}}}}\n                ) {\n                edges {\n                    node {\n                    ...GhostTagListFields\n                    }\n                }\n                }\n            }\n        `}\n        render={data => <IntegrationsTagList data={data} {...props} />}\n    />\n)\nexport default IntegrationTagsQuery\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\n\nimport { Layout } from '../common/layout'\nimport { NavBar } from '../common/'\nimport IntegrationBox from \"./IntegrationBox\"\nimport { Spirit } from '../../styles/spirit-styles'\nimport { IntegrationIndex, IntegrationSearchBox, IntegrationResults } from './integration-search'\nimport IntegrationsTagList from './IntegrationsTagList'\n\nclass IntegrationsContent extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            posts: this.props.posts,\n            activeSorting: `date`,\n            searchActive: false,\n        }\n\n        this.searchSwitch = this.searchSwitch.bind(this)\n    }\n\n    searchSwitch(val) {\n        // a passed argument needs to win over the toggle\n        this.setState((state) => {\n            return {\n                searchActive: val ? val : !state.searchActive,\n            }\n        })\n    }\n\n    sortBy(field) {\n        let firstSortField\n        let secondSortField\n\n        switch (field) {\n        case `date`:\n            firstSortField = `node.published_at`\n            secondSortField = `node.title`\n            this.setState(() => {\n                return { activeSorting: `date` }\n            })\n            break\n        case `title`:\n            firstSortField = `node.title`\n            secondSortField = `node.published_at`\n            this.setState(() => {\n                return { activeSorting: `title` }\n            })\n            break\n        }\n\n        const sortedPosts = _.sortBy(this.state.posts, [firstSortField, secondSortField])\n\n        this.setState(() => {\n            return { posts: sortedPosts }\n        })\n    }\n\n    render() {\n        const { posts } = this.state\n\n        return (\n            <>\n                <Layout\n                    headerDividerStyle=\"shadow\"\n                    header={\n                        <div className=\"bg-integrations-header-image\">\n                            <div className=\"bg-integrations-header-cover\">\n                                <header className=\"top-0 left-0 right-0 z-9999\">\n                                    <NavBar theme=\"light\" />\n                                </header>\n                                <div className=\"pa-vw4 tc white\">\n                                    <h1 className={`${Spirit.sectionHeading} gh-integration-header-shadow`}>Ghost Integrations</h1>\n                                    <p className={ Spirit.sectionSubHeading }>All your favourite apps and tools, integrated with Ghost</p>\n                                    <IntegrationSearchBox searchActive={this.searchSwitch} />\n                                </div>\n                            </div>\n                        </div>\n                    }\n                >\n                    <IntegrationIndex>\n                        <div className={Spirit.page.xl + `pt10`}>\n                            <div className=\"flex items-start br4\">\n                                <div className=\"gh-integration-sidebar flex-shrink-0 w50 mr5 dn db-ns\">\n                                    <div className=\"flex flex-column mb6\" data-cy=\"sort\">\n                                        <h3 className=\"ma0 mb2\">Sort by</h3>\n                                        <a href=\"#\" className={`link pa2 pl0 ${this.state.activeSorting === `date` ? `blue fw6` : `midgrey`}`} onClick={this.sortBy.bind(this, `date`)}>Most popular</a>\n                                        <a href=\"#\" className={`link pa2 pl0 ${this.state.activeSorting === `title` ? `blue fw6` : `midgrey`}`} onClick={this.sortBy.bind(this, `title`)}>A – Z</a>\n                                    </div>\n                                    <div className=\"flex flex-column mb6\">\n                                        <IntegrationsTagList\n                                            location={this.props.location}\n                                            searchActive={this.state.searchActive}\n                                        />\n                                    </div>\n                                </div>\n                                {this.state.searchActive ?\n                                    <IntegrationResults /> :\n                                    <>\n                                        <div className=\"gh-integrations w-100\">\n                                            {posts.map(({ node }) => (\n                                                <IntegrationBox key={node.id} post={node} section=\"integrations\" />\n                                            ))}\n                                        </div>\n                                    </>\n                                }\n                            </div>\n                        </div>\n                    </IntegrationIndex>\n                </Layout>\n            </>\n        )\n    }\n}\n\nIntegrationsContent.propTypes = {\n    posts: PropTypes.array.isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n}\n\nexport default IntegrationsContent\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport { IntegrationsContent } from '../components/integrations'\nimport { MetaData, getMetaImageUrls } from '../components/common/meta'\n\nconst IntegrationsPage = ({ data, location }) => {\n    // Add meta title and description for this page here to overwrite the site meta data as set in the config\n    const title = `Ghost Integrations – Connect your favourite Tools & Apps to your site`\n    const description = `Keep your stack aligned and integrate your most used tools & apps with your Ghost site: automation, analytics, marketing, support and much more! 👉`\n    const imageUrl = getMetaImageUrls(`integrations`)\n\n    const posts = data.allGhostPost.edges\n\n    return (\n        <>\n            <MetaData\n                data={data}\n                location={location}\n                type=\"website\"\n                title={title || data.site.siteMetadata.title}\n                description={description || data.site.siteMetadata.description}\n                image={imageUrl}\n            />\n            <IntegrationsContent\n                posts={posts}\n                location={location}\n            />\n        </>\n    )\n}\n\nIntegrationsPage.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        allGhostPost: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n}\n\nexport default IntegrationsPage\n\nexport const pageQuery = graphql`\n  query GhostIntegrationsQuery {\n    site {\n        ...SiteMetaFields\n    }\n    allGhostPost(\n        sort: { order: ASC, fields: [published_at] },\n        limit: 100,\n        filter: {tags: {elemMatch: {slug: {eq: \"hash-integration\"}}}}\n    ) {\n      edges {\n        node {\n          ...GhostPostListFields\n        }\n      }\n    }\n  }\n`\n","import _ from 'lodash';\nimport PropTypes from 'prop-types';\n\nexport const getAuthorProperties = (primaryAuthor, fetchAuthorData) => {\n    let authorProfiles = []\n\n    if (fetchAuthorData) {\n        authorProfiles.push(\n            primaryAuthor.website ? primaryAuthor.website : null,\n            primaryAuthor.twitter ? `https://twitter.com/${_.trimStart(primaryAuthor.twitter, `@`)}/` : null,\n            primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook}/` : null\n        )\n    } else {\n        authorProfiles.push(\n            `https://vwa.la/`,\n            `https://twitter.com/ghost/`,\n            `https://www.facebook.com/ghost/`\n        )\n    }\n\n    authorProfiles = _.compact(authorProfiles)\n\n    return {\n        name: fetchAuthorData ? primaryAuthor.name : `Ghost`,\n        sameAsArray: authorProfiles.length ? `[\"${_.join(authorProfiles, `\", \"`)}\"]` : null,\n        image: fetchAuthorData ? primaryAuthor.profile_image : null,\n    }\n}\n\ngetAuthorProperties.defaultProps = {\n    fetchAuthorData: false,\n}\n\ngetAuthorProperties.PropTypes = {\n    primaryAuthor: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        profile_image: PropTypes.string,\n        website: PropTypes.string,\n        twitter: PropTypes.string,\n        facebook: PropTypes.string,\n    }).isRequired,\n    fetchAuthorData: PropTypes.bool.isRequired,\n}\n\nexport default getAuthorProperties\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nconst ImageMeta = ({ image }) => (\n    <Helmet>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:image\" content={image} />\n        <meta property=\"og:image\" content={image} />\n        {/* These are the image sizes of the SEO feature images */}\n        <meta property=\"og:image:width\" content=\"1000\" />\n        <meta property=\"og:image:height\" content=\"523\" />\n    </Helmet >\n)\n\nImageMeta.propTypes = {\n    image: PropTypes.string.isRequired,\n}\n\nexport default ImageMeta\n","import { tags as tagsHelper } from '@tryghost/helpers';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from \"react-helmet\";\nimport getAuthorProperties from './getAuthorProperties';\nimport ImageMeta from './ImageMeta';\n\n\nconst ArticleMetaGhost = ({ data, canonical, fetchAuthorData, title, overwriteDefaultImage, image }) => {\n    const { ghostPost } = data\n    const { siteMetadata } = data.site\n\n    const author = getAuthorProperties(ghostPost.primary_author, fetchAuthorData)\n    const publicTags = _.map(tagsHelper(ghostPost, { visibility: `public`, fn: tag => tag }), `name`)\n    const primaryTag = publicTags[0] || { name: `General`, slug: `general` }\n    const seoImage = (overwriteDefaultImage && ghostPost.feature_image) ? ghostPost.feature_image : image\n\n    return (\n        <>\n            <Helmet>\n                <title>{ghostPost.meta_title || title || ghostPost.title}</title>\n                <meta name=\"description\" content={ghostPost.meta_description || ghostPost.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta name=\"og:type\" content=\"article\" />\n                <meta name=\"og:title\"\n                    content={\n                        ghostPost.og_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"og:description\"\n                    content={\n                        ghostPost.og_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={ghostPost.published_at} />\n                <meta property=\"article:modified_time\" content={ghostPost.updated_at} />\n                {publicTags.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />))}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/vwalamarketing/\" />\n\n                <meta name=\"twitter:title\"\n                    content={\n                        ghostPost.twitter_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"twitter:description\"\n                    content={\n                        ghostPost.twitter_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta name=\"twitter:url\" content={canonical} />\n                {/* <meta name=\"twitter.label1\" content=\"Reading time\" /> */}\n                {/* <meta name=\"twitter:data1\" content=\"TODO: Reading time helper and replace existing `label1` data\" /> */}\n                <meta name=\"twitter:label1\" content=\"Written by\" />\n                <meta name=\"twitter:data1\" content={author.name} />\n                <meta name=\"twitter:label2\" content=\"Filed under\" />\n                <meta name=\"twitter:data2\" content={primaryTag} />\n                <meta name=\"twitter:site\" content=\"@vwalamarketing\" />\n                <meta name=\"twitter:creator\" content=\"@vwalamarketing\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"${author.name}\",\n                            ${author.image ? author.sameAsArray ? `\"image\": \"${author.image}\",` : `\"image\": \"${author.image}\"` : ``}\n                            ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray}` : ``}\n                        },\n                        ${publicTags.length ? `\"keywords\": \"${_.join(publicTags, `, `)}\",` : ``}\n                        \"headline\": \"${ghostPost.meta_title || title || ghostPost.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${ghostPost.published_at}\",\n                        \"dateModified\": \"${ghostPost.updated_at}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${ghostPost.meta_description || ghostPost.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://blog.vwa.la/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nArticleMetaGhost.defaultProps = {\n    fetchAuthorData: false,\n}\n\nArticleMetaGhost.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            published_at: PropTypes.string.isRequired,\n            updated_at: PropTypes.string.isRequired,\n            excerpt: PropTypes.string.isRequired,\n            meta_title: PropTypes.string,\n            meta_description: PropTypes.string,\n            primary_author: PropTypes.object.isRequired,\n            feature_image: PropTypes.string,\n            tags: PropTypes.arrayOf(\n                PropTypes.shape({\n                    name: PropTypes.string,\n                    slug: PropTypes.string,\n                    visibility: PropTypes.string,\n                })\n            ),\n            primaryTag: PropTypes.shape({\n                name: PropTypes.string,\n            }),\n            og_title: PropTypes.string,\n            og_description: PropTypes.string,\n            twitter_title: PropTypes.string,\n            twitter_description: PropTypes.string,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    fetchAuthorData: PropTypes.bool,\n    title: PropTypes.string,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default ArticleMetaGhost\n","import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { getMetaImageUrls } from '.';\nimport ImageMeta from './ImageMeta';\n\n\nconst ArticleMetaMD = ({ data, canonical }) => {\n    const post = data.markdownRemark\n    const fm = post.frontmatter\n    const { siteMetadata } = data.site\n\n    // Convert the frontmatter date into ISO String but, and use a fixed\n    // date, if no date is set. The published date should not change once set.\n    const publishedAtISODate = fm.date ? new Date(fm.date).toISOString() : new Date(`2018-10-15`).toISOString()\n    const primaryTag = fm.keywords && fm.keywords.length ? fm.keywords[0] : null\n    const seoImage = getMetaImageUrls()\n\n    return (\n        <>\n            <Helmet>\n                <title>{fm.meta_title || fm.title}</title>\n                <meta name=\"description\" content={fm.meta_description || post.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta name=\"og:type\" content=\"article\" />\n                <meta name=\"og:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"og:description\" content={fm.meta_description || post.excerpt} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={publishedAtISODate} />\n                {fm.keywords && fm.keywords.length ? fm.keywords.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />)) : null}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"twitter:description\" content={fm.meta_description || post.excerpt} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter.label1\" content=\"Reading time\" />\n                <meta name=\"twitter:data1\" content={`${post.timeToRead} min read`} />\n                {primaryTag ? <meta name=\"twitter:label2\" content=\"Filed under\" /> : null}\n                {primaryTag ? <meta name=\"twitter:data2\" content={primaryTag} /> : null}\n                <meta name=\"twitter:site\" content=\"@vwalamarketing\" />\n                <meta name=\"twitter:creator\" content=\"@vwalamarketing\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"Ghost\",\n                            \"sameAs\": [\n                                \"https://vwa.la/\",\n                                \"https://www.facebook.com/ghost/\",\n                                \"https://twitter.com/vwalamarketing/\"\n                            ]\n                        },\n                        ${fm.keywords && fm.keywords.length ? `\"keywords\": \"${_.join(fm.keywords, `, `)}\",` : ``}\n                        \"headline\": \"${fm.meta_title || fm.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${publishedAtISODate}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${fm.meta_description || post.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//     \"name\": \"Ghost\",\n//     \"logo\": {\n//         \"@type\": \"ImageObject\",\n//         \"url\": \"https://blog.vwa.la/favicon.png\",\n//         \"width\": 60,\n//         \"height\": 60\n//     }\n// },\n\nArticleMetaMD.propTypes = {\n    data: PropTypes.shape({\n        markdownRemark: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n                title: PropTypes.string.isRequired,\n                keywords: PropTypes.arrayOf(\n                    PropTypes.string,\n                ),\n                meta_title: PropTypes.string,\n                meta_description: PropTypes.string,\n                date: PropTypes.string,\n            }).isRequired,\n            excerpt: PropTypes.string.isRequired,\n            timeToRead: PropTypes.number,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n}\n\nexport default ArticleMetaMD\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from \"react-helmet\";\nimport ImageMeta from './ImageMeta';\n\n\nconst WebsiteMeta = ({ data, canonical, title, description, image, type }) => (\n    <>\n        <Helmet>\n            <title>{title}</title>\n            <meta name=\"description\" content={description} />\n            <link rel=\"canonical\" href={canonical} />\n            <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n            <meta property=\"og:type\" content=\"website\" />\n            <meta property=\"og:title\" content={title} />\n            <meta property=\"og:description\" content={description} />\n            <meta property=\"og:url\" content={canonical} />\n            <meta name=\"twitter:title\" content={title} />\n            <meta name=\"twitter:description\" content={description} />\n            <meta name=\"twitter:url\" content={canonical} />\n            <meta name=\"twitter:site\" content=\"@vwalamarketing\" />\n            <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": ${type && type === `series` ? `\"Series\"` : `\"WebSite\"`},\n                        \"url\": \"${canonical}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${image}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${data.site.siteMetadata.siteUrl}\"\n                        },\n                        \"description\": \"${description}\"\n                    }\n                `}</script>\n        </Helmet>\n        <ImageMeta image={image} />\n    </>\n)\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://blog.vwa.la/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nWebsiteMeta.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    type: PropTypes.oneOf([`website`, `series`]).isRequired,\n}\n\nexport default WebsiteMeta\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport url from 'url'\n\nimport ArticleMetaGhost from './ArticleMetaGhost'\nimport ArticleMetaMD from './ArticleMetaMD'\nimport WebsiteMeta from './WebsiteMeta'\n\nconst MetaData = ({\n    data,\n    type,\n    title,\n    description,\n    image,\n    fetchAuthorData,\n    overwriteDefaultImage,\n    location,\n}) => {\n    const { ghostPost, markdownRemark } = data || {}\n    const { siteMetadata } = data.site\n\n    const canonical = url.resolve(siteMetadata.siteUrl, location.pathname, `/`)\n\n    if (type === `article`) {\n        if (ghostPost) {\n            return (\n                <ArticleMetaGhost\n                    data={data}\n                    canonical={canonical}\n                    fetchAuthorData={fetchAuthorData}\n                    title={title}\n                    image={image}\n                    overwriteDefaultImage={overwriteDefaultImage}\n                />\n            )\n        } else if (markdownRemark) {\n            return (\n                <ArticleMetaMD\n                    data={data}\n                    canonical={canonical}\n                />\n            )\n        }\n    } else if (type === `website` || type === `series`) {\n        return (\n            <WebsiteMeta\n                data={data}\n                canonical={canonical}\n                title={title}\n                description={description}\n                image={image}\n                type={type}\n            />\n        )\n    }\n\n    return null\n}\n\nMetaData.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        ghostPost: PropTypes.object,\n        markdownRemark: PropTypes.object,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    type: PropTypes.oneOf([`website`, `series`, `article`]).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n    fetchAuthorData: PropTypes.bool,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default MetaData\n","import PropTypes from 'prop-types';\nimport url from 'url';\n\n// TODO: this should be available as global var without the need to query\n// the siteMetadata.\nconst SITEURL = process.env.SITE_URL || `https://docs.vwa.la`\n\nconst imageUrls = {\n    // faq: url.resolve(SITEURL, `/images/meta/Ghost-FAQ.jpg`),\n    // integrations: url.resolve(SITEURL, `/images/meta/Ghost-Integrations.jpg`),\n    // tutorials: url.resolve(SITEURL, `/images/meta/Ghost-Tutorials.jpg`),\n    default: url.resolve(SITEURL, `/images/meta/hero.png`),\n}\n\nexport const getMetaImageUrls = (section) => {\n    // Set the default image if no section is passed\n    section = section || `default`\n    return imageUrls[section]\n}\n\ngetMetaImageUrls.proptypes = {\n    section: PropTypes.string.isRequired,\n}\n\nexport default getMetaImageUrls\n\n","export { default as MetaData } from './MetaData'\nexport { default as getMetaImageUrls } from './getMetaImageUrls'\n","import PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { tags as tagsHelper } from '@tryghost/helpers'\n\n/* getTagsforPostCollection\n* Takes a Ghost post object and a link prefix and returns the used tags\n* array for a passed post collection. The tags will not contain internal tags,\n* duplicates, and are sorted ascending by name. The tags array can be used to\n* programmatically generate a tags cloud or menu.\n*/\nexport const getTagsforPostCollection = function getTagsforPostCollection(posts, linkPrefix) {\n    let tags = []\n    // remove any added `/`, as we add them later again\n    linkPrefix = /^(?:\\/?)([a-zA-Z\\d-]*)(?:\\/?)/i.exec(linkPrefix)[1]\n\n    _.forEach(posts, ({ node }) => {\n        const publicTags = tagsHelper(node, { visibility: `public`, fn: tag => tag })\n        tags.push(publicTags)\n    })\n\n    tags = _.flattenDeep(tags)\n\n    _.map(tags, (tag) => {\n        tag.link = linkPrefix ? `/${linkPrefix}/${tag.slug}/` : `/${tag.slug}/`\n    })\n\n    return _.sortedUniqBy(_.sortBy(_.flattenDeep(tags), `name`), `name`)\n}\n\ngetTagsforPostCollection.proptypes = {\n    posts: PropTypes.arrayOf(\n        PropTypes.shape({\n            node: PropTypes.shape({\n                tags: PropTypes.arrayOf(\n                    PropTypes.shape({\n                        name: PropTypes.string.isRequired,\n                        slug: PropTypes.string.isRequired,\n                    })\n                ).isRequired,\n            }).isRequired,\n        })).isRequired,\n    linkPrefix: PropTypes.string,\n}\n"],"sourceRoot":""}