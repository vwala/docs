{"version":3,"sources":["webpack:///./src/templates/ghost/integration.js","webpack:///./src/components/common/meta/getAuthorProperties.js","webpack:///./src/components/common/meta/ImageMeta.js","webpack:///./src/components/common/meta/ArticleMetaGhost.js","webpack:///./src/components/common/meta/ArticleMetaMD.js","webpack:///./src/components/common/meta/WebsiteMeta.js","webpack:///./src/components/common/meta/MetaData.js","webpack:///./src/components/common/meta/getMetaImageUrls.js","webpack:///./src/components/common/meta/index.js"],"names":["Integration","componentDidMount","Prism","highlightAll","render","post","this","props","data","ghostPost","_this$props$pageConte","pageContext","relatedPosts","section","title","optimisedImg","feature_image","seoImage","getMetaImageUrls","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","Fragment","_components_common_meta__WEBPACK_IMPORTED_MODULE_11__","location","type","image","_components_common_layout__WEBPACK_IMPORTED_MODULE_8__","className","src","alt","gatsby_image__WEBPACK_IMPORTED_MODULE_5___default","fixed","file","childImageSharp","Spirit","page","l","_components_common__WEBPACK_IMPORTED_MODULE_10__","headingsOffset","length","showImages","gatsby__WEBPACK_IMPORTED_MODULE_4__","to","_tryghost_helpers_gatsby__WEBPACK_IMPORTED_MODULE_7__","separator","limit","classes","permalink","linkClasses","dangerouslySetInnerHTML","__html","html","React","Component","propTypes","PropTypes","shape","site","siteMetadata","siteUrl","string","isRequired","description","object","array","articleQuery","getAuthorProperties","primaryAuthor","fetchAuthorData","authorProfiles","push","website","twitter","_","trimStart","facebook","compact","name","sameAsArray","join","profile_image","defaultProps","bool","ImageMeta","_ref","react_default","Helmet_default","content","property","ArticleMetaGhost","canonical","overwriteDefaultImage","author","primary_author","publicTags","map","tagsHelper","visibility","fn","tag","primaryTag","slug","meta_title","meta_description","excerpt","rel","href","og_title","og_description","published_at","updated_at","keyword","i","key","twitter_title","twitter_description","meta_ImageMeta","tags","arrayOf","ArticleMetaMD","markdownRemark","fm","frontmatter","publishedAtISODate","date","Date","toISOString","keywords","timeToRead","number","WebsiteMeta","oneOf","MetaData","_ref2","url","resolve","pathname","meta_ArticleMetaGhost","meta_ArticleMetaMD","meta_WebsiteMeta","imageUrls","default","process","proptypes","__webpack_require__","d","__webpack_exports__","meta_MetaData","meta_getMetaImageUrls"],"mappings":"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","file":"component---src-templates-ghost-integration-js-a11ccee1009886c2e666.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql, Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport Prism from 'prismjs'\nimport { Tags } from '@tryghost/helpers-gatsby'\n\nimport { Layout } from '../../components/common/layout'\nimport { Spirit } from '../../styles/spirit-styles'\nimport { RelatedPosts, TOC } from '../../components/common'\nimport { MetaData, getMetaImageUrls } from '../../components/common/meta'\n\nclass Integration extends React.Component {\n    componentDidMount() {\n        // TODO: Prism for Webpack currently supports basic languages. `handlebars`,\n        // `yaml`, and `json` are not amongst those. To load those languages, we'd\n        // need to load them specifically following the webpack instructions here:\n        // https://prismjs.com/#examples and https://github.com/mAAdhaTTah/babel-plugin-prismjs\n        // The other option is to create a plugin for GhostPosts.\n        Prism.highlightAll()\n    }\n\n    render() {\n        const post = this.props.data.ghostPost\n        const { relatedPosts, section } = this.props.pageContext\n        const title = `Ghost + ${post.title} Integration`\n        const image = post.feature_image\n        const optimisedImg = `https://res.cloudinary.com/tryghost/image/fetch/w_120,h_100,c_fit/${image}`\n        const seoImage = getMetaImageUrls(section)\n\n        return (\n            <>\n                <MetaData data={this.props.data} location={this.props.location} type=\"article\" title={title} image={seoImage} />\n                <Layout>\n                    <div className=\"pa-vw4 tc\">\n                        <h1 className=\"ma0 pa0 f2-ns f1-m f-headline-l\">{post.title} + Ghost</h1>\n                        <p className=\"ma0 mt2 f5 f4-l midgrey\">How to use Ghost and {post.title} together</p>\n                        <div className=\"flex items-center justify-center mt5\">\n                            <div className=\"flex-shrink-0 flex justify-center items-center h20 w20 h30-l w30-l pa5 pa10-l bg-white br-100 shadow-3 nl2 nr2\">\n                                <img className=\"mw100\" src={optimisedImg} alt={post.title} />\n                            </div>\n                            <div className=\"flex-shrink-0 flex justify-center items-center h20 w20 h30-l w30-l pa6 pa11-l bg-white br-100 shadow-3 nl2 nr2\">\n                                <Img fixed={this.props.data.file.childImageSharp.fixed} alt=\"Ghost\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div className={`${Spirit.page.l} flex` }>\n                        <div className=\"w-100 pa15 pt13 bg-white br4 shadow-1 flex flex-column flex-row-ns flex-start\">\n                            <div className=\"order-2\">\n                                <div className=\"nr3 sticky-ns top-25\">\n                                    <div className=\"dn db-ns\"><TOC className=\"miw50\" headingsOffset=\"-400\" /></div>\n                                    {relatedPosts.length ?\n                                        <div className=\"miw50 mw-content-ns mt15\">\n                                            <h3 className=\"f4 measure--0-2 middarkgrey ma0 mb3 pa0 fw4\">You might also like...</h3>\n                                            <RelatedPosts relatedPosts={relatedPosts} showImages/>\n                                        </div> :\n                                        null\n                                    }\n                                </div>\n                            </div>\n                            <article className=\"miw1 w-100 order-1 pr15-ns\">\n                                <div className=\"mb0 f8\">\n                                    <Link className=\"link midlightgrey fw5\" to=\"/integrations/\">Integrations</Link>\n                                    <span className=\"mr1 ml1 f8 midgrey\">/</span>\n                                    <Tags\n                                        post={post}\n                                        separator=\"\"\n                                        limit={1}\n                                        classes=\"darkgrey fw5\"\n                                        permalink=\"/integrations/:slug/\"\n                                        linkClasses=\"link darkgrey fw6\"\n                                    />\n                                </div>\n                                <section className=\"post-content integration-content external-scripts\" dangerouslySetInnerHTML={{ __html: post.html }} />\n                            </article>\n                        </div>\n                    </div>\n                </Layout>\n            </>\n        )\n    }\n}\n\nIntegration.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        ghostPost: PropTypes.object.isRequired,\n        file: PropTypes.shape({\n            childImageSharp: PropTypes.object.isRequired,\n        }).isRequired,\n    }).isRequired,\n    location: PropTypes.object.isRequired,\n    pageContext: PropTypes.shape({\n        relatedPosts: PropTypes.array.isRequired,\n        section: PropTypes.string.isRequired,\n    }).isRequired,\n}\n\nexport default Integration\n\nexport const articleQuery = graphql`\n    query($slug: String!) {\n        site {\n            ...SiteMetaFields\n        }\n        ghostPost(slug: { eq: $slug }) {\n            ...GhostPostFields\n        }\n        file(relativePath: {eq: \"integration-icon.png\"}) {\n            childImageSharp {\n                fixed(width: 30, height: 30) {\n                    ...GatsbyImageSharpFixed\n                }\n            }\n        }\n    }\n`\n","import _ from 'lodash';\nimport PropTypes from 'prop-types';\n\nexport const getAuthorProperties = (primaryAuthor, fetchAuthorData) => {\n    let authorProfiles = []\n\n    if (fetchAuthorData) {\n        authorProfiles.push(\n            primaryAuthor.website ? primaryAuthor.website : null,\n            primaryAuthor.twitter ? `https://twitter.com/${_.trimStart(primaryAuthor.twitter, `@`)}/` : null,\n            primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook}/` : null\n        )\n    } else {\n        authorProfiles.push(\n            `https://vwa.la/`,\n            `https://twitter.com/ghost/`,\n            `https://www.facebook.com/ghost/`\n        )\n    }\n\n    authorProfiles = _.compact(authorProfiles)\n\n    return {\n        name: fetchAuthorData ? primaryAuthor.name : `Ghost`,\n        sameAsArray: authorProfiles.length ? `[\"${_.join(authorProfiles, `\", \"`)}\"]` : null,\n        image: fetchAuthorData ? primaryAuthor.profile_image : null,\n    }\n}\n\ngetAuthorProperties.defaultProps = {\n    fetchAuthorData: false,\n}\n\ngetAuthorProperties.PropTypes = {\n    primaryAuthor: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        profile_image: PropTypes.string,\n        website: PropTypes.string,\n        twitter: PropTypes.string,\n        facebook: PropTypes.string,\n    }).isRequired,\n    fetchAuthorData: PropTypes.bool.isRequired,\n}\n\nexport default getAuthorProperties\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nconst ImageMeta = ({ image }) => (\n    <Helmet>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:image\" content={image} />\n        <meta property=\"og:image\" content={image} />\n        {/* These are the image sizes of the SEO feature images */}\n        <meta property=\"og:image:width\" content=\"1000\" />\n        <meta property=\"og:image:height\" content=\"523\" />\n    </Helmet >\n)\n\nImageMeta.propTypes = {\n    image: PropTypes.string.isRequired,\n}\n\nexport default ImageMeta\n","import { tags as tagsHelper } from '@tryghost/helpers';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from \"react-helmet\";\nimport getAuthorProperties from './getAuthorProperties';\nimport ImageMeta from './ImageMeta';\n\n\nconst ArticleMetaGhost = ({ data, canonical, fetchAuthorData, title, overwriteDefaultImage, image }) => {\n    const { ghostPost } = data\n    const { siteMetadata } = data.site\n\n    const author = getAuthorProperties(ghostPost.primary_author, fetchAuthorData)\n    const publicTags = _.map(tagsHelper(ghostPost, { visibility: `public`, fn: tag => tag }), `name`)\n    const primaryTag = publicTags[0] || { name: `General`, slug: `general` }\n    const seoImage = (overwriteDefaultImage && ghostPost.feature_image) ? ghostPost.feature_image : image\n\n    return (\n        <>\n            <Helmet>\n                <title>{ghostPost.meta_title || title || ghostPost.title}</title>\n                <meta name=\"description\" content={ghostPost.meta_description || ghostPost.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta name=\"og:type\" content=\"article\" />\n                <meta name=\"og:title\"\n                    content={\n                        ghostPost.og_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"og:description\"\n                    content={\n                        ghostPost.og_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={ghostPost.published_at} />\n                <meta property=\"article:modified_time\" content={ghostPost.updated_at} />\n                {publicTags.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />))}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\"\n                    content={\n                        ghostPost.twitter_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"twitter:description\"\n                    content={\n                        ghostPost.twitter_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta name=\"twitter:url\" content={canonical} />\n                {/* <meta name=\"twitter.label1\" content=\"Reading time\" /> */}\n                {/* <meta name=\"twitter:data1\" content=\"TODO: Reading time helper and replace existing `label1` data\" /> */}\n                <meta name=\"twitter:label1\" content=\"Written by\" />\n                <meta name=\"twitter:data1\" content={author.name} />\n                <meta name=\"twitter:label2\" content=\"Filed under\" />\n                <meta name=\"twitter:data2\" content={primaryTag} />\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"${author.name}\",\n                            ${author.image ? author.sameAsArray ? `\"image\": \"${author.image}\",` : `\"image\": \"${author.image}\"` : ``}\n                            ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray}` : ``}\n                        },\n                        ${publicTags.length ? `\"keywords\": \"${_.join(publicTags, `, `)}\",` : ``}\n                        \"headline\": \"${ghostPost.meta_title || title || ghostPost.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${ghostPost.published_at}\",\n                        \"dateModified\": \"${ghostPost.updated_at}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${ghostPost.meta_description || ghostPost.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://blog.vwa.la/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nArticleMetaGhost.defaultProps = {\n    fetchAuthorData: false,\n}\n\nArticleMetaGhost.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            published_at: PropTypes.string.isRequired,\n            updated_at: PropTypes.string.isRequired,\n            excerpt: PropTypes.string.isRequired,\n            meta_title: PropTypes.string,\n            meta_description: PropTypes.string,\n            primary_author: PropTypes.object.isRequired,\n            feature_image: PropTypes.string,\n            tags: PropTypes.arrayOf(\n                PropTypes.shape({\n                    name: PropTypes.string,\n                    slug: PropTypes.string,\n                    visibility: PropTypes.string,\n                })\n            ),\n            primaryTag: PropTypes.shape({\n                name: PropTypes.string,\n            }),\n            og_title: PropTypes.string,\n            og_description: PropTypes.string,\n            twitter_title: PropTypes.string,\n            twitter_description: PropTypes.string,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    fetchAuthorData: PropTypes.bool,\n    title: PropTypes.string,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default ArticleMetaGhost\n","import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { getMetaImageUrls } from '.';\nimport ImageMeta from './ImageMeta';\n\n\nconst ArticleMetaMD = ({ data, canonical }) => {\n    const post = data.markdownRemark\n    const fm = post.frontmatter\n    const { siteMetadata } = data.site\n\n    // Convert the frontmatter date into ISO String but, and use a fixed\n    // date, if no date is set. The published date should not change once set.\n    const publishedAtISODate = fm.date ? new Date(fm.date).toISOString() : new Date(`2018-10-15`).toISOString()\n    const primaryTag = fm.keywords && fm.keywords.length ? fm.keywords[0] : null\n    const seoImage = getMetaImageUrls()\n\n    return (\n        <>\n            <Helmet>\n                <title>{fm.meta_title || fm.title}</title>\n                <meta name=\"description\" content={fm.meta_description || post.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta name=\"og:type\" content=\"article\" />\n                <meta name=\"og:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"og:description\" content={fm.meta_description || post.excerpt} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={publishedAtISODate} />\n                {fm.keywords && fm.keywords.length ? fm.keywords.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />)) : null}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"twitter:description\" content={fm.meta_description || post.excerpt} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter.label1\" content=\"Reading time\" />\n                <meta name=\"twitter:data1\" content={`${post.timeToRead} min read`} />\n                {primaryTag ? <meta name=\"twitter:label2\" content=\"Filed under\" /> : null}\n                {primaryTag ? <meta name=\"twitter:data2\" content={primaryTag} /> : null}\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"Ghost\",\n                            \"sameAs\": [\n                                \"https://vwa.la/\",\n                                \"https://www.facebook.com/ghost/\",\n                                \"https://twitter.com/tryghost/\"\n                            ]\n                        },\n                        ${fm.keywords && fm.keywords.length ? `\"keywords\": \"${_.join(fm.keywords, `, `)}\",` : ``}\n                        \"headline\": \"${fm.meta_title || fm.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${publishedAtISODate}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${fm.meta_description || post.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//     \"name\": \"Ghost\",\n//     \"logo\": {\n//         \"@type\": \"ImageObject\",\n//         \"url\": \"https://blog.vwa.la/favicon.png\",\n//         \"width\": 60,\n//         \"height\": 60\n//     }\n// },\n\nArticleMetaMD.propTypes = {\n    data: PropTypes.shape({\n        markdownRemark: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n                title: PropTypes.string.isRequired,\n                keywords: PropTypes.arrayOf(\n                    PropTypes.string,\n                ),\n                meta_title: PropTypes.string,\n                meta_description: PropTypes.string,\n                date: PropTypes.string,\n            }).isRequired,\n            excerpt: PropTypes.string.isRequired,\n            timeToRead: PropTypes.number,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n}\n\nexport default ArticleMetaMD\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from \"react-helmet\";\nimport ImageMeta from './ImageMeta';\n\n\nconst WebsiteMeta = ({ data, canonical, title, description, image, type }) => (\n    <>\n        <Helmet>\n            <title>{title}</title>\n            <meta name=\"description\" content={description} />\n            <link rel=\"canonical\" href={canonical} />\n            <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n            <meta property=\"og:type\" content=\"website\" />\n            <meta property=\"og:title\" content={title} />\n            <meta property=\"og:description\" content={description} />\n            <meta property=\"og:url\" content={canonical} />\n            <meta name=\"twitter:title\" content={title} />\n            <meta name=\"twitter:description\" content={description} />\n            <meta name=\"twitter:url\" content={canonical} />\n            <meta name=\"twitter:site\" content=\"@tryghost\" />\n            <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": ${type && type === `series` ? `\"Series\"` : `\"WebSite\"`},\n                        \"url\": \"${canonical}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${image}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${data.site.siteMetadata.siteUrl}\"\n                        },\n                        \"description\": \"${description}\"\n                    }\n                `}</script>\n        </Helmet>\n        <ImageMeta image={image} />\n    </>\n)\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://blog.vwa.la/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nWebsiteMeta.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    type: PropTypes.oneOf([`website`, `series`]).isRequired,\n}\n\nexport default WebsiteMeta\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport url from 'url'\n\nimport ArticleMetaGhost from './ArticleMetaGhost'\nimport ArticleMetaMD from './ArticleMetaMD'\nimport WebsiteMeta from './WebsiteMeta'\n\nconst MetaData = ({\n    data,\n    type,\n    title,\n    description,\n    image,\n    fetchAuthorData,\n    overwriteDefaultImage,\n    location,\n}) => {\n    const { ghostPost, markdownRemark } = data || {}\n    const { siteMetadata } = data.site\n\n    const canonical = url.resolve(siteMetadata.siteUrl, location.pathname, `/`)\n\n    if (type === `article`) {\n        if (ghostPost) {\n            return (\n                <ArticleMetaGhost\n                    data={data}\n                    canonical={canonical}\n                    fetchAuthorData={fetchAuthorData}\n                    title={title}\n                    image={image}\n                    overwriteDefaultImage={overwriteDefaultImage}\n                />\n            )\n        } else if (markdownRemark) {\n            return (\n                <ArticleMetaMD\n                    data={data}\n                    canonical={canonical}\n                />\n            )\n        }\n    } else if (type === `website` || type === `series`) {\n        return (\n            <WebsiteMeta\n                data={data}\n                canonical={canonical}\n                title={title}\n                description={description}\n                image={image}\n                type={type}\n            />\n        )\n    }\n\n    return null\n}\n\nMetaData.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        ghostPost: PropTypes.object,\n        markdownRemark: PropTypes.object,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    type: PropTypes.oneOf([`website`, `series`, `article`]).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n    fetchAuthorData: PropTypes.bool,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default MetaData\n","import PropTypes from 'prop-types';\nimport url from 'url';\n\n// TODO: this should be available as global var without the need to query\n// the siteMetadata.\nconst SITEURL = process.env.SITE_URL || `https://docs.vwa.la`\n\nconst imageUrls = {\n    // faq: url.resolve(SITEURL, `/images/meta/Ghost-FAQ.jpg`),\n    // integrations: url.resolve(SITEURL, `/images/meta/Ghost-Integrations.jpg`),\n    // tutorials: url.resolve(SITEURL, `/images/meta/Ghost-Tutorials.jpg`),\n    default: url.resolve(SITEURL, `/images/meta/hero.png`),\n}\n\nexport const getMetaImageUrls = (section) => {\n    // Set the default image if no section is passed\n    section = section || `default`\n    return imageUrls[section]\n}\n\ngetMetaImageUrls.proptypes = {\n    section: PropTypes.string.isRequired,\n}\n\nexport default getMetaImageUrls\n\n","export { default as MetaData } from './MetaData'\nexport { default as getMetaImageUrls } from './getMetaImageUrls'\n"],"sourceRoot":""}