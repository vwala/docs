{"version":3,"sources":["webpack:///./src/components/common/meta/getAuthorProperties.js","webpack:///./src/components/common/meta/ImageMeta.js","webpack:///./src/components/common/meta/ArticleMetaGhost.js","webpack:///./src/components/common/meta/ArticleMetaMD.js","webpack:///./src/components/common/meta/WebsiteMeta.js","webpack:///./src/components/common/meta/MetaData.js","webpack:///./src/components/common/meta/getMetaImageUrls.js","webpack:///./src/components/common/meta/index.js","webpack:///./src/utils/getTagsforPostCollection.js","webpack:///./src/components/integrations/IntegrationBox.js","webpack:///./node_modules/react-instantsearch-core/dist/es/connectors/connectHits.js","webpack:///./src/components/integrations/integration-search/IntegrationResults.js","webpack:///./node_modules/react-instantsearch-core/dist/es/connectors/connectSearchBox.js","webpack:///./src/components/integrations/integration-search/IntegrationSearchBox.js","webpack:///./src/components/integrations/integration-search/IntegrationIndex.js","webpack:///./src/components/integrations/IntegrationsTagList.js","webpack:///./src/components/integrations/IntegrationsContent.js","webpack:///./src/components/integrations/index.js"],"names":["getAuthorProperties","primaryAuthor","fetchAuthorData","authorProfiles","push","website","twitter","_","trimStart","facebook","compact","name","sameAsArray","length","join","image","profile_image","defaultProps","PropTypes","shape","string","isRequired","bool","ImageMeta","_ref","react_default","a","createElement","Helmet_default","content","property","propTypes","ArticleMetaGhost","data","canonical","title","overwriteDefaultImage","ghostPost","siteMetadata","site","author","primary_author","publicTags","map","tagsHelper","visibility","fn","tag","primaryTag","slug","seoImage","feature_image","Fragment","meta_title","meta_description","excerpt","rel","href","og_title","og_description","published_at","updated_at","keyword","i","key","twitter_title","twitter_description","type","siteUrl","meta_ImageMeta","object","tags","arrayOf","description","ArticleMetaMD","post","markdownRemark","fm","frontmatter","publishedAtISODate","date","Date","toISOString","keywords","getMetaImageUrls","timeToRead","number","WebsiteMeta","oneOf","MetaData","location","_ref2","url","resolve","pathname","meta_ArticleMetaGhost","meta_ArticleMetaMD","meta_WebsiteMeta","imageUrls","default","process","section","proptypes","__webpack_require__","d","__webpack_exports__","meta_MetaData","meta_getMetaImageUrls","getTagsforPostCollection","posts","linkPrefix","exec","forEach","node","flattenDeep","link","sortedUniqBy","sortBy","IntegrationBox","hit","optimisedImg","common","to","className","elevation","radius","style","objectFit","src","alt","connectHits","Object","createConnector","displayName","getProvidedProps","props","searchState","searchResults","results","indexUtils","this","context","hits","getSearchParameters","searchParameters","IntegrationResults","integrations_IntegrationBox","objectID","IntegrationResultsList","getCurrentRefinement","currentRefinement","_refine","nextRefinement","obj","value","nextValue","defineProperty","enumerable","configurable","writable","connectSearchBox","defaultRefinement","node_modules_prop_types_default","isSearchStalled","refine","cleanUp","_cleanUp","setQuery","getMetadata","_this","id","index","items","label","nextState","IntegrationSearch","_React$Component","call","state","currentInput","showResetButton","handleChange","bind","assertThisInitialized_default","setInput","resetSearch","toggleResetButton","e","setState","val","searchActive","target","render","htmlFor","placeholder","autoComplete","onChange","onClick","React","Component","func","IntegrationSearchBox","IntegrationIndex","children","Index","indexName","IntegrationsTagList","activeLocation","allGhostPost","edges","unshift","data-cy","dynamicClass","gatsby_browser_entry","IntegrationTagsQuery","query","IntegrationsTagList_IntegrationsTagList","assign","_420472741","IntegrationsContent","activeSorting","searchSwitch","field","firstSortField","secondSortField","sortedPosts","layout","headerDividerStyle","header","theme","Spirit","sectionHeading","sectionSubHeading","integration_search_IntegrationSearchBox","integration_search_IntegrationIndex","page","xl","integrations_IntegrationsTagList","integration_search_IntegrationResults","array","integrations_IntegrationsContent"],"mappings":"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","file":"5-dbed6be5e65c88ffa6e2.js","sourcesContent":["import _ from 'lodash';\nimport PropTypes from 'prop-types';\n\nexport const getAuthorProperties = (primaryAuthor, fetchAuthorData) => {\n    let authorProfiles = []\n\n    if (fetchAuthorData) {\n        authorProfiles.push(\n            primaryAuthor.website ? primaryAuthor.website : null,\n            primaryAuthor.twitter ? `https://twitter.com/${_.trimStart(primaryAuthor.twitter, `@`)}/` : null,\n            primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook}/` : null\n        )\n    } else {\n        authorProfiles.push(\n            `https://vwa.la/`,\n            `https://twitter.com/ghost/`,\n            `https://www.facebook.com/ghost/`\n        )\n    }\n\n    authorProfiles = _.compact(authorProfiles)\n\n    return {\n        name: fetchAuthorData ? primaryAuthor.name : `Ghost`,\n        sameAsArray: authorProfiles.length ? `[\"${_.join(authorProfiles, `\", \"`)}\"]` : null,\n        image: fetchAuthorData ? primaryAuthor.profile_image : null,\n    }\n}\n\ngetAuthorProperties.defaultProps = {\n    fetchAuthorData: false,\n}\n\ngetAuthorProperties.PropTypes = {\n    primaryAuthor: PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        profile_image: PropTypes.string,\n        website: PropTypes.string,\n        twitter: PropTypes.string,\n        facebook: PropTypes.string,\n    }).isRequired,\n    fetchAuthorData: PropTypes.bool.isRequired,\n}\n\nexport default getAuthorProperties\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\n\nconst ImageMeta = ({ image }) => (\n    <Helmet>\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:image\" content={image} />\n        <meta property=\"og:image\" content={image} />\n        {/* These are the image sizes of the SEO feature images */}\n        <meta property=\"og:image:width\" content=\"1000\" />\n        <meta property=\"og:image:height\" content=\"523\" />\n    </Helmet >\n)\n\nImageMeta.propTypes = {\n    image: PropTypes.string.isRequired,\n}\n\nexport default ImageMeta\n","import { tags as tagsHelper } from '@tryghost/helpers';\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from \"react-helmet\";\nimport getAuthorProperties from './getAuthorProperties';\nimport ImageMeta from './ImageMeta';\n\n\nconst ArticleMetaGhost = ({ data, canonical, fetchAuthorData, title, overwriteDefaultImage, image }) => {\n    const { ghostPost } = data\n    const { siteMetadata } = data.site\n\n    const author = getAuthorProperties(ghostPost.primary_author, fetchAuthorData)\n    const publicTags = _.map(tagsHelper(ghostPost, { visibility: `public`, fn: tag => tag }), `name`)\n    const primaryTag = publicTags[0] || { name: `General`, slug: `general` }\n    const seoImage = (overwriteDefaultImage && ghostPost.feature_image) ? ghostPost.feature_image : image\n\n    return (\n        <>\n            <Helmet>\n                <title>{ghostPost.meta_title || title || ghostPost.title}</title>\n                <meta name=\"description\" content={ghostPost.meta_description || ghostPost.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta name=\"og:type\" content=\"article\" />\n                <meta name=\"og:title\"\n                    content={\n                        ghostPost.og_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"og:description\"\n                    content={\n                        ghostPost.og_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={ghostPost.published_at} />\n                <meta property=\"article:modified_time\" content={ghostPost.updated_at} />\n                {publicTags.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />))}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\"\n                    content={\n                        ghostPost.twitter_title ||\n                        title ||\n                        ghostPost.meta_title ||\n                        ghostPost.title\n                    }\n                />\n                <meta name=\"twitter:description\"\n                    content={\n                        ghostPost.twitter_description ||\n                        ghostPost.excerpt ||\n                        ghostPost.meta_description\n                    }\n                />\n                <meta name=\"twitter:url\" content={canonical} />\n                {/* <meta name=\"twitter.label1\" content=\"Reading time\" /> */}\n                {/* <meta name=\"twitter:data1\" content=\"TODO: Reading time helper and replace existing `label1` data\" /> */}\n                <meta name=\"twitter:label1\" content=\"Written by\" />\n                <meta name=\"twitter:data1\" content={author.name} />\n                <meta name=\"twitter:label2\" content=\"Filed under\" />\n                <meta name=\"twitter:data2\" content={primaryTag} />\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"${author.name}\",\n                            ${author.image ? author.sameAsArray ? `\"image\": \"${author.image}\",` : `\"image\": \"${author.image}\"` : ``}\n                            ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray}` : ``}\n                        },\n                        ${publicTags.length ? `\"keywords\": \"${_.join(publicTags, `, `)}\",` : ``}\n                        \"headline\": \"${ghostPost.meta_title || title || ghostPost.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${ghostPost.published_at}\",\n                        \"dateModified\": \"${ghostPost.updated_at}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${ghostPost.meta_description || ghostPost.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://blog.vwa.la/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nArticleMetaGhost.defaultProps = {\n    fetchAuthorData: false,\n}\n\nArticleMetaGhost.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            published_at: PropTypes.string.isRequired,\n            updated_at: PropTypes.string.isRequired,\n            excerpt: PropTypes.string.isRequired,\n            meta_title: PropTypes.string,\n            meta_description: PropTypes.string,\n            primary_author: PropTypes.object.isRequired,\n            feature_image: PropTypes.string,\n            tags: PropTypes.arrayOf(\n                PropTypes.shape({\n                    name: PropTypes.string,\n                    slug: PropTypes.string,\n                    visibility: PropTypes.string,\n                })\n            ),\n            primaryTag: PropTypes.shape({\n                name: PropTypes.string,\n            }),\n            og_title: PropTypes.string,\n            og_description: PropTypes.string,\n            twitter_title: PropTypes.string,\n            twitter_description: PropTypes.string,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    fetchAuthorData: PropTypes.bool,\n    title: PropTypes.string,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default ArticleMetaGhost\n","import _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from 'react-helmet';\nimport { getMetaImageUrls } from '.';\nimport ImageMeta from './ImageMeta';\n\n\nconst ArticleMetaMD = ({ data, canonical }) => {\n    const post = data.markdownRemark\n    const fm = post.frontmatter\n    const { siteMetadata } = data.site\n\n    // Convert the frontmatter date into ISO String but, and use a fixed\n    // date, if no date is set. The published date should not change once set.\n    const publishedAtISODate = fm.date ? new Date(fm.date).toISOString() : new Date(`2018-10-15`).toISOString()\n    const primaryTag = fm.keywords && fm.keywords.length ? fm.keywords[0] : null\n    const seoImage = getMetaImageUrls()\n\n    return (\n        <>\n            <Helmet>\n                <title>{fm.meta_title || fm.title}</title>\n                <meta name=\"description\" content={fm.meta_description || post.excerpt} />\n                <link rel=\"canonical\" href={canonical} />\n\n                <meta property=\"og:site_name\" content={siteMetadata.title} />\n                <meta name=\"og:type\" content=\"article\" />\n                <meta name=\"og:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"og:description\" content={fm.meta_description || post.excerpt} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta property=\"article:published_time\" content={publishedAtISODate} />\n                {fm.keywords && fm.keywords.length ? fm.keywords.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />)) : null}\n                <meta property=\"article:author\" content=\"https://www.facebook.com/ghost/\" />\n\n                <meta name=\"twitter:title\" content={fm.meta_title || fm.title} />\n                <meta name=\"twitter:description\" content={fm.meta_description || post.excerpt} />\n                <meta name=\"twitter:url\" content={canonical} />\n                <meta name=\"twitter.label1\" content=\"Reading time\" />\n                <meta name=\"twitter:data1\" content={`${post.timeToRead} min read`} />\n                {primaryTag ? <meta name=\"twitter:label2\" content=\"Filed under\" /> : null}\n                {primaryTag ? <meta name=\"twitter:data2\" content={primaryTag} /> : null}\n                <meta name=\"twitter:site\" content=\"@tryghost\" />\n                <meta name=\"twitter:creator\" content=\"@tryghost\" />\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"Article\",\n                        \"author\": {\n                            \"@type\": \"Person\",\n                            \"name\": \"Ghost\",\n                            \"sameAs\": [\n                                \"https://vwa.la/\",\n                                \"https://www.facebook.com/ghost/\",\n                                \"https://twitter.com/tryghost/\"\n                            ]\n                        },\n                        ${fm.keywords && fm.keywords.length ? `\"keywords\": \"${_.join(fm.keywords, `, `)}\",` : ``}\n                        \"headline\": \"${fm.meta_title || fm.title}\",\n                        \"url\": \"${canonical}\",\n                        \"datePublished\": \"${publishedAtISODate}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${seoImage}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"description\": \"${fm.meta_description || post.excerpt}\",\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${siteMetadata.siteUrl}\"\n                        }\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={seoImage} />\n        </>\n    )\n}\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//     \"name\": \"Ghost\",\n//     \"logo\": {\n//         \"@type\": \"ImageObject\",\n//         \"url\": \"https://blog.vwa.la/favicon.png\",\n//         \"width\": 60,\n//         \"height\": 60\n//     }\n// },\n\nArticleMetaMD.propTypes = {\n    data: PropTypes.shape({\n        markdownRemark: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n                title: PropTypes.string.isRequired,\n                keywords: PropTypes.arrayOf(\n                    PropTypes.string,\n                ),\n                meta_title: PropTypes.string,\n                meta_description: PropTypes.string,\n                date: PropTypes.string,\n            }).isRequired,\n            excerpt: PropTypes.string.isRequired,\n            timeToRead: PropTypes.number,\n        }).isRequired,\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n}\n\nexport default ArticleMetaMD\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Helmet from \"react-helmet\";\nimport ImageMeta from './ImageMeta';\n\n\nconst WebsiteMeta = ({ data, canonical, title, description, image, type }) => (\n    <>\n        <Helmet>\n            <title>{title}</title>\n            <meta name=\"description\" content={description} />\n            <link rel=\"canonical\" href={canonical} />\n            <meta property=\"og:site_name\" content={data.site.siteMetadata.title} />\n            <meta property=\"og:type\" content=\"website\" />\n            <meta property=\"og:title\" content={title} />\n            <meta property=\"og:description\" content={description} />\n            <meta property=\"og:url\" content={canonical} />\n            <meta name=\"twitter:title\" content={title} />\n            <meta name=\"twitter:description\" content={description} />\n            <meta name=\"twitter:url\" content={canonical} />\n            <meta name=\"twitter:site\" content=\"@tryghost\" />\n            <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": ${type && type === `series` ? `\"Series\"` : `\"WebSite\"`},\n                        \"url\": \"${canonical}\",\n                        \"image\": {\n                            \"@type\": \"ImageObject\",\n                            \"url\": \"${image}\",\n                            \"width\": 1000,\n                            \"height\": 563\n                        },\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${data.site.siteMetadata.siteUrl}\"\n                        },\n                        \"description\": \"${description}\"\n                    }\n                `}</script>\n        </Helmet>\n        <ImageMeta image={image} />\n    </>\n)\n\n// \"publisher\": {\n//     \"@type\": \"Organization\",\n//         \"name\": \"Ghost\",\n//             \"logo\": {\n//         \"@type\": \"ImageObject\",\n//             \"url\": \"https://blog.vwa.la/favicon.png\",\n//                 \"width\": 60,\n//                     \"height\": 60\n//     }\n// },\n\nWebsiteMeta.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    image: PropTypes.string.isRequired,\n    type: PropTypes.oneOf([`website`, `series`]).isRequired,\n}\n\nexport default WebsiteMeta\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport url from 'url'\n\nimport ArticleMetaGhost from './ArticleMetaGhost'\nimport ArticleMetaMD from './ArticleMetaMD'\nimport WebsiteMeta from './WebsiteMeta'\n\nconst MetaData = ({\n    data,\n    type,\n    title,\n    description,\n    image,\n    fetchAuthorData,\n    overwriteDefaultImage,\n    location,\n}) => {\n    const { ghostPost, markdownRemark } = data || {}\n    const { siteMetadata } = data.site\n\n    const canonical = url.resolve(siteMetadata.siteUrl, location.pathname, `/`)\n\n    if (type === `article`) {\n        if (ghostPost) {\n            return (\n                <ArticleMetaGhost\n                    data={data}\n                    canonical={canonical}\n                    fetchAuthorData={fetchAuthorData}\n                    title={title}\n                    image={image}\n                    overwriteDefaultImage={overwriteDefaultImage}\n                />\n            )\n        } else if (markdownRemark) {\n            return (\n                <ArticleMetaMD\n                    data={data}\n                    canonical={canonical}\n                />\n            )\n        }\n    } else if (type === `website` || type === `series`) {\n        return (\n            <WebsiteMeta\n                data={data}\n                canonical={canonical}\n                title={title}\n                description={description}\n                image={image}\n                type={type}\n            />\n        )\n    }\n\n    return null\n}\n\nMetaData.propTypes = {\n    data: PropTypes.shape({\n        site: PropTypes.shape({\n            siteMetadata: PropTypes.shape({\n                siteUrl: PropTypes.string.isRequired,\n                title: PropTypes.string.isRequired,\n                description: PropTypes.string.isRequired,\n            }).isRequired,\n        }).isRequired,\n        ghostPost: PropTypes.object,\n        markdownRemark: PropTypes.object,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    type: PropTypes.oneOf([`website`, `series`, `article`]).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n    fetchAuthorData: PropTypes.bool,\n    overwriteDefaultImage: PropTypes.bool,\n}\n\nexport default MetaData\n","import PropTypes from 'prop-types';\nimport url from 'url';\n\n// TODO: this should be available as global var without the need to query\n// the siteMetadata.\nconst SITEURL = process.env.SITE_URL || `https://docs.vwa.la`\n\nconst imageUrls = {\n    // faq: url.resolve(SITEURL, `/images/meta/Ghost-FAQ.jpg`),\n    // integrations: url.resolve(SITEURL, `/images/meta/Ghost-Integrations.jpg`),\n    // tutorials: url.resolve(SITEURL, `/images/meta/Ghost-Tutorials.jpg`),\n    default: url.resolve(SITEURL, `/images/meta/hero.png`),\n}\n\nexport const getMetaImageUrls = (section) => {\n    // Set the default image if no section is passed\n    section = section || `default`\n    return imageUrls[section]\n}\n\ngetMetaImageUrls.proptypes = {\n    section: PropTypes.string.isRequired,\n}\n\nexport default getMetaImageUrls\n\n","export { default as MetaData } from './MetaData'\nexport { default as getMetaImageUrls } from './getMetaImageUrls'\n","import PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { tags as tagsHelper } from '@tryghost/helpers'\n\n/* getTagsforPostCollection\n* Takes a Ghost post object and a link prefix and returns the used tags\n* array for a passed post collection. The tags will not contain internal tags,\n* duplicates, and are sorted ascending by name. The tags array can be used to\n* programmatically generate a tags cloud or menu.\n*/\nexport const getTagsforPostCollection = function getTagsforPostCollection(posts, linkPrefix) {\n    let tags = []\n    // remove any added `/`, as we add them later again\n    linkPrefix = /^(?:\\/?)([a-zA-Z\\d-]*)(?:\\/?)/i.exec(linkPrefix)[1]\n\n    _.forEach(posts, ({ node }) => {\n        const publicTags = tagsHelper(node, { visibility: `public`, fn: tag => tag })\n        tags.push(publicTags)\n    })\n\n    tags = _.flattenDeep(tags)\n\n    _.map(tags, (tag) => {\n        tag.link = linkPrefix ? `/${linkPrefix}/${tag.slug}/` : `/${tag.slug}/`\n    })\n\n    return _.sortedUniqBy(_.sortBy(_.flattenDeep(tags), `name`), `name`)\n}\n\ngetTagsforPostCollection.proptypes = {\n    posts: PropTypes.arrayOf(\n        PropTypes.shape({\n            node: PropTypes.shape({\n                tags: PropTypes.arrayOf(\n                    PropTypes.shape({\n                        name: PropTypes.string.isRequired,\n                        slug: PropTypes.string.isRequired,\n                    })\n                ).isRequired,\n            }).isRequired,\n        })).isRequired,\n    linkPrefix: PropTypes.string,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { Box } from '../common'\n\nconst IntegrationBox = ({ post, hit, section }) => {\n    const url = post ? `/${section}/${post.slug}/` : hit.url\n    const title = post ? post.title : hit.title\n    const image = post ? post.feature_image : hit.image\n    const optimisedImg = `https://res.cloudinary.com/tryghost/image/fetch/w_120,h_100,c_fit/${image}`\n\n    return (\n        <Box\n            to={url}\n            className=\"flex flex-column justify-center items-center w-100 h30 pa3 tc tdn darkgrey bg-white shadow-2\"\n            elevation=\"2\"\n            radius=\"4\"\n        >\n            <div className=\"flex justify-center items-center h10 w13 mt1\">\n                <img className=\"w-100 h-100\" style={{ objectFit: `contain` }} src={optimisedImg} alt={title} />\n            </div>\n            <div className=\"f8 mt3\">{title}</div>\n        </Box>\n    )\n}\n\nIntegrationBox.propTypes = {\n    post: PropTypes.shape({\n        title: PropTypes.string,\n        feature_image: PropTypes.string,\n        slug: PropTypes.string,\n    }),\n    hit: PropTypes.shape({\n        url: PropTypes.string,\n        title: PropTypes.string,\n        image: PropTypes.string,\n    }),\n    section: PropTypes.string.isRequired,\n}\n\nexport default IntegrationBox\n","import createConnector from '../core/createConnector';\nimport { getResults } from '../core/indexUtils';\n\n/**\n * connectHits connector provides the logic to create connected\n * components that will render the results retrieved from\n * Algolia.\n *\n * To configure the number of hits retrieved, use [HitsPerPage widget](widgets/HitsPerPage.html),\n * [connectHitsPerPage connector](connectors/connectHitsPerPage.html) or pass the hitsPerPage\n * prop to a [Configure](guide/Search_parameters.html) widget.\n *\n * **Warning:** you will need to use the **objectID** property available on every hit as a key\n * when iterating over them. This will ensure you have the best possible UI experience\n * especially on slow networks.\n * @name connectHits\n * @kind connector\n * @providedPropType {array.<object>} hits - the records that matched the search state\n * @example\n * import React from 'react';\n * import { InstantSearch, Highlight, connectHits } from 'react-instantsearch-dom';\n *\n * const CustomHits = connectHits(({ hits }) => (\n *   <div>\n *     {hits.map(hit =>\n *       <p key={hit.objectID}>\n *         <Highlight attribute=\"name\" hit={hit} />\n *       </p>\n *     )}\n *   </div>\n * ));\n *\n * const App = () => (\n *   <InstantSearch\n *     appId=\"latency\"\n *     apiKey=\"6be0576ff61c053d5f9a3225e2a90f76\"\n *     indexName=\"instant_search\"\n *   >\n *     <CustomHits />\n *   </InstantSearch>\n * );\n */\nexport default createConnector({\n  displayName: 'AlgoliaHits',\n\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    var results = getResults(searchResults, this.context);\n    var hits = results ? results.hits : [];\n\n    return { hits: hits };\n  },\n\n\n  /* Hits needs to be considered as a widget to trigger a search if no others widgets are used.\n   * To be considered as a widget you need either getSearchParameters, getMetadata or getTransitionState\n   * See createConnector.js\n   * */\n  getSearchParameters: function getSearchParameters(searchParameters) {\n    return searchParameters;\n  }\n});","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connectHits } from 'react-instantsearch-dom'\n\nimport { IntegrationBox } from '../.'\n\nconst IntegrationResults = ({ hits }) => (\n    <div className=\"gh-integrations w-100\">\n        {hits.map(hit => <IntegrationBox key={hit.objectID} hit={hit} section=\"integrations\" />)}\n    </div>\n)\n\nIntegrationResults.propTypes = {\n    hits: PropTypes.arrayOf(\n        PropTypes.shape({\n            objectID: PropTypes.string.isRequired,\n        }).isRequired,\n    ).isRequired,\n}\n\nconst IntegrationResultsList = connectHits(IntegrationResults)\n\nexport default IntegrationResultsList\n","function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport PropTypes from 'prop-types';\nimport createConnector from '../core/createConnector';\nimport { cleanUpValue, refineValue, getCurrentRefinementValue, getIndex } from '../core/indexUtils';\n\nfunction getId() {\n  return 'query';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId(props);\n  return getCurrentRefinementValue(props, searchState, context, id, '', function (currentRefinement) {\n    if (currentRefinement) {\n      return currentRefinement;\n    }\n    return '';\n  });\n}\n\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId();\n  var nextValue = _defineProperty({}, id, nextRefinement);\n  var resetPage = true;\n  return refineValue(searchState, nextValue, context, resetPage);\n}\n\nfunction _cleanUp(props, searchState, context) {\n  return cleanUpValue(searchState, context, getId());\n}\n\n/**\n * connectSearchBox connector provides the logic to build a widget that will\n * let the user search for a query\n * @name connectSearchBox\n * @kind connector\n * @propType {string} [defaultRefinement] - Provide a default value for the query\n * @providedPropType {function} refine - a function to change the current query\n * @providedPropType {string} currentRefinement - the current query used\n * @providedPropType {boolean} isSearchStalled - a flag that indicates if InstantSearch has detected that searches are stalled\n */\nexport default createConnector({\n  displayName: 'AlgoliaSearchBox',\n\n  propTypes: {\n    defaultRefinement: PropTypes.string\n  },\n\n  getProvidedProps: function getProvidedProps(props, searchState, searchResults) {\n    return {\n      currentRefinement: getCurrentRefinement(props, searchState, this.context),\n      isSearchStalled: searchResults.isSearchStalled\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, this.context);\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, this.context);\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setQuery(getCurrentRefinement(props, searchState, this.context));\n  },\n  getMetadata: function getMetadata(props, searchState) {\n    var _this = this;\n\n    var id = getId(props);\n    var currentRefinement = getCurrentRefinement(props, searchState, this.context);\n    return {\n      id: id,\n      index: getIndex(this.context),\n      items: currentRefinement === null ? [] : [{\n        label: id + ': ' + currentRefinement,\n        value: function value(nextState) {\n          return _refine(props, nextState, '', _this.context);\n        },\n        currentRefinement: currentRefinement\n      }]\n    };\n  }\n});","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { connectSearchBox } from 'react-instantsearch-dom'\n\nimport { Icon } from '../../common'\n\nclass IntegrationSearch extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            currentInput: this.props.currentRefinement,\n            showResetButton: false,\n        }\n\n        this.handleChange = this.handleChange.bind(this)\n        this.setInput = this.setInput.bind(this)\n        this.resetSearch = this.resetSearch.bind(this)\n        this.toggleResetButton = this.toggleResetButton.bind(this)\n    }\n\n    setInput(e) {\n        this.setState(() => {\n            return { currentInput: e }\n        })\n    }\n\n    toggleResetButton(val) {\n        this.setState(() => {\n            return { showResetButton: val }\n        })\n    }\n\n    resetSearch() {\n        this.props.searchActive(false)\n        this.toggleResetButton(false)\n        this.props.refine()\n\n        this.setState(() => {\n            return { currentInput: `` }\n        })\n    }\n\n    handleChange(e) {\n        this.setInput(e.target.value)\n\n        if (!e.target.value) {\n            // input field is empty, stop what we're doing\n            return this.resetSearch()\n        }\n\n        // Tell parent component, that the search is active now\n        this.props.searchActive(true)\n        this.toggleResetButton(true)\n\n        return this.props.refine(e.target.value)\n    }\n\n    render() {\n        return (\n            <div className=\"relative mt8 mw-s center\">\n                <label htmlFor=\"integrationsearch\" className=\"clip\">Search</label>\n                <Icon name=\"search\" className=\"fill-lightgrey w5 h-auto absolute top-4 left-4\" />\n                <input\n                    id=\"integrationsearch\"\n                    name=\"integrationsearch\"\n                    className=\"input-reset form-text pa4 pl10 pr8 w-100 f6 br-pill ba b--transparent bg-white shadow-2 whitney middarkgrey dark-placeholder\"\n                    type=\"text\"\n                    placeholder=\"Search integrations...\"\n                    autoComplete=\"off\"\n                    value={this.state.currentInput}\n                    onChange={this.handleChange}\n                />\n                {this.state.showResetButton ?\n                    <button\n                        className=\"absolute top-0 right-0 bottom-0 pa0 pr2 b--transparent flex justify-center items-center bg-transparent\"\n                        onClick={this.resetSearch}\n                    >\n                        <Icon name=\"close\" className=\"w4 h4 pa2 fill-midgrey bg-white br-100 pointer dim\" />\n                    </button>\n                    : null\n                }\n            </div>\n        )\n    }\n}\n\nIntegrationSearch.propTypes = {\n    searchActive: PropTypes.func.isRequired,\n    currentRefinement: PropTypes.string,\n    refine: PropTypes.func,\n}\n\n// `IntegrationSearchBox` renders a `<IntegrationSearch>` widget that is connected to\n// the <InstantSearch> state, providing it with `currentRefinement` and `refine` props for\n// reading and manipulating the current query of the search.\nconst IntegrationSearchBox = connectSearchBox(IntegrationSearch)\n\nexport default IntegrationSearchBox\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Index } from 'react-instantsearch-dom'\n\nconst IntegrationIndex = ({ children }) => (<Index indexName=\"integration\">{children}</Index>)\n\nIntegrationIndex.propTypes = {\n    children: PropTypes.node.isRequired,\n}\n\nexport default IntegrationIndex\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link, StaticQuery, graphql } from 'gatsby'\n\nimport { getTagsforPostCollection } from '../../utils/getTagsforPostCollection'\n\nconst IntegrationsTagList = ({ location, searchActive, data }) => {\n    // When the search is active, we set the \"All integrations\" link as active and\n    // overwrite the real active link as long as the search is active\n    const activeLocation = searchActive ? `/integrations/` : location.pathname\n    const tags = getTagsforPostCollection(data.allGhostPost.edges, `integrations`)\n\n    // Add a default tag for \"All Integrations\" at first place, which\n    // links back to the general integrations page\n    tags.unshift({\n        name: `All Integrations`,\n        slug: `all-integrations`,\n        link: `/integrations/`,\n    })\n\n    return (\n        <>\n            <h3 className=\"ma0 mb2\" data-cy=\"filter\">Filter by</h3>\n            {tags.map((tag, i) => {\n                const dynamicClass = activeLocation === tag.link ? `blue fw6` : `midgrey`\n\n                return (\n                    <Link\n                        to={tag.link}\n                        className={`${dynamicClass} link pa2 pl0`}\n                        key={i}\n                        data-cy={`${tag.slug}-filter`}\n                    >\n                        {tag.name}\n                    </Link>\n                )\n            })}\n        </>\n    )\n}\n\nIntegrationsTagList.propTypes = {\n    location: PropTypes.object.isRequired,\n    searchActive: PropTypes.bool.isRequired,\n    data: PropTypes.shape({\n        allGhostPost: PropTypes.shape({\n            edges: PropTypes.arrayOf(\n                PropTypes.shape({\n                    post: PropTypes.shape({\n                        tag: PropTypes.arrayOf(\n                            PropTypes.shape({\n                                name: PropTypes.string,\n                                slug: PropTypes.string,\n                            })\n                        ),\n                    }),\n                }).isRequired,\n            ).isRequired,\n        }).isRequired,\n    }).isRequired,\n}\n\nconst IntegrationTagsQuery = props => (\n    <StaticQuery\n        query={graphql`\n            query GhostIntegrationsTagsQuery {\n                allGhostPost(\n                    sort: { order: ASC, fields: [published_at] },\n                    limit: 100,\n                    filter: {tags: {elemMatch: {slug: {eq: \"hash-integration\"}}}}\n                ) {\n                edges {\n                    node {\n                    ...GhostTagListFields\n                    }\n                }\n                }\n            }\n        `}\n        render={data => <IntegrationsTagList data={data} {...props} />}\n    />\n)\nexport default IntegrationTagsQuery\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\n\nimport { Layout } from '../common/layout'\nimport { NavBar } from '../common/'\nimport IntegrationBox from \"./IntegrationBox\"\nimport { Spirit } from '../../styles/spirit-styles'\nimport { IntegrationIndex, IntegrationSearchBox, IntegrationResults } from './integration-search'\nimport IntegrationsTagList from './IntegrationsTagList'\n\nclass IntegrationsContent extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            posts: this.props.posts,\n            activeSorting: `date`,\n            searchActive: false,\n        }\n\n        this.searchSwitch = this.searchSwitch.bind(this)\n    }\n\n    searchSwitch(val) {\n        // a passed argument needs to win over the toggle\n        this.setState((state) => {\n            return {\n                searchActive: val ? val : !state.searchActive,\n            }\n        })\n    }\n\n    sortBy(field) {\n        let firstSortField\n        let secondSortField\n\n        switch (field) {\n        case `date`:\n            firstSortField = `node.published_at`\n            secondSortField = `node.title`\n            this.setState(() => {\n                return { activeSorting: `date` }\n            })\n            break\n        case `title`:\n            firstSortField = `node.title`\n            secondSortField = `node.published_at`\n            this.setState(() => {\n                return { activeSorting: `title` }\n            })\n            break\n        }\n\n        const sortedPosts = _.sortBy(this.state.posts, [firstSortField, secondSortField])\n\n        this.setState(() => {\n            return { posts: sortedPosts }\n        })\n    }\n\n    render() {\n        const { posts } = this.state\n\n        return (\n            <>\n                <Layout\n                    headerDividerStyle=\"shadow\"\n                    header={\n                        <div className=\"bg-integrations-header-image\">\n                            <div className=\"bg-integrations-header-cover\">\n                                <header className=\"top-0 left-0 right-0 z-9999\">\n                                    <NavBar theme=\"light\" />\n                                </header>\n                                <div className=\"pa-vw4 tc white\">\n                                    <h1 className={`${Spirit.sectionHeading} gh-integration-header-shadow`}>Ghost Integrations</h1>\n                                    <p className={ Spirit.sectionSubHeading }>All your favourite apps and tools, integrated with Ghost</p>\n                                    <IntegrationSearchBox searchActive={this.searchSwitch} />\n                                </div>\n                            </div>\n                        </div>\n                    }\n                >\n                    <IntegrationIndex>\n                        <div className={Spirit.page.xl + `pt10`}>\n                            <div className=\"flex items-start br4\">\n                                <div className=\"gh-integration-sidebar flex-shrink-0 w50 mr5 dn db-ns\">\n                                    <div className=\"flex flex-column mb6\" data-cy=\"sort\">\n                                        <h3 className=\"ma0 mb2\">Sort by</h3>\n                                        <a href=\"#\" className={`link pa2 pl0 ${this.state.activeSorting === `date` ? `blue fw6` : `midgrey`}`} onClick={this.sortBy.bind(this, `date`)}>Most popular</a>\n                                        <a href=\"#\" className={`link pa2 pl0 ${this.state.activeSorting === `title` ? `blue fw6` : `midgrey`}`} onClick={this.sortBy.bind(this, `title`)}>A – Z</a>\n                                    </div>\n                                    <div className=\"flex flex-column mb6\">\n                                        <IntegrationsTagList\n                                            location={this.props.location}\n                                            searchActive={this.state.searchActive}\n                                        />\n                                    </div>\n                                </div>\n                                {this.state.searchActive ?\n                                    <IntegrationResults /> :\n                                    <>\n                                        <div className=\"gh-integrations w-100\">\n                                            {posts.map(({ node }) => (\n                                                <IntegrationBox key={node.id} post={node} section=\"integrations\" />\n                                            ))}\n                                        </div>\n                                    </>\n                                }\n                            </div>\n                        </div>\n                    </IntegrationIndex>\n                </Layout>\n            </>\n        )\n    }\n}\n\nIntegrationsContent.propTypes = {\n    posts: PropTypes.array.isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n}\n\nexport default IntegrationsContent\n","export { default as IntegrationBox } from './IntegrationBox'\nexport { default as IntegrationsContent } from './IntegrationsContent'\nexport { default as IntegrationsTagList } from './IntegrationsTagList'\n"],"sourceRoot":""}